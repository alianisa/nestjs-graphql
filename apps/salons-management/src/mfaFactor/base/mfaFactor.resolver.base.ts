/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MfaFactor } from "./MfaFactor";
import { MfaFactorCountArgs } from "./MfaFactorCountArgs";
import { MfaFactorFindManyArgs } from "./MfaFactorFindManyArgs";
import { MfaFactorFindUniqueArgs } from "./MfaFactorFindUniqueArgs";
import { CreateMfaFactorArgs } from "./CreateMfaFactorArgs";
import { UpdateMfaFactorArgs } from "./UpdateMfaFactorArgs";
import { DeleteMfaFactorArgs } from "./DeleteMfaFactorArgs";
import { MfaChallengeFindManyArgs } from "../../mfaChallenge/base/MfaChallengeFindManyArgs";
import { MfaChallenge } from "../../mfaChallenge/base/MfaChallenge";
import { User } from "../../user/base/User";
import { MfaFactorService } from "../mfaFactor.service";
@graphql.Resolver(() => MfaFactor)
export class MfaFactorResolverBase {
  constructor(protected readonly service: MfaFactorService) {}

  async _mfaFactorsMeta(
    @graphql.Args() args: MfaFactorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MfaFactor])
  async mfaFactors(
    @graphql.Args() args: MfaFactorFindManyArgs
  ): Promise<MfaFactor[]> {
    return this.service.mfaFactors(args);
  }

  @graphql.Query(() => MfaFactor, { nullable: true })
  async mfaFactor(
    @graphql.Args() args: MfaFactorFindUniqueArgs
  ): Promise<MfaFactor | null> {
    const result = await this.service.mfaFactor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MfaFactor)
  async createMfaFactor(
    @graphql.Args() args: CreateMfaFactorArgs
  ): Promise<MfaFactor> {
    return await this.service.createMfaFactor({
      ...args,
      data: {
        ...args.data,

        users: {
          connect: args.data.users,
        },
      },
    });
  }

  @graphql.Mutation(() => MfaFactor)
  async updateMfaFactor(
    @graphql.Args() args: UpdateMfaFactorArgs
  ): Promise<MfaFactor | null> {
    try {
      return await this.service.updateMfaFactor({
        ...args,
        data: {
          ...args.data,

          users: {
            connect: args.data.users,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MfaFactor)
  async deleteMfaFactor(
    @graphql.Args() args: DeleteMfaFactorArgs
  ): Promise<MfaFactor | null> {
    try {
      return await this.service.deleteMfaFactor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [MfaChallenge], { name: "mfaChallenges" })
  async findMfaChallenges(
    @graphql.Parent() parent: MfaFactor,
    @graphql.Args() args: MfaChallengeFindManyArgs
  ): Promise<MfaChallenge[]> {
    const results = await this.service.findMfaChallenges(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  async getUsers(@graphql.Parent() parent: MfaFactor): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
