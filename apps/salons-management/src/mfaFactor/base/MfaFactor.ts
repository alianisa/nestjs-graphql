/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsEnum,
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumMfaFactorFactorType } from "./EnumMfaFactorFactorType";
import { MfaChallenge } from "../../mfaChallenge/base/MfaChallenge";
import { EnumMfaFactorStatus } from "./EnumMfaFactorStatus";
import { User } from "../../user/base/User";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";

@ObjectType()
class MfaFactor {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    enum: EnumMfaFactorFactorType,
  })
  @IsEnum(EnumMfaFactorFactorType)
  @Field(() => EnumMfaFactorFactorType, {
    nullable: true,
  })
  factor_type?: "totp" | "webauthn" | "phone";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  friendlyName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastChallengedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [MfaChallenge],
  })
  @ValidateNested()
  @Type(() => MfaChallenge)
  @IsOptional()
  mfaChallenges?: Array<MfaChallenge>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  secret!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumMfaFactorStatus,
  })
  @IsEnum(EnumMfaFactorStatus)
  @Field(() => EnumMfaFactorStatus, {
    nullable: true,
  })
  status?: "unverified" | "verified";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  users?: User;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  webAuthnAaguid!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  webAuthnCredential!: JsonValue;
}

export { MfaFactor as MfaFactor };
