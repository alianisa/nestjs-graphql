/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MfaFactorService } from "../mfaFactor.service";
import { MfaFactorCreateInput } from "./MfaFactorCreateInput";
import { MfaFactor } from "./MfaFactor";
import { MfaFactorFindManyArgs } from "./MfaFactorFindManyArgs";
import { MfaFactorWhereUniqueInput } from "./MfaFactorWhereUniqueInput";
import { MfaFactorUpdateInput } from "./MfaFactorUpdateInput";
import { MfaChallengeFindManyArgs } from "../../mfaChallenge/base/MfaChallengeFindManyArgs";
import { MfaChallenge } from "../../mfaChallenge/base/MfaChallenge";
import { MfaChallengeWhereUniqueInput } from "../../mfaChallenge/base/MfaChallengeWhereUniqueInput";

export class MfaFactorControllerBase {
  constructor(protected readonly service: MfaFactorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MfaFactor })
  async createMfaFactor(
    @common.Body() data: MfaFactorCreateInput
  ): Promise<MfaFactor> {
    return await this.service.createMfaFactor({
      data: {
        ...data,

        users: {
          connect: data.users,
        },
      },
      select: {
        createdAt: true,
        factor_type: true,
        friendlyName: true,
        id: true,
        lastChallengedAt: true,
        phone: true,
        secret: true,
        status: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        webAuthnAaguid: true,
        webAuthnCredential: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MfaFactor] })
  @ApiNestedQuery(MfaFactorFindManyArgs)
  async mfaFactors(@common.Req() request: Request): Promise<MfaFactor[]> {
    const args = plainToClass(MfaFactorFindManyArgs, request.query);
    return this.service.mfaFactors({
      ...args,
      select: {
        createdAt: true,
        factor_type: true,
        friendlyName: true,
        id: true,
        lastChallengedAt: true,
        phone: true,
        secret: true,
        status: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        webAuthnAaguid: true,
        webAuthnCredential: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MfaFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mfaFactor(
    @common.Param() params: MfaFactorWhereUniqueInput
  ): Promise<MfaFactor | null> {
    const result = await this.service.mfaFactor({
      where: params,
      select: {
        createdAt: true,
        factor_type: true,
        friendlyName: true,
        id: true,
        lastChallengedAt: true,
        phone: true,
        secret: true,
        status: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        webAuthnAaguid: true,
        webAuthnCredential: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MfaFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMfaFactor(
    @common.Param() params: MfaFactorWhereUniqueInput,
    @common.Body() data: MfaFactorUpdateInput
  ): Promise<MfaFactor | null> {
    try {
      return await this.service.updateMfaFactor({
        where: params,
        data: {
          ...data,

          users: {
            connect: data.users,
          },
        },
        select: {
          createdAt: true,
          factor_type: true,
          friendlyName: true,
          id: true,
          lastChallengedAt: true,
          phone: true,
          secret: true,
          status: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },

          webAuthnAaguid: true,
          webAuthnCredential: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MfaFactor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMfaFactor(
    @common.Param() params: MfaFactorWhereUniqueInput
  ): Promise<MfaFactor | null> {
    try {
      return await this.service.deleteMfaFactor({
        where: params,
        select: {
          createdAt: true,
          factor_type: true,
          friendlyName: true,
          id: true,
          lastChallengedAt: true,
          phone: true,
          secret: true,
          status: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },

          webAuthnAaguid: true,
          webAuthnCredential: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/mfaChallenges")
  @ApiNestedQuery(MfaChallengeFindManyArgs)
  async findMfaChallenges(
    @common.Req() request: Request,
    @common.Param() params: MfaFactorWhereUniqueInput
  ): Promise<MfaChallenge[]> {
    const query = plainToClass(MfaChallengeFindManyArgs, request.query);
    const results = await this.service.findMfaChallenges(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,

        mfaFactors: {
          select: {
            id: true,
          },
        },

        otpCode: true,
        verifiedAt: true,
        webAuthnSessionData: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mfaChallenges")
  async connectMfaChallenges(
    @common.Param() params: MfaFactorWhereUniqueInput,
    @common.Body() body: MfaChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfaChallenges: {
        connect: body,
      },
    };
    await this.service.updateMfaFactor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mfaChallenges")
  async updateMfaChallenges(
    @common.Param() params: MfaFactorWhereUniqueInput,
    @common.Body() body: MfaChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfaChallenges: {
        set: body,
      },
    };
    await this.service.updateMfaFactor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mfaChallenges")
  async disconnectMfaChallenges(
    @common.Param() params: MfaFactorWhereUniqueInput,
    @common.Body() body: MfaChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfaChallenges: {
        disconnect: body,
      },
    };
    await this.service.updateMfaFactor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
