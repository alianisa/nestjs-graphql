/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MfaFactor as PrismaMfaFactor,
  MfaChallenge as PrismaMfaChallenge,
  User as PrismaUser,
} from "@prisma/client";

export class MfaFactorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MfaFactorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mfaFactor.count(args);
  }

  async mfaFactors(
    args: Prisma.MfaFactorFindManyArgs
  ): Promise<PrismaMfaFactor[]> {
    return this.prisma.mfaFactor.findMany(args);
  }
  async mfaFactor(
    args: Prisma.MfaFactorFindUniqueArgs
  ): Promise<PrismaMfaFactor | null> {
    return this.prisma.mfaFactor.findUnique(args);
  }
  async createMfaFactor(
    args: Prisma.MfaFactorCreateArgs
  ): Promise<PrismaMfaFactor> {
    return this.prisma.mfaFactor.create(args);
  }
  async updateMfaFactor(
    args: Prisma.MfaFactorUpdateArgs
  ): Promise<PrismaMfaFactor> {
    return this.prisma.mfaFactor.update(args);
  }
  async deleteMfaFactor(
    args: Prisma.MfaFactorDeleteArgs
  ): Promise<PrismaMfaFactor> {
    return this.prisma.mfaFactor.delete(args);
  }

  async findMfaChallenges(
    parentId: string,
    args: Prisma.MfaChallengeFindManyArgs
  ): Promise<PrismaMfaChallenge[]> {
    return this.prisma.mfaFactor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mfaChallenges(args);
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.mfaFactor
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
