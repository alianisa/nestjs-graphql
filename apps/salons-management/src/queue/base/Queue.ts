/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsBoolean,
  IsOptional,
  IsDate,
  ValidateNested,
  IsInt,
  Max,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { Order } from "../../order/base/Order";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";

@ObjectType()
class Queue {
  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completed!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTask)
  @IsOptional()
  employeeTasks?: Array<EmployeeTask>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  estimatedWaitTime!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Order],
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  ordersOrdersQueueIdToqueues?: Array<Order>;

  @ApiProperty({
    required: false,
    type: () => Order,
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  ordersQueuesOrderIdToorders?: Order | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  queueNumber!: number | null;

  @ApiProperty({
    required: false,
    type: () => Salon,
  })
  @ValidateNested()
  @Type(() => Salon)
  @IsOptional()
  salons?: Salon | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserProfile,
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfilesQueuesEmployeeIdTouserProfiles?: UserProfile | null;

  @ApiProperty({
    required: false,
    type: () => UserProfile,
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfilesQueuesUserIdTouserProfiles?: UserProfile | null;
}

export { Queue as Queue };
