/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Queue } from "./Queue";
import { QueueCountArgs } from "./QueueCountArgs";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueFindUniqueArgs } from "./QueueFindUniqueArgs";
import { CreateQueueArgs } from "./CreateQueueArgs";
import { UpdateQueueArgs } from "./UpdateQueueArgs";
import { DeleteQueueArgs } from "./DeleteQueueArgs";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { QueueService } from "../queue.service";
@graphql.Resolver(() => Queue)
export class QueueResolverBase {
  constructor(protected readonly service: QueueService) {}

  async _queuesMeta(
    @graphql.Args() args: QueueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Queue])
  async queues(@graphql.Args() args: QueueFindManyArgs): Promise<Queue[]> {
    return this.service.queues(args);
  }

  @graphql.Query(() => Queue, { nullable: true })
  async queue(
    @graphql.Args() args: QueueFindUniqueArgs
  ): Promise<Queue | null> {
    const result = await this.service.queue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Queue)
  async createQueue(@graphql.Args() args: CreateQueueArgs): Promise<Queue> {
    return await this.service.createQueue({
      ...args,
      data: {
        ...args.data,

        ordersQueuesOrderIdToorders: args.data.ordersQueuesOrderIdToorders
          ? {
              connect: args.data.ordersQueuesOrderIdToorders,
            }
          : undefined,

        salons: args.data.salons
          ? {
              connect: args.data.salons,
            }
          : undefined,

        userProfilesQueuesEmployeeIdTouserProfiles: args.data
          .userProfilesQueuesEmployeeIdTouserProfiles
          ? {
              connect: args.data.userProfilesQueuesEmployeeIdTouserProfiles,
            }
          : undefined,

        userProfilesQueuesUserIdTouserProfiles: args.data
          .userProfilesQueuesUserIdTouserProfiles
          ? {
              connect: args.data.userProfilesQueuesUserIdTouserProfiles,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Queue)
  async updateQueue(
    @graphql.Args() args: UpdateQueueArgs
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        ...args,
        data: {
          ...args.data,

          ordersQueuesOrderIdToorders: args.data.ordersQueuesOrderIdToorders
            ? {
                connect: args.data.ordersQueuesOrderIdToorders,
              }
            : undefined,

          salons: args.data.salons
            ? {
                connect: args.data.salons,
              }
            : undefined,

          userProfilesQueuesEmployeeIdTouserProfiles: args.data
            .userProfilesQueuesEmployeeIdTouserProfiles
            ? {
                connect: args.data.userProfilesQueuesEmployeeIdTouserProfiles,
              }
            : undefined,

          userProfilesQueuesUserIdTouserProfiles: args.data
            .userProfilesQueuesUserIdTouserProfiles
            ? {
                connect: args.data.userProfilesQueuesUserIdTouserProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Queue)
  async deleteQueue(
    @graphql.Args() args: DeleteQueueArgs
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EmployeeTask], { name: "employeeTasks" })
  async findEmployeeTasks(
    @graphql.Parent() parent: Queue,
    @graphql.Args() args: EmployeeTaskFindManyArgs
  ): Promise<EmployeeTask[]> {
    const results = await this.service.findEmployeeTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Order], { name: "ordersOrdersQueueIdToqueues" })
  async findOrdersOrdersQueueIdToqueues(
    @graphql.Parent() parent: Queue,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrdersOrdersQueueIdToqueues(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "ordersQueuesOrderIdToorders",
  })
  async getOrdersQueuesOrderIdToorders(
    @graphql.Parent() parent: Queue
  ): Promise<Order | null> {
    const result = await this.service.getOrdersQueuesOrderIdToorders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  async getSalons(@graphql.Parent() parent: Queue): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesQueuesEmployeeIdTouserProfiles",
  })
  async getUserProfilesQueuesEmployeeIdTouserProfiles(
    @graphql.Parent() parent: Queue
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesQueuesEmployeeIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesQueuesUserIdTouserProfiles",
  })
  async getUserProfilesQueuesUserIdTouserProfiles(
    @graphql.Parent() parent: Queue
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfilesQueuesUserIdTouserProfiles(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }
}
