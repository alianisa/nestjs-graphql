/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueService } from "../queue.service";
import { QueueCreateInput } from "./QueueCreateInput";
import { Queue } from "./Queue";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueWhereUniqueInput } from "./QueueWhereUniqueInput";
import { QueueUpdateInput } from "./QueueUpdateInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";

export class QueueControllerBase {
  constructor(protected readonly service: QueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Queue })
  async createQueue(@common.Body() data: QueueCreateInput): Promise<Queue> {
    return await this.service.createQueue({
      data: {
        ...data,

        ordersQueuesOrderIdToorders: data.ordersQueuesOrderIdToorders
          ? {
              connect: data.ordersQueuesOrderIdToorders,
            }
          : undefined,

        salons: data.salons
          ? {
              connect: data.salons,
            }
          : undefined,

        userProfilesQueuesEmployeeIdTouserProfiles:
          data.userProfilesQueuesEmployeeIdTouserProfiles
            ? {
                connect: data.userProfilesQueuesEmployeeIdTouserProfiles,
              }
            : undefined,

        userProfilesQueuesUserIdTouserProfiles:
          data.userProfilesQueuesUserIdTouserProfiles
            ? {
                connect: data.userProfilesQueuesUserIdTouserProfiles,
              }
            : undefined,
      },
      select: {
        completed: true,
        completedAt: true,
        createdAt: true,
        estimatedWaitTime: true,
        id: true,

        ordersQueuesOrderIdToorders: {
          select: {
            id: true,
          },
        },

        queueNumber: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfilesQueuesEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesQueuesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Queue] })
  @ApiNestedQuery(QueueFindManyArgs)
  async queues(@common.Req() request: Request): Promise<Queue[]> {
    const args = plainToClass(QueueFindManyArgs, request.query);
    return this.service.queues({
      ...args,
      select: {
        completed: true,
        completedAt: true,
        createdAt: true,
        estimatedWaitTime: true,
        id: true,

        ordersQueuesOrderIdToorders: {
          select: {
            id: true,
          },
        },

        queueNumber: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfilesQueuesEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesQueuesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    const result = await this.service.queue({
      where: params,
      select: {
        completed: true,
        completedAt: true,
        createdAt: true,
        estimatedWaitTime: true,
        id: true,

        ordersQueuesOrderIdToorders: {
          select: {
            id: true,
          },
        },

        queueNumber: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfilesQueuesEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesQueuesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueue(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() data: QueueUpdateInput
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        where: params,
        data: {
          ...data,

          ordersQueuesOrderIdToorders: data.ordersQueuesOrderIdToorders
            ? {
                connect: data.ordersQueuesOrderIdToorders,
              }
            : undefined,

          salons: data.salons
            ? {
                connect: data.salons,
              }
            : undefined,

          userProfilesQueuesEmployeeIdTouserProfiles:
            data.userProfilesQueuesEmployeeIdTouserProfiles
              ? {
                  connect: data.userProfilesQueuesEmployeeIdTouserProfiles,
                }
              : undefined,

          userProfilesQueuesUserIdTouserProfiles:
            data.userProfilesQueuesUserIdTouserProfiles
              ? {
                  connect: data.userProfilesQueuesUserIdTouserProfiles,
                }
              : undefined,
        },
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue({
        where: params,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  async findEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersQueueIdToqueues")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrdersOrdersQueueIdToqueues(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrdersOrdersQueueIdToqueues(
      params.id,
      {
        ...query,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersQueueIdToqueues")
  async connectOrdersOrdersQueueIdToqueues(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersQueueIdToqueues: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersQueueIdToqueues")
  async updateOrdersOrdersQueueIdToqueues(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersQueueIdToqueues: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersQueueIdToqueues")
  async disconnectOrdersOrdersQueueIdToqueues(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersQueueIdToqueues: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
