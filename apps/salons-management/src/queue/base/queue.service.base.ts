/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Queue as PrismaQueue,
  EmployeeTask as PrismaEmployeeTask,
  Order as PrismaOrder,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class QueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueueCountArgs, "select">): Promise<number> {
    return this.prisma.queue.count(args);
  }

  async queues(args: Prisma.QueueFindManyArgs): Promise<PrismaQueue[]> {
    return this.prisma.queue.findMany(args);
  }
  async queue(args: Prisma.QueueFindUniqueArgs): Promise<PrismaQueue | null> {
    return this.prisma.queue.findUnique(args);
  }
  async createQueue(args: Prisma.QueueCreateArgs): Promise<PrismaQueue> {
    return this.prisma.queue.create(args);
  }
  async updateQueue(args: Prisma.QueueUpdateArgs): Promise<PrismaQueue> {
    return this.prisma.queue.update(args);
  }
  async deleteQueue(args: Prisma.QueueDeleteArgs): Promise<PrismaQueue> {
    return this.prisma.queue.delete(args);
  }

  async findEmployeeTasks(
    parentId: string,
    args: Prisma.EmployeeTaskFindManyArgs
  ): Promise<PrismaEmployeeTask[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasks(args);
  }

  async findOrdersOrdersQueueIdToqueues(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersOrdersQueueIdToqueues(args);
  }

  async getOrdersQueuesOrderIdToorders(
    parentId: string
  ): Promise<PrismaOrder | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .ordersQueuesOrderIdToorders();
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfilesQueuesEmployeeIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesQueuesEmployeeIdTouserProfiles();
  }

  async getUserProfilesQueuesUserIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesQueuesUserIdTouserProfiles();
  }
}
