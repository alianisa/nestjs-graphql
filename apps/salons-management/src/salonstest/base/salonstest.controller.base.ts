/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalonstestService } from "../salonstest.service";
import { SalonstestCreateInput } from "./SalonstestCreateInput";
import { Salonstest } from "./Salonstest";
import { SalonstestFindManyArgs } from "./SalonstestFindManyArgs";
import { SalonstestWhereUniqueInput } from "./SalonstestWhereUniqueInput";
import { SalonstestUpdateInput } from "./SalonstestUpdateInput";

export class SalonstestControllerBase {
  constructor(protected readonly service: SalonstestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Salonstest })
  async createSalonstest(
    @common.Body() data: SalonstestCreateInput
  ): Promise<Salonstest> {
    return await this.service.createSalonstest({
      data: data,
      select: {
        address: true,
        categories: true,
        coordinates: true,
        createdAt: true,
        description: true,
        district: true,
        email: true,
        features: true,
        googlePlaceId: true,
        id: true,
        importedFrom: true,
        metro: true,
        name: true,
        phones: true,
        photos: true,
        photosCount: true,
        priceCategory: true,
        rating: true,
        socialLinks: true,
        status: true,
        updatedAt: true,
        website: true,
        workingHours: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Salonstest] })
  @ApiNestedQuery(SalonstestFindManyArgs)
  async salonstests(@common.Req() request: Request): Promise<Salonstest[]> {
    const args = plainToClass(SalonstestFindManyArgs, request.query);
    return this.service.salonstests({
      ...args,
      select: {
        address: true,
        categories: true,
        coordinates: true,
        createdAt: true,
        description: true,
        district: true,
        email: true,
        features: true,
        googlePlaceId: true,
        id: true,
        importedFrom: true,
        metro: true,
        name: true,
        phones: true,
        photos: true,
        photosCount: true,
        priceCategory: true,
        rating: true,
        socialLinks: true,
        status: true,
        updatedAt: true,
        website: true,
        workingHours: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Salonstest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salonstest(
    @common.Param() params: SalonstestWhereUniqueInput
  ): Promise<Salonstest | null> {
    const result = await this.service.salonstest({
      where: params,
      select: {
        address: true,
        categories: true,
        coordinates: true,
        createdAt: true,
        description: true,
        district: true,
        email: true,
        features: true,
        googlePlaceId: true,
        id: true,
        importedFrom: true,
        metro: true,
        name: true,
        phones: true,
        photos: true,
        photosCount: true,
        priceCategory: true,
        rating: true,
        socialLinks: true,
        status: true,
        updatedAt: true,
        website: true,
        workingHours: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Salonstest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalonstest(
    @common.Param() params: SalonstestWhereUniqueInput,
    @common.Body() data: SalonstestUpdateInput
  ): Promise<Salonstest | null> {
    try {
      return await this.service.updateSalonstest({
        where: params,
        data: data,
        select: {
          address: true,
          categories: true,
          coordinates: true,
          createdAt: true,
          description: true,
          district: true,
          email: true,
          features: true,
          googlePlaceId: true,
          id: true,
          importedFrom: true,
          metro: true,
          name: true,
          phones: true,
          photos: true,
          photosCount: true,
          priceCategory: true,
          rating: true,
          socialLinks: true,
          status: true,
          updatedAt: true,
          website: true,
          workingHours: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Salonstest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalonstest(
    @common.Param() params: SalonstestWhereUniqueInput
  ): Promise<Salonstest | null> {
    try {
      return await this.service.deleteSalonstest({
        where: params,
        select: {
          address: true,
          categories: true,
          coordinates: true,
          createdAt: true,
          description: true,
          district: true,
          email: true,
          features: true,
          googlePlaceId: true,
          id: true,
          importedFrom: true,
          metro: true,
          name: true,
          phones: true,
          photos: true,
          photosCount: true,
          priceCategory: true,
          rating: true,
          socialLinks: true,
          status: true,
          updatedAt: true,
          website: true,
          workingHours: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
