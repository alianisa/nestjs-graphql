/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Salonstest } from "./Salonstest";
import { SalonstestCountArgs } from "./SalonstestCountArgs";
import { SalonstestFindManyArgs } from "./SalonstestFindManyArgs";
import { SalonstestFindUniqueArgs } from "./SalonstestFindUniqueArgs";
import { CreateSalonstestArgs } from "./CreateSalonstestArgs";
import { UpdateSalonstestArgs } from "./UpdateSalonstestArgs";
import { DeleteSalonstestArgs } from "./DeleteSalonstestArgs";
import { SalonstestService } from "../salonstest.service";
@graphql.Resolver(() => Salonstest)
export class SalonstestResolverBase {
  constructor(protected readonly service: SalonstestService) {}

  async _salonstestsMeta(
    @graphql.Args() args: SalonstestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Salonstest])
  async salonstests(
    @graphql.Args() args: SalonstestFindManyArgs
  ): Promise<Salonstest[]> {
    return this.service.salonstests(args);
  }

  @graphql.Query(() => Salonstest, { nullable: true })
  async salonstest(
    @graphql.Args() args: SalonstestFindUniqueArgs
  ): Promise<Salonstest | null> {
    const result = await this.service.salonstest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Salonstest)
  async createSalonstest(
    @graphql.Args() args: CreateSalonstestArgs
  ): Promise<Salonstest> {
    return await this.service.createSalonstest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Salonstest)
  async updateSalonstest(
    @graphql.Args() args: UpdateSalonstestArgs
  ): Promise<Salonstest | null> {
    try {
      return await this.service.updateSalonstest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Salonstest)
  async deleteSalonstest(
    @graphql.Args() args: DeleteSalonstestArgs
  ): Promise<Salonstest | null> {
    try {
      return await this.service.deleteSalonstest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
