/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserBankCard } from "./UserBankCard";
import { UserBankCardCountArgs } from "./UserBankCardCountArgs";
import { UserBankCardFindManyArgs } from "./UserBankCardFindManyArgs";
import { UserBankCardFindUniqueArgs } from "./UserBankCardFindUniqueArgs";
import { CreateUserBankCardArgs } from "./CreateUserBankCardArgs";
import { UpdateUserBankCardArgs } from "./UpdateUserBankCardArgs";
import { DeleteUserBankCardArgs } from "./DeleteUserBankCardArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserBankCardService } from "../userBankCard.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserBankCard)
export class UserBankCardResolverBase {
  constructor(
    protected readonly service: UserBankCardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "read",
    possession: "any",
  })
  async _userBankCardsMeta(
    @graphql.Args() args: UserBankCardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserBankCard])
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "read",
    possession: "any",
  })
  async userBankCards(
    @graphql.Args() args: UserBankCardFindManyArgs
  ): Promise<UserBankCard[]> {
    return this.service.userBankCards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserBankCard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "read",
    possession: "own",
  })
  async userBankCard(
    @graphql.Args() args: UserBankCardFindUniqueArgs
  ): Promise<UserBankCard | null> {
    const result = await this.service.userBankCard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserBankCard)
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "create",
    possession: "any",
  })
  async createUserBankCard(
    @graphql.Args() args: CreateUserBankCardArgs
  ): Promise<UserBankCard> {
    return await this.service.createUserBankCard({
      ...args,
      data: {
        ...args.data,

        userProfiles: args.data.userProfiles
          ? {
              connect: args.data.userProfiles,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserBankCard)
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "update",
    possession: "any",
  })
  async updateUserBankCard(
    @graphql.Args() args: UpdateUserBankCardArgs
  ): Promise<UserBankCard | null> {
    try {
      return await this.service.updateUserBankCard({
        ...args,
        data: {
          ...args.data,

          userProfiles: args.data.userProfiles
            ? {
                connect: args.data.userProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserBankCard)
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "delete",
    possession: "any",
  })
  async deleteUserBankCard(
    @graphql.Args() args: DeleteUserBankCardArgs
  ): Promise<UserBankCard | null> {
    try {
      return await this.service.deleteUserBankCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: UserBankCard
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
