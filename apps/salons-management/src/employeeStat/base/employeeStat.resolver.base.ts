/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeStat } from "./EmployeeStat";
import { EmployeeStatCountArgs } from "./EmployeeStatCountArgs";
import { EmployeeStatFindManyArgs } from "./EmployeeStatFindManyArgs";
import { EmployeeStatFindUniqueArgs } from "./EmployeeStatFindUniqueArgs";
import { CreateEmployeeStatArgs } from "./CreateEmployeeStatArgs";
import { UpdateEmployeeStatArgs } from "./UpdateEmployeeStatArgs";
import { DeleteEmployeeStatArgs } from "./DeleteEmployeeStatArgs";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { EmployeeStatService } from "../employeeStat.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeStat)
export class EmployeeStatResolverBase {
  constructor(
    protected readonly service: EmployeeStatService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "read",
    possession: "any",
  })
  async _employeeStatsMeta(
    @graphql.Args() args: EmployeeStatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeStat])
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "read",
    possession: "any",
  })
  async employeeStats(
    @graphql.Args() args: EmployeeStatFindManyArgs
  ): Promise<EmployeeStat[]> {
    return this.service.employeeStats(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeStat, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "read",
    possession: "own",
  })
  async employeeStat(
    @graphql.Args() args: EmployeeStatFindUniqueArgs
  ): Promise<EmployeeStat | null> {
    const result = await this.service.employeeStat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeStat)
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "create",
    possession: "any",
  })
  async createEmployeeStat(
    @graphql.Args() args: CreateEmployeeStatArgs
  ): Promise<EmployeeStat> {
    return await this.service.createEmployeeStat({
      ...args,
      data: {
        ...args.data,

        salons: {
          connect: args.data.salons,
        },

        userProfiles: {
          connect: args.data.userProfiles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeStat)
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "update",
    possession: "any",
  })
  async updateEmployeeStat(
    @graphql.Args() args: UpdateEmployeeStatArgs
  ): Promise<EmployeeStat | null> {
    try {
      return await this.service.updateEmployeeStat({
        ...args,
        data: {
          ...args.data,

          salons: {
            connect: args.data.salons,
          },

          userProfiles: {
            connect: args.data.userProfiles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeStat)
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeStat(
    @graphql.Args() args: DeleteEmployeeStatArgs
  ): Promise<EmployeeStat | null> {
    try {
      return await this.service.deleteEmployeeStat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async getSalons(
    @graphql.Parent() parent: EmployeeStat
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: EmployeeStat
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
