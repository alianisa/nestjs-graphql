/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeWorkSchedule } from "./EmployeeWorkSchedule";
import { EmployeeWorkScheduleCountArgs } from "./EmployeeWorkScheduleCountArgs";
import { EmployeeWorkScheduleFindManyArgs } from "./EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkScheduleFindUniqueArgs } from "./EmployeeWorkScheduleFindUniqueArgs";
import { CreateEmployeeWorkScheduleArgs } from "./CreateEmployeeWorkScheduleArgs";
import { UpdateEmployeeWorkScheduleArgs } from "./UpdateEmployeeWorkScheduleArgs";
import { DeleteEmployeeWorkScheduleArgs } from "./DeleteEmployeeWorkScheduleArgs";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { EmployeeWorkScheduleService } from "../employeeWorkSchedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeWorkSchedule)
export class EmployeeWorkScheduleResolverBase {
  constructor(
    protected readonly service: EmployeeWorkScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "any",
  })
  async _employeeWorkSchedulesMeta(
    @graphql.Args() args: EmployeeWorkScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeWorkSchedule])
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "any",
  })
  async employeeWorkSchedules(
    @graphql.Args() args: EmployeeWorkScheduleFindManyArgs
  ): Promise<EmployeeWorkSchedule[]> {
    return this.service.employeeWorkSchedules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeWorkSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "own",
  })
  async employeeWorkSchedule(
    @graphql.Args() args: EmployeeWorkScheduleFindUniqueArgs
  ): Promise<EmployeeWorkSchedule | null> {
    const result = await this.service.employeeWorkSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeWorkSchedule)
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "create",
    possession: "any",
  })
  async createEmployeeWorkSchedule(
    @graphql.Args() args: CreateEmployeeWorkScheduleArgs
  ): Promise<EmployeeWorkSchedule> {
    return await this.service.createEmployeeWorkSchedule({
      ...args,
      data: {
        ...args.data,

        salons: {
          connect: args.data.salons,
        },

        userProfiles: {
          connect: args.data.userProfiles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeWorkSchedule)
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "update",
    possession: "any",
  })
  async updateEmployeeWorkSchedule(
    @graphql.Args() args: UpdateEmployeeWorkScheduleArgs
  ): Promise<EmployeeWorkSchedule | null> {
    try {
      return await this.service.updateEmployeeWorkSchedule({
        ...args,
        data: {
          ...args.data,

          salons: {
            connect: args.data.salons,
          },

          userProfiles: {
            connect: args.data.userProfiles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeWorkSchedule)
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeWorkSchedule(
    @graphql.Args() args: DeleteEmployeeWorkScheduleArgs
  ): Promise<EmployeeWorkSchedule | null> {
    try {
      return await this.service.deleteEmployeeWorkSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async getSalons(
    @graphql.Parent() parent: EmployeeWorkSchedule
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: EmployeeWorkSchedule
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
