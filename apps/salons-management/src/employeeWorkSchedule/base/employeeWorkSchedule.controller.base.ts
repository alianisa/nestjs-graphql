/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployeeWorkScheduleService } from "../employeeWorkSchedule.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployeeWorkScheduleCreateInput } from "./EmployeeWorkScheduleCreateInput";
import { EmployeeWorkSchedule } from "./EmployeeWorkSchedule";
import { EmployeeWorkScheduleFindManyArgs } from "./EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkScheduleWhereUniqueInput } from "./EmployeeWorkScheduleWhereUniqueInput";
import { EmployeeWorkScheduleUpdateInput } from "./EmployeeWorkScheduleUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployeeWorkScheduleControllerBase {
  constructor(
    protected readonly service: EmployeeWorkScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeWorkSchedule })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmployeeWorkSchedule(
    @common.Body() data: EmployeeWorkScheduleCreateInput
  ): Promise<EmployeeWorkSchedule> {
    return await this.service.createEmployeeWorkSchedule({
      data: {
        ...data,

        salons: {
          connect: data.salons,
        },

        userProfiles: {
          connect: data.userProfiles,
        },
      },
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeWorkSchedule] })
  @ApiNestedQuery(EmployeeWorkScheduleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeWorkSchedules(
    @common.Req() request: Request
  ): Promise<EmployeeWorkSchedule[]> {
    const args = plainToClass(EmployeeWorkScheduleFindManyArgs, request.query);
    return this.service.employeeWorkSchedules({
      ...args,
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeWorkSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeWorkSchedule(
    @common.Param() params: EmployeeWorkScheduleWhereUniqueInput
  ): Promise<EmployeeWorkSchedule | null> {
    const result = await this.service.employeeWorkSchedule({
      where: params,
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeWorkSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmployeeWorkSchedule(
    @common.Param() params: EmployeeWorkScheduleWhereUniqueInput,
    @common.Body() data: EmployeeWorkScheduleUpdateInput
  ): Promise<EmployeeWorkSchedule | null> {
    try {
      return await this.service.updateEmployeeWorkSchedule({
        where: params,
        data: {
          ...data,

          salons: {
            connect: data.salons,
          },

          userProfiles: {
            connect: data.userProfiles,
          },
        },
        select: {
          breakEnd: true,
          breakStart: true,
          day_of_week: true,
          id: true,

          salons: {
            select: {
              id: true,
            },
          },

          shiftEnd: true,
          shiftStart: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeWorkSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployeeWorkSchedule(
    @common.Param() params: EmployeeWorkScheduleWhereUniqueInput
  ): Promise<EmployeeWorkSchedule | null> {
    try {
      return await this.service.deleteEmployeeWorkSchedule({
        where: params,
        select: {
          breakEnd: true,
          breakStart: true,
          day_of_week: true,
          id: true,

          salons: {
            select: {
              id: true,
            },
          },

          shiftEnd: true,
          shiftStart: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
