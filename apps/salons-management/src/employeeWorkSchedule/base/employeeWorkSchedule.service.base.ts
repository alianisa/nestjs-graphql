/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeWorkSchedule as PrismaEmployeeWorkSchedule,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class EmployeeWorkScheduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeWorkScheduleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeWorkSchedule.count(args);
  }

  async employeeWorkSchedules(
    args: Prisma.EmployeeWorkScheduleFindManyArgs
  ): Promise<PrismaEmployeeWorkSchedule[]> {
    return this.prisma.employeeWorkSchedule.findMany(args);
  }
  async employeeWorkSchedule(
    args: Prisma.EmployeeWorkScheduleFindUniqueArgs
  ): Promise<PrismaEmployeeWorkSchedule | null> {
    return this.prisma.employeeWorkSchedule.findUnique(args);
  }
  async createEmployeeWorkSchedule(
    args: Prisma.EmployeeWorkScheduleCreateArgs
  ): Promise<PrismaEmployeeWorkSchedule> {
    return this.prisma.employeeWorkSchedule.create(args);
  }
  async updateEmployeeWorkSchedule(
    args: Prisma.EmployeeWorkScheduleUpdateArgs
  ): Promise<PrismaEmployeeWorkSchedule> {
    return this.prisma.employeeWorkSchedule.update(args);
  }
  async deleteEmployeeWorkSchedule(
    args: Prisma.EmployeeWorkScheduleDeleteArgs
  ): Promise<PrismaEmployeeWorkSchedule> {
    return this.prisma.employeeWorkSchedule.delete(args);
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.employeeWorkSchedule
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfiles(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.employeeWorkSchedule
      .findUnique({
        where: { id: parentId },
      })
      .userProfiles();
  }
}
