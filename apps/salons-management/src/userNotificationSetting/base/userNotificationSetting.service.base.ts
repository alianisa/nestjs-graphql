/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserNotificationSetting as PrismaUserNotificationSetting,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class UserNotificationSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserNotificationSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userNotificationSetting.count(args);
  }

  async userNotificationSettings(
    args: Prisma.UserNotificationSettingFindManyArgs
  ): Promise<PrismaUserNotificationSetting[]> {
    return this.prisma.userNotificationSetting.findMany(args);
  }
  async userNotificationSetting(
    args: Prisma.UserNotificationSettingFindUniqueArgs
  ): Promise<PrismaUserNotificationSetting | null> {
    return this.prisma.userNotificationSetting.findUnique(args);
  }
  async createUserNotificationSetting(
    args: Prisma.UserNotificationSettingCreateArgs
  ): Promise<PrismaUserNotificationSetting> {
    return this.prisma.userNotificationSetting.create(args);
  }
  async updateUserNotificationSetting(
    args: Prisma.UserNotificationSettingUpdateArgs
  ): Promise<PrismaUserNotificationSetting> {
    return this.prisma.userNotificationSetting.update(args);
  }
  async deleteUserNotificationSetting(
    args: Prisma.UserNotificationSettingDeleteArgs
  ): Promise<PrismaUserNotificationSetting> {
    return this.prisma.userNotificationSetting.delete(args);
  }

  async getUserProfiles(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.userNotificationSetting
      .findUnique({
        where: { id: parentId },
      })
      .userProfiles();
  }
}
