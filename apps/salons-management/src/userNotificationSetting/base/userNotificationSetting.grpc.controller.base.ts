/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserNotificationSettingService } from "../userNotificationSetting.service";
import { UserNotificationSettingCreateInput } from "./UserNotificationSettingCreateInput";
import { UserNotificationSettingWhereInput } from "./UserNotificationSettingWhereInput";
import { UserNotificationSettingWhereUniqueInput } from "./UserNotificationSettingWhereUniqueInput";
import { UserNotificationSettingFindManyArgs } from "./UserNotificationSettingFindManyArgs";
import { UserNotificationSettingUpdateInput } from "./UserNotificationSettingUpdateInput";
import { UserNotificationSetting } from "./UserNotificationSetting";

export class UserNotificationSettingGrpcControllerBase {
  constructor(protected readonly service: UserNotificationSettingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserNotificationSetting })
  @GrpcMethod("UserNotificationSettingService", "createUserNotificationSetting")
  async createUserNotificationSetting(
    @common.Body() data: UserNotificationSettingCreateInput
  ): Promise<UserNotificationSetting> {
    return await this.service.createUserNotificationSetting({
      data: {
        ...data,

        userProfiles: {
          connect: data.userProfiles,
        },
      },
      select: {
        appointmentReminders: true,
        createdAt: true,
        emailEnabled: true,
        id: true,
        promotionalNotifications: true,
        pushEnabled: true,
        smsEnabled: true,
        statusUpdates: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserNotificationSetting] })
  @ApiNestedQuery(UserNotificationSettingFindManyArgs)
  @GrpcMethod("UserNotificationSettingService", "userNotificationSettings")
  async userNotificationSettings(
    @common.Req() request: Request
  ): Promise<UserNotificationSetting[]> {
    const args = plainToClass(
      UserNotificationSettingFindManyArgs,
      request.query
    );
    return this.service.userNotificationSettings({
      ...args,
      select: {
        appointmentReminders: true,
        createdAt: true,
        emailEnabled: true,
        id: true,
        promotionalNotifications: true,
        pushEnabled: true,
        smsEnabled: true,
        statusUpdates: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserNotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserNotificationSettingService", "userNotificationSetting")
  async userNotificationSetting(
    @common.Param() params: UserNotificationSettingWhereUniqueInput
  ): Promise<UserNotificationSetting | null> {
    const result = await this.service.userNotificationSetting({
      where: params,
      select: {
        appointmentReminders: true,
        createdAt: true,
        emailEnabled: true,
        id: true,
        promotionalNotifications: true,
        pushEnabled: true,
        smsEnabled: true,
        statusUpdates: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserNotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserNotificationSettingService", "updateUserNotificationSetting")
  async updateUserNotificationSetting(
    @common.Param() params: UserNotificationSettingWhereUniqueInput,
    @common.Body() data: UserNotificationSettingUpdateInput
  ): Promise<UserNotificationSetting | null> {
    try {
      return await this.service.updateUserNotificationSetting({
        where: params,
        data: {
          ...data,

          userProfiles: {
            connect: data.userProfiles,
          },
        },
        select: {
          appointmentReminders: true,
          createdAt: true,
          emailEnabled: true,
          id: true,
          promotionalNotifications: true,
          pushEnabled: true,
          smsEnabled: true,
          statusUpdates: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserNotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserNotificationSettingService", "deleteUserNotificationSetting")
  async deleteUserNotificationSetting(
    @common.Param() params: UserNotificationSettingWhereUniqueInput
  ): Promise<UserNotificationSetting | null> {
    try {
      return await this.service.deleteUserNotificationSetting({
        where: params,
        select: {
          appointmentReminders: true,
          createdAt: true,
          emailEnabled: true,
          id: true,
          promotionalNotifications: true,
          pushEnabled: true,
          smsEnabled: true,
          statusUpdates: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
