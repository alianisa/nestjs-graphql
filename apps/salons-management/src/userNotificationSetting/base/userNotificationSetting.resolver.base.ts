/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserNotificationSetting } from "./UserNotificationSetting";
import { UserNotificationSettingCountArgs } from "./UserNotificationSettingCountArgs";
import { UserNotificationSettingFindManyArgs } from "./UserNotificationSettingFindManyArgs";
import { UserNotificationSettingFindUniqueArgs } from "./UserNotificationSettingFindUniqueArgs";
import { CreateUserNotificationSettingArgs } from "./CreateUserNotificationSettingArgs";
import { UpdateUserNotificationSettingArgs } from "./UpdateUserNotificationSettingArgs";
import { DeleteUserNotificationSettingArgs } from "./DeleteUserNotificationSettingArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserNotificationSettingService } from "../userNotificationSetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserNotificationSetting)
export class UserNotificationSettingResolverBase {
  constructor(
    protected readonly service: UserNotificationSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "read",
    possession: "any",
  })
  async _userNotificationSettingsMeta(
    @graphql.Args() args: UserNotificationSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserNotificationSetting])
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "read",
    possession: "any",
  })
  async userNotificationSettings(
    @graphql.Args() args: UserNotificationSettingFindManyArgs
  ): Promise<UserNotificationSetting[]> {
    return this.service.userNotificationSettings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserNotificationSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "read",
    possession: "own",
  })
  async userNotificationSetting(
    @graphql.Args() args: UserNotificationSettingFindUniqueArgs
  ): Promise<UserNotificationSetting | null> {
    const result = await this.service.userNotificationSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserNotificationSetting)
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "create",
    possession: "any",
  })
  async createUserNotificationSetting(
    @graphql.Args() args: CreateUserNotificationSettingArgs
  ): Promise<UserNotificationSetting> {
    return await this.service.createUserNotificationSetting({
      ...args,
      data: {
        ...args.data,

        userProfiles: {
          connect: args.data.userProfiles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserNotificationSetting)
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "update",
    possession: "any",
  })
  async updateUserNotificationSetting(
    @graphql.Args() args: UpdateUserNotificationSettingArgs
  ): Promise<UserNotificationSetting | null> {
    try {
      return await this.service.updateUserNotificationSetting({
        ...args,
        data: {
          ...args.data,

          userProfiles: {
            connect: args.data.userProfiles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserNotificationSetting)
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "delete",
    possession: "any",
  })
  async deleteUserNotificationSetting(
    @graphql.Args() args: DeleteUserNotificationSettingArgs
  ): Promise<UserNotificationSetting | null> {
    try {
      return await this.service.deleteUserNotificationSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: UserNotificationSetting
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
