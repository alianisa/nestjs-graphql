/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MobilePaymentProvider as PrismaMobilePaymentProvider,
  Payment as PrismaPayment,
} from "@prisma/client";

export class MobilePaymentProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MobilePaymentProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mobilePaymentProvider.count(args);
  }

  async mobilePaymentProviders(
    args: Prisma.MobilePaymentProviderFindManyArgs
  ): Promise<PrismaMobilePaymentProvider[]> {
    return this.prisma.mobilePaymentProvider.findMany(args);
  }
  async mobilePaymentProvider(
    args: Prisma.MobilePaymentProviderFindUniqueArgs
  ): Promise<PrismaMobilePaymentProvider | null> {
    return this.prisma.mobilePaymentProvider.findUnique(args);
  }
  async createMobilePaymentProvider(
    args: Prisma.MobilePaymentProviderCreateArgs
  ): Promise<PrismaMobilePaymentProvider> {
    return this.prisma.mobilePaymentProvider.create(args);
  }
  async updateMobilePaymentProvider(
    args: Prisma.MobilePaymentProviderUpdateArgs
  ): Promise<PrismaMobilePaymentProvider> {
    return this.prisma.mobilePaymentProvider.update(args);
  }
  async deleteMobilePaymentProvider(
    args: Prisma.MobilePaymentProviderDeleteArgs
  ): Promise<PrismaMobilePaymentProvider> {
    return this.prisma.mobilePaymentProvider.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.mobilePaymentProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
