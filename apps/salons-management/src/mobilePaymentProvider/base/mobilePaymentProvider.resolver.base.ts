/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MobilePaymentProvider } from "./MobilePaymentProvider";
import { MobilePaymentProviderCountArgs } from "./MobilePaymentProviderCountArgs";
import { MobilePaymentProviderFindManyArgs } from "./MobilePaymentProviderFindManyArgs";
import { MobilePaymentProviderFindUniqueArgs } from "./MobilePaymentProviderFindUniqueArgs";
import { CreateMobilePaymentProviderArgs } from "./CreateMobilePaymentProviderArgs";
import { UpdateMobilePaymentProviderArgs } from "./UpdateMobilePaymentProviderArgs";
import { DeleteMobilePaymentProviderArgs } from "./DeleteMobilePaymentProviderArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { MobilePaymentProviderService } from "../mobilePaymentProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MobilePaymentProvider)
export class MobilePaymentProviderResolverBase {
  constructor(
    protected readonly service: MobilePaymentProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "read",
    possession: "any",
  })
  async _mobilePaymentProvidersMeta(
    @graphql.Args() args: MobilePaymentProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MobilePaymentProvider])
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "read",
    possession: "any",
  })
  async mobilePaymentProviders(
    @graphql.Args() args: MobilePaymentProviderFindManyArgs
  ): Promise<MobilePaymentProvider[]> {
    return this.service.mobilePaymentProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MobilePaymentProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "read",
    possession: "own",
  })
  async mobilePaymentProvider(
    @graphql.Args() args: MobilePaymentProviderFindUniqueArgs
  ): Promise<MobilePaymentProvider | null> {
    const result = await this.service.mobilePaymentProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MobilePaymentProvider)
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "create",
    possession: "any",
  })
  async createMobilePaymentProvider(
    @graphql.Args() args: CreateMobilePaymentProviderArgs
  ): Promise<MobilePaymentProvider> {
    return await this.service.createMobilePaymentProvider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MobilePaymentProvider)
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "update",
    possession: "any",
  })
  async updateMobilePaymentProvider(
    @graphql.Args() args: UpdateMobilePaymentProviderArgs
  ): Promise<MobilePaymentProvider | null> {
    try {
      return await this.service.updateMobilePaymentProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MobilePaymentProvider)
  @nestAccessControl.UseRoles({
    resource: "MobilePaymentProvider",
    action: "delete",
    possession: "any",
  })
  async deleteMobilePaymentProvider(
    @graphql.Args() args: DeleteMobilePaymentProviderArgs
  ): Promise<MobilePaymentProvider | null> {
    try {
      return await this.service.deleteMobilePaymentProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: MobilePaymentProvider,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
