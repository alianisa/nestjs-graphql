/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalonCategory } from "./SalonCategory";
import { SalonCategoryCountArgs } from "./SalonCategoryCountArgs";
import { SalonCategoryFindManyArgs } from "./SalonCategoryFindManyArgs";
import { SalonCategoryFindUniqueArgs } from "./SalonCategoryFindUniqueArgs";
import { CreateSalonCategoryArgs } from "./CreateSalonCategoryArgs";
import { UpdateSalonCategoryArgs } from "./UpdateSalonCategoryArgs";
import { DeleteSalonCategoryArgs } from "./DeleteSalonCategoryArgs";
import { SalonCategoryService } from "../salonCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalonCategory)
export class SalonCategoryResolverBase {
  constructor(
    protected readonly service: SalonCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "read",
    possession: "any",
  })
  async _salonCategoriesMeta(
    @graphql.Args() args: SalonCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalonCategory])
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "read",
    possession: "any",
  })
  async salonCategories(
    @graphql.Args() args: SalonCategoryFindManyArgs
  ): Promise<SalonCategory[]> {
    return this.service.salonCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalonCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "read",
    possession: "own",
  })
  async salonCategory(
    @graphql.Args() args: SalonCategoryFindUniqueArgs
  ): Promise<SalonCategory | null> {
    const result = await this.service.salonCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalonCategory)
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "create",
    possession: "any",
  })
  async createSalonCategory(
    @graphql.Args() args: CreateSalonCategoryArgs
  ): Promise<SalonCategory> {
    return await this.service.createSalonCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalonCategory)
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "update",
    possession: "any",
  })
  async updateSalonCategory(
    @graphql.Args() args: UpdateSalonCategoryArgs
  ): Promise<SalonCategory | null> {
    try {
      return await this.service.updateSalonCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalonCategory)
  @nestAccessControl.UseRoles({
    resource: "SalonCategory",
    action: "delete",
    possession: "any",
  })
  async deleteSalonCategory(
    @graphql.Args() args: DeleteSalonCategoryArgs
  ): Promise<SalonCategory | null> {
    try {
      return await this.service.deleteSalonCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
