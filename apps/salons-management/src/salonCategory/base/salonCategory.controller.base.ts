/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalonCategoryService } from "../salonCategory.service";
import { SalonCategoryCreateInput } from "./SalonCategoryCreateInput";
import { SalonCategory } from "./SalonCategory";
import { SalonCategoryFindManyArgs } from "./SalonCategoryFindManyArgs";
import { SalonCategoryWhereUniqueInput } from "./SalonCategoryWhereUniqueInput";
import { SalonCategoryUpdateInput } from "./SalonCategoryUpdateInput";

export class SalonCategoryControllerBase {
  constructor(protected readonly service: SalonCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonCategory })
  async createSalonCategory(
    @common.Body() data: SalonCategoryCreateInput
  ): Promise<SalonCategory> {
    return await this.service.createSalonCategory({
      data: data,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonCategory] })
  @ApiNestedQuery(SalonCategoryFindManyArgs)
  async salonCategories(
    @common.Req() request: Request
  ): Promise<SalonCategory[]> {
    const args = plainToClass(SalonCategoryFindManyArgs, request.query);
    return this.service.salonCategories({
      ...args,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salonCategory(
    @common.Param() params: SalonCategoryWhereUniqueInput
  ): Promise<SalonCategory | null> {
    const result = await this.service.salonCategory({
      where: params,
      select: {
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalonCategory(
    @common.Param() params: SalonCategoryWhereUniqueInput,
    @common.Body() data: SalonCategoryUpdateInput
  ): Promise<SalonCategory | null> {
    try {
      return await this.service.updateSalonCategory({
        where: params,
        data: data,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalonCategory(
    @common.Param() params: SalonCategoryWhereUniqueInput
  ): Promise<SalonCategory | null> {
    try {
      return await this.service.deleteSalonCategory({
        where: params,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
