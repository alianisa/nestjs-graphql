/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SalonCategory as PrismaSalonCategory } from "@prisma/client";

export class SalonCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalonCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salonCategory.count(args);
  }

  async salonCategories(
    args: Prisma.SalonCategoryFindManyArgs
  ): Promise<PrismaSalonCategory[]> {
    return this.prisma.salonCategory.findMany(args);
  }
  async salonCategory(
    args: Prisma.SalonCategoryFindUniqueArgs
  ): Promise<PrismaSalonCategory | null> {
    return this.prisma.salonCategory.findUnique(args);
  }
  async createSalonCategory(
    args: Prisma.SalonCategoryCreateArgs
  ): Promise<PrismaSalonCategory> {
    return this.prisma.salonCategory.create(args);
  }
  async updateSalonCategory(
    args: Prisma.SalonCategoryUpdateArgs
  ): Promise<PrismaSalonCategory> {
    return this.prisma.salonCategory.update(args);
  }
  async deleteSalonCategory(
    args: Prisma.SalonCategoryDeleteArgs
  ): Promise<PrismaSalonCategory> {
    return this.prisma.salonCategory.delete(args);
  }
}
