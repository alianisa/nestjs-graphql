/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SamlProvider } from "./SamlProvider";
import { SamlProviderCountArgs } from "./SamlProviderCountArgs";
import { SamlProviderFindManyArgs } from "./SamlProviderFindManyArgs";
import { SamlProviderFindUniqueArgs } from "./SamlProviderFindUniqueArgs";
import { CreateSamlProviderArgs } from "./CreateSamlProviderArgs";
import { UpdateSamlProviderArgs } from "./UpdateSamlProviderArgs";
import { DeleteSamlProviderArgs } from "./DeleteSamlProviderArgs";
import { SsoProvider } from "../../ssoProvider/base/SsoProvider";
import { SamlProviderService } from "../samlProvider.service";
@graphql.Resolver(() => SamlProvider)
export class SamlProviderResolverBase {
  constructor(protected readonly service: SamlProviderService) {}

  async _samlProvidersMeta(
    @graphql.Args() args: SamlProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SamlProvider])
  async samlProviders(
    @graphql.Args() args: SamlProviderFindManyArgs
  ): Promise<SamlProvider[]> {
    return this.service.samlProviders(args);
  }

  @graphql.Query(() => SamlProvider, { nullable: true })
  async samlProvider(
    @graphql.Args() args: SamlProviderFindUniqueArgs
  ): Promise<SamlProvider | null> {
    const result = await this.service.samlProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SamlProvider)
  async createSamlProvider(
    @graphql.Args() args: CreateSamlProviderArgs
  ): Promise<SamlProvider> {
    return await this.service.createSamlProvider({
      ...args,
      data: {
        ...args.data,

        ssoProviders: {
          connect: args.data.ssoProviders,
        },
      },
    });
  }

  @graphql.Mutation(() => SamlProvider)
  async updateSamlProvider(
    @graphql.Args() args: UpdateSamlProviderArgs
  ): Promise<SamlProvider | null> {
    try {
      return await this.service.updateSamlProvider({
        ...args,
        data: {
          ...args.data,

          ssoProviders: {
            connect: args.data.ssoProviders,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SamlProvider)
  async deleteSamlProvider(
    @graphql.Args() args: DeleteSamlProviderArgs
  ): Promise<SamlProvider | null> {
    try {
      return await this.service.deleteSamlProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => SsoProvider, {
    nullable: true,
    name: "ssoProviders",
  })
  async getSsoProviders(
    @graphql.Parent() parent: SamlProvider
  ): Promise<SsoProvider | null> {
    const result = await this.service.getSsoProviders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
