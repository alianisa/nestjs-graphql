/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SamlProviderService } from "../samlProvider.service";
import { SamlProviderCreateInput } from "./SamlProviderCreateInput";
import { SamlProviderWhereInput } from "./SamlProviderWhereInput";
import { SamlProviderWhereUniqueInput } from "./SamlProviderWhereUniqueInput";
import { SamlProviderFindManyArgs } from "./SamlProviderFindManyArgs";
import { SamlProviderUpdateInput } from "./SamlProviderUpdateInput";
import { SamlProvider } from "./SamlProvider";

export class SamlProviderGrpcControllerBase {
  constructor(protected readonly service: SamlProviderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SamlProvider })
  @GrpcMethod("SamlProviderService", "createSamlProvider")
  async createSamlProvider(
    @common.Body() data: SamlProviderCreateInput
  ): Promise<SamlProvider> {
    return await this.service.createSamlProvider({
      data: {
        ...data,

        ssoProviders: {
          connect: data.ssoProviders,
        },
      },
      select: {
        attributeMapping: true,
        createdAt: true,
        entityId: true,
        id: true,
        metadataUrl: true,
        metadataXml: true,
        nameIdFormat: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SamlProvider] })
  @ApiNestedQuery(SamlProviderFindManyArgs)
  @GrpcMethod("SamlProviderService", "samlProviders")
  async samlProviders(@common.Req() request: Request): Promise<SamlProvider[]> {
    const args = plainToClass(SamlProviderFindManyArgs, request.query);
    return this.service.samlProviders({
      ...args,
      select: {
        attributeMapping: true,
        createdAt: true,
        entityId: true,
        id: true,
        metadataUrl: true,
        metadataXml: true,
        nameIdFormat: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SamlProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlProviderService", "samlProvider")
  async samlProvider(
    @common.Param() params: SamlProviderWhereUniqueInput
  ): Promise<SamlProvider | null> {
    const result = await this.service.samlProvider({
      where: params,
      select: {
        attributeMapping: true,
        createdAt: true,
        entityId: true,
        id: true,
        metadataUrl: true,
        metadataXml: true,
        nameIdFormat: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SamlProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlProviderService", "updateSamlProvider")
  async updateSamlProvider(
    @common.Param() params: SamlProviderWhereUniqueInput,
    @common.Body() data: SamlProviderUpdateInput
  ): Promise<SamlProvider | null> {
    try {
      return await this.service.updateSamlProvider({
        where: params,
        data: {
          ...data,

          ssoProviders: {
            connect: data.ssoProviders,
          },
        },
        select: {
          attributeMapping: true,
          createdAt: true,
          entityId: true,
          id: true,
          metadataUrl: true,
          metadataXml: true,
          nameIdFormat: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SamlProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlProviderService", "deleteSamlProvider")
  async deleteSamlProvider(
    @common.Param() params: SamlProviderWhereUniqueInput
  ): Promise<SamlProvider | null> {
    try {
      return await this.service.deleteSamlProvider({
        where: params,
        select: {
          attributeMapping: true,
          createdAt: true,
          entityId: true,
          id: true,
          metadataUrl: true,
          metadataXml: true,
          nameIdFormat: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
