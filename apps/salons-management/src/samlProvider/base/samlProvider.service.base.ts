/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SamlProvider as PrismaSamlProvider,
  SsoProvider as PrismaSsoProvider,
} from "@prisma/client";

export class SamlProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SamlProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.samlProvider.count(args);
  }

  async samlProviders(
    args: Prisma.SamlProviderFindManyArgs
  ): Promise<PrismaSamlProvider[]> {
    return this.prisma.samlProvider.findMany(args);
  }
  async samlProvider(
    args: Prisma.SamlProviderFindUniqueArgs
  ): Promise<PrismaSamlProvider | null> {
    return this.prisma.samlProvider.findUnique(args);
  }
  async createSamlProvider(
    args: Prisma.SamlProviderCreateArgs
  ): Promise<PrismaSamlProvider> {
    return this.prisma.samlProvider.create(args);
  }
  async updateSamlProvider(
    args: Prisma.SamlProviderUpdateArgs
  ): Promise<PrismaSamlProvider> {
    return this.prisma.samlProvider.update(args);
  }
  async deleteSamlProvider(
    args: Prisma.SamlProviderDeleteArgs
  ): Promise<PrismaSamlProvider> {
    return this.prisma.samlProvider.delete(args);
  }

  async getSsoProviders(parentId: string): Promise<PrismaSsoProvider | null> {
    return this.prisma.samlProvider
      .findUnique({
        where: { id: parentId },
      })
      .ssoProviders();
  }
}
