/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Promocode } from "./Promocode";
import { PromocodeCountArgs } from "./PromocodeCountArgs";
import { PromocodeFindManyArgs } from "./PromocodeFindManyArgs";
import { PromocodeFindUniqueArgs } from "./PromocodeFindUniqueArgs";
import { CreatePromocodeArgs } from "./CreatePromocodeArgs";
import { UpdatePromocodeArgs } from "./UpdatePromocodeArgs";
import { DeletePromocodeArgs } from "./DeletePromocodeArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Discount } from "../../discount/base/Discount";
import { PromocodeService } from "../promocode.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Promocode)
export class PromocodeResolverBase {
  constructor(
    protected readonly service: PromocodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "read",
    possession: "any",
  })
  async _promocodesMeta(
    @graphql.Args() args: PromocodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Promocode])
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "read",
    possession: "any",
  })
  async promocodes(
    @graphql.Args() args: PromocodeFindManyArgs
  ): Promise<Promocode[]> {
    return this.service.promocodes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Promocode, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "read",
    possession: "own",
  })
  async promocode(
    @graphql.Args() args: PromocodeFindUniqueArgs
  ): Promise<Promocode | null> {
    const result = await this.service.promocode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Promocode)
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "create",
    possession: "any",
  })
  async createPromocode(
    @graphql.Args() args: CreatePromocodeArgs
  ): Promise<Promocode> {
    return await this.service.createPromocode({
      ...args,
      data: {
        ...args.data,

        discounts: args.data.discounts
          ? {
              connect: args.data.discounts,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Promocode)
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "update",
    possession: "any",
  })
  async updatePromocode(
    @graphql.Args() args: UpdatePromocodeArgs
  ): Promise<Promocode | null> {
    try {
      return await this.service.updatePromocode({
        ...args,
        data: {
          ...args.data,

          discounts: args.data.discounts
            ? {
                connect: args.data.discounts,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Promocode)
  @nestAccessControl.UseRoles({
    resource: "Promocode",
    action: "delete",
    possession: "any",
  })
  async deletePromocode(
    @graphql.Args() args: DeletePromocodeArgs
  ): Promise<Promocode | null> {
    try {
      return await this.service.deletePromocode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: Promocode,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Discount, {
    nullable: true,
    name: "discounts",
  })
  @nestAccessControl.UseRoles({
    resource: "Discount",
    action: "read",
    possession: "any",
  })
  async getDiscounts(
    @graphql.Parent() parent: Promocode
  ): Promise<Discount | null> {
    const result = await this.service.getDiscounts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
