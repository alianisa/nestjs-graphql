/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalonRatingLikeService } from "../salonRatingLike.service";
import { SalonRatingLikeCreateInput } from "./SalonRatingLikeCreateInput";
import { SalonRatingLike } from "./SalonRatingLike";
import { SalonRatingLikeFindManyArgs } from "./SalonRatingLikeFindManyArgs";
import { SalonRatingLikeWhereUniqueInput } from "./SalonRatingLikeWhereUniqueInput";
import { SalonRatingLikeUpdateInput } from "./SalonRatingLikeUpdateInput";

export class SalonRatingLikeControllerBase {
  constructor(protected readonly service: SalonRatingLikeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonRatingLike })
  async createSalonRatingLike(
    @common.Body() data: SalonRatingLikeCreateInput
  ): Promise<SalonRatingLike> {
    return await this.service.createSalonRatingLike({
      data: {
        ...data,

        salonRatings: data.salonRatings
          ? {
              connect: data.salonRatings,
            }
          : undefined,

        salons: {
          connect: data.salons,
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles:
          data.userProfilesSalonRatingLikesUserIdTouserProfiles
            ? {
                connect: data.userProfilesSalonRatingLikesUserIdTouserProfiles,
              }
            : undefined,

        userProfilesSalonRatingLikesVoterIdTouserProfiles:
          data.userProfilesSalonRatingLikesVoterIdTouserProfiles
            ? {
                connect: data.userProfilesSalonRatingLikesVoterIdTouserProfiles,
              }
            : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        review: true,

        salonRatings: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonRatingLike] })
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  async salonRatingLikes(
    @common.Req() request: Request
  ): Promise<SalonRatingLike[]> {
    const args = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    return this.service.salonRatingLikes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        review: true,

        salonRatings: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonRatingLike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salonRatingLike(
    @common.Param() params: SalonRatingLikeWhereUniqueInput
  ): Promise<SalonRatingLike | null> {
    const result = await this.service.salonRatingLike({
      where: params,
      select: {
        createdAt: true,
        id: true,
        review: true,

        salonRatings: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonRatingLike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalonRatingLike(
    @common.Param() params: SalonRatingLikeWhereUniqueInput,
    @common.Body() data: SalonRatingLikeUpdateInput
  ): Promise<SalonRatingLike | null> {
    try {
      return await this.service.updateSalonRatingLike({
        where: params,
        data: {
          ...data,

          salonRatings: data.salonRatings
            ? {
                connect: data.salonRatings,
              }
            : undefined,

          salons: {
            connect: data.salons,
          },

          userProfilesSalonRatingLikesUserIdTouserProfiles:
            data.userProfilesSalonRatingLikesUserIdTouserProfiles
              ? {
                  connect:
                    data.userProfilesSalonRatingLikesUserIdTouserProfiles,
                }
              : undefined,

          userProfilesSalonRatingLikesVoterIdTouserProfiles:
            data.userProfilesSalonRatingLikesVoterIdTouserProfiles
              ? {
                  connect:
                    data.userProfilesSalonRatingLikesVoterIdTouserProfiles,
                }
              : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          review: true,

          salonRatings: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingLikesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingLikesVoterIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonRatingLike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalonRatingLike(
    @common.Param() params: SalonRatingLikeWhereUniqueInput
  ): Promise<SalonRatingLike | null> {
    try {
      return await this.service.deleteSalonRatingLike({
        where: params,
        select: {
          createdAt: true,
          id: true,
          review: true,

          salonRatings: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingLikesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingLikesVoterIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
