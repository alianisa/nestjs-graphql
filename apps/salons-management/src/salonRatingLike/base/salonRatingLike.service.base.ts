/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalonRatingLike as PrismaSalonRatingLike,
  SalonRating as PrismaSalonRating,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SalonRatingLikeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalonRatingLikeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salonRatingLike.count(args);
  }

  async salonRatingLikes(
    args: Prisma.SalonRatingLikeFindManyArgs
  ): Promise<PrismaSalonRatingLike[]> {
    return this.prisma.salonRatingLike.findMany(args);
  }
  async salonRatingLike(
    args: Prisma.SalonRatingLikeFindUniqueArgs
  ): Promise<PrismaSalonRatingLike | null> {
    return this.prisma.salonRatingLike.findUnique(args);
  }
  async createSalonRatingLike(
    args: Prisma.SalonRatingLikeCreateArgs
  ): Promise<PrismaSalonRatingLike> {
    return this.prisma.salonRatingLike.create(args);
  }
  async updateSalonRatingLike(
    args: Prisma.SalonRatingLikeUpdateArgs
  ): Promise<PrismaSalonRatingLike> {
    return this.prisma.salonRatingLike.update(args);
  }
  async deleteSalonRatingLike(
    args: Prisma.SalonRatingLikeDeleteArgs
  ): Promise<PrismaSalonRatingLike> {
    return this.prisma.salonRatingLike.delete(args);
  }

  async getSalonRatings(parentId: string): Promise<PrismaSalonRating | null> {
    return this.prisma.salonRatingLike
      .findUnique({
        where: { id: parentId },
      })
      .salonRatings();
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.salonRatingLike
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfilesSalonRatingLikesUserIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.salonRatingLike
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesSalonRatingLikesUserIdTouserProfiles();
  }

  async getUserProfilesSalonRatingLikesVoterIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.salonRatingLike
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesSalonRatingLikesVoterIdTouserProfiles();
  }
}
