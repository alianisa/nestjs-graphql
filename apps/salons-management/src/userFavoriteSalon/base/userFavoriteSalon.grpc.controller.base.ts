/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserFavoriteSalonService } from "../userFavoriteSalon.service";
import { UserFavoriteSalonCreateInput } from "./UserFavoriteSalonCreateInput";
import { UserFavoriteSalonWhereInput } from "./UserFavoriteSalonWhereInput";
import { UserFavoriteSalonWhereUniqueInput } from "./UserFavoriteSalonWhereUniqueInput";
import { UserFavoriteSalonFindManyArgs } from "./UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalonUpdateInput } from "./UserFavoriteSalonUpdateInput";
import { UserFavoriteSalon } from "./UserFavoriteSalon";

export class UserFavoriteSalonGrpcControllerBase {
  constructor(protected readonly service: UserFavoriteSalonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserFavoriteSalon })
  @GrpcMethod("UserFavoriteSalonService", "createUserFavoriteSalon")
  async createUserFavoriteSalon(
    @common.Body() data: UserFavoriteSalonCreateInput
  ): Promise<UserFavoriteSalon> {
    return await this.service.createUserFavoriteSalon({
      data: {
        ...data,

        salons: {
          connect: data.salons,
        },

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserFavoriteSalon] })
  @ApiNestedQuery(UserFavoriteSalonFindManyArgs)
  @GrpcMethod("UserFavoriteSalonService", "userFavoriteSalons")
  async userFavoriteSalons(
    @common.Req() request: Request
  ): Promise<UserFavoriteSalon[]> {
    const args = plainToClass(UserFavoriteSalonFindManyArgs, request.query);
    return this.service.userFavoriteSalons({
      ...args,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteSalon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserFavoriteSalonService", "userFavoriteSalon")
  async userFavoriteSalon(
    @common.Param() params: UserFavoriteSalonWhereUniqueInput
  ): Promise<UserFavoriteSalon | null> {
    const result = await this.service.userFavoriteSalon({
      where: params,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteSalon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserFavoriteSalonService", "updateUserFavoriteSalon")
  async updateUserFavoriteSalon(
    @common.Param() params: UserFavoriteSalonWhereUniqueInput,
    @common.Body() data: UserFavoriteSalonUpdateInput
  ): Promise<UserFavoriteSalon | null> {
    try {
      return await this.service.updateUserFavoriteSalon({
        where: params,
        data: {
          ...data,

          salons: {
            connect: data.salons,
          },

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          favorite: true,
          id: true,

          salons: {
            select: {
              id: true,
            },
          },

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteSalon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserFavoriteSalonService", "deleteUserFavoriteSalon")
  async deleteUserFavoriteSalon(
    @common.Param() params: UserFavoriteSalonWhereUniqueInput
  ): Promise<UserFavoriteSalon | null> {
    try {
      return await this.service.deleteUserFavoriteSalon({
        where: params,
        select: {
          createdAt: true,
          favorite: true,
          id: true,

          salons: {
            select: {
              id: true,
            },
          },

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
