/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserFavoriteSalon } from "./UserFavoriteSalon";
import { UserFavoriteSalonCountArgs } from "./UserFavoriteSalonCountArgs";
import { UserFavoriteSalonFindManyArgs } from "./UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalonFindUniqueArgs } from "./UserFavoriteSalonFindUniqueArgs";
import { CreateUserFavoriteSalonArgs } from "./CreateUserFavoriteSalonArgs";
import { UpdateUserFavoriteSalonArgs } from "./UpdateUserFavoriteSalonArgs";
import { DeleteUserFavoriteSalonArgs } from "./DeleteUserFavoriteSalonArgs";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserFavoriteSalonService } from "../userFavoriteSalon.service";
@graphql.Resolver(() => UserFavoriteSalon)
export class UserFavoriteSalonResolverBase {
  constructor(protected readonly service: UserFavoriteSalonService) {}

  async _userFavoriteSalonsMeta(
    @graphql.Args() args: UserFavoriteSalonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserFavoriteSalon])
  async userFavoriteSalons(
    @graphql.Args() args: UserFavoriteSalonFindManyArgs
  ): Promise<UserFavoriteSalon[]> {
    return this.service.userFavoriteSalons(args);
  }

  @graphql.Query(() => UserFavoriteSalon, { nullable: true })
  async userFavoriteSalon(
    @graphql.Args() args: UserFavoriteSalonFindUniqueArgs
  ): Promise<UserFavoriteSalon | null> {
    const result = await this.service.userFavoriteSalon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserFavoriteSalon)
  async createUserFavoriteSalon(
    @graphql.Args() args: CreateUserFavoriteSalonArgs
  ): Promise<UserFavoriteSalon> {
    return await this.service.createUserFavoriteSalon({
      ...args,
      data: {
        ...args.data,

        salons: {
          connect: args.data.salons,
        },

        userProfiles: args.data.userProfiles
          ? {
              connect: args.data.userProfiles,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserFavoriteSalon)
  async updateUserFavoriteSalon(
    @graphql.Args() args: UpdateUserFavoriteSalonArgs
  ): Promise<UserFavoriteSalon | null> {
    try {
      return await this.service.updateUserFavoriteSalon({
        ...args,
        data: {
          ...args.data,

          salons: {
            connect: args.data.salons,
          },

          userProfiles: args.data.userProfiles
            ? {
                connect: args.data.userProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFavoriteSalon)
  async deleteUserFavoriteSalon(
    @graphql.Args() args: DeleteUserFavoriteSalonArgs
  ): Promise<UserFavoriteSalon | null> {
    try {
      return await this.service.deleteUserFavoriteSalon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  async getSalons(
    @graphql.Parent() parent: UserFavoriteSalon
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  async getUserProfiles(
    @graphql.Parent() parent: UserFavoriteSalon
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
