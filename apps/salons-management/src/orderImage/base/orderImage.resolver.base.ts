/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OrderImage } from "./OrderImage";
import { OrderImageCountArgs } from "./OrderImageCountArgs";
import { OrderImageFindManyArgs } from "./OrderImageFindManyArgs";
import { OrderImageFindUniqueArgs } from "./OrderImageFindUniqueArgs";
import { CreateOrderImageArgs } from "./CreateOrderImageArgs";
import { UpdateOrderImageArgs } from "./UpdateOrderImageArgs";
import { DeleteOrderImageArgs } from "./DeleteOrderImageArgs";
import { Order } from "../../order/base/Order";
import { OrderImageService } from "../orderImage.service";
@graphql.Resolver(() => OrderImage)
export class OrderImageResolverBase {
  constructor(protected readonly service: OrderImageService) {}

  async _orderImagesMeta(
    @graphql.Args() args: OrderImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrderImage])
  async orderImages(
    @graphql.Args() args: OrderImageFindManyArgs
  ): Promise<OrderImage[]> {
    return this.service.orderImages(args);
  }

  @graphql.Query(() => OrderImage, { nullable: true })
  async orderImage(
    @graphql.Args() args: OrderImageFindUniqueArgs
  ): Promise<OrderImage | null> {
    const result = await this.service.orderImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrderImage)
  async createOrderImage(
    @graphql.Args() args: CreateOrderImageArgs
  ): Promise<OrderImage> {
    return await this.service.createOrderImage({
      ...args,
      data: {
        ...args.data,

        orders: {
          connect: args.data.orders,
        },
      },
    });
  }

  @graphql.Mutation(() => OrderImage)
  async updateOrderImage(
    @graphql.Args() args: UpdateOrderImageArgs
  ): Promise<OrderImage | null> {
    try {
      return await this.service.updateOrderImage({
        ...args,
        data: {
          ...args.data,

          orders: {
            connect: args.data.orders,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderImage)
  async deleteOrderImage(
    @graphql.Args() args: DeleteOrderImageArgs
  ): Promise<OrderImage | null> {
    try {
      return await this.service.deleteOrderImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orders",
  })
  async getOrders(@graphql.Parent() parent: OrderImage): Promise<Order | null> {
    const result = await this.service.getOrders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
