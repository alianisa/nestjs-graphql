/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderImageService } from "../orderImage.service";
import { OrderImageCreateInput } from "./OrderImageCreateInput";
import { OrderImage } from "./OrderImage";
import { OrderImageFindManyArgs } from "./OrderImageFindManyArgs";
import { OrderImageWhereUniqueInput } from "./OrderImageWhereUniqueInput";
import { OrderImageUpdateInput } from "./OrderImageUpdateInput";

export class OrderImageControllerBase {
  constructor(protected readonly service: OrderImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderImage })
  async createOrderImage(
    @common.Body() data: OrderImageCreateInput
  ): Promise<OrderImage> {
    return await this.service.createOrderImage({
      data: {
        ...data,

        orders: {
          connect: data.orders,
        },
      },
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        orders: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderImage] })
  @ApiNestedQuery(OrderImageFindManyArgs)
  async orderImages(@common.Req() request: Request): Promise<OrderImage[]> {
    const args = plainToClass(OrderImageFindManyArgs, request.query);
    return this.service.orderImages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        orders: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderImage(
    @common.Param() params: OrderImageWhereUniqueInput
  ): Promise<OrderImage | null> {
    const result = await this.service.orderImage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        orders: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderImage(
    @common.Param() params: OrderImageWhereUniqueInput,
    @common.Body() data: OrderImageUpdateInput
  ): Promise<OrderImage | null> {
    try {
      return await this.service.updateOrderImage({
        where: params,
        data: {
          ...data,

          orders: {
            connect: data.orders,
          },
        },
        select: {
          createdAt: true,
          id: true,
          imageUrl: true,

          orders: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderImage(
    @common.Param() params: OrderImageWhereUniqueInput
  ): Promise<OrderImage | null> {
    try {
      return await this.service.deleteOrderImage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          imageUrl: true,

          orders: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
