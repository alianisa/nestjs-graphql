/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OrderImage as PrismaOrderImage,
  Order as PrismaOrder,
} from "@prisma/client";

export class OrderImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderImageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderImage.count(args);
  }

  async orderImages(
    args: Prisma.OrderImageFindManyArgs
  ): Promise<PrismaOrderImage[]> {
    return this.prisma.orderImage.findMany(args);
  }
  async orderImage(
    args: Prisma.OrderImageFindUniqueArgs
  ): Promise<PrismaOrderImage | null> {
    return this.prisma.orderImage.findUnique(args);
  }
  async createOrderImage(
    args: Prisma.OrderImageCreateArgs
  ): Promise<PrismaOrderImage> {
    return this.prisma.orderImage.create(args);
  }
  async updateOrderImage(
    args: Prisma.OrderImageUpdateArgs
  ): Promise<PrismaOrderImage> {
    return this.prisma.orderImage.update(args);
  }
  async deleteOrderImage(
    args: Prisma.OrderImageDeleteArgs
  ): Promise<PrismaOrderImage> {
    return this.prisma.orderImage.delete(args);
  }

  async getOrders(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.orderImage
      .findUnique({
        where: { id: parentId },
      })
      .orders();
  }
}
