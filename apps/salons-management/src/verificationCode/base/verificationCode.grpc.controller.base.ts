/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { VerificationCodeService } from "../verificationCode.service";
import { VerificationCodeCreateInput } from "./VerificationCodeCreateInput";
import { VerificationCodeWhereInput } from "./VerificationCodeWhereInput";
import { VerificationCodeWhereUniqueInput } from "./VerificationCodeWhereUniqueInput";
import { VerificationCodeFindManyArgs } from "./VerificationCodeFindManyArgs";
import { VerificationCodeUpdateInput } from "./VerificationCodeUpdateInput";
import { VerificationCode } from "./VerificationCode";

export class VerificationCodeGrpcControllerBase {
  constructor(protected readonly service: VerificationCodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VerificationCode })
  @GrpcMethod("VerificationCodeService", "createVerificationCode")
  async createVerificationCode(
    @common.Body() data: VerificationCodeCreateInput
  ): Promise<VerificationCode> {
    return await this.service.createVerificationCode({
      data: data,
      select: {
        attempts: true,
        code: true,
        createdAt: true,
        expiresAt: true,
        id: true,
        maxAttempts: true,
        messageId: true,
        metadata: true,
        phone: true,
        providerId: true,
        status: true,
        updatedAt: true,
        verification_type: true,
        verifiedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VerificationCode] })
  @ApiNestedQuery(VerificationCodeFindManyArgs)
  @GrpcMethod("VerificationCodeService", "verificationCodes")
  async verificationCodes(
    @common.Req() request: Request
  ): Promise<VerificationCode[]> {
    const args = plainToClass(VerificationCodeFindManyArgs, request.query);
    return this.service.verificationCodes({
      ...args,
      select: {
        attempts: true,
        code: true,
        createdAt: true,
        expiresAt: true,
        id: true,
        maxAttempts: true,
        messageId: true,
        metadata: true,
        phone: true,
        providerId: true,
        status: true,
        updatedAt: true,
        verification_type: true,
        verifiedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VerificationCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VerificationCodeService", "verificationCode")
  async verificationCode(
    @common.Param() params: VerificationCodeWhereUniqueInput
  ): Promise<VerificationCode | null> {
    const result = await this.service.verificationCode({
      where: params,
      select: {
        attempts: true,
        code: true,
        createdAt: true,
        expiresAt: true,
        id: true,
        maxAttempts: true,
        messageId: true,
        metadata: true,
        phone: true,
        providerId: true,
        status: true,
        updatedAt: true,
        verification_type: true,
        verifiedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VerificationCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VerificationCodeService", "updateVerificationCode")
  async updateVerificationCode(
    @common.Param() params: VerificationCodeWhereUniqueInput,
    @common.Body() data: VerificationCodeUpdateInput
  ): Promise<VerificationCode | null> {
    try {
      return await this.service.updateVerificationCode({
        where: params,
        data: data,
        select: {
          attempts: true,
          code: true,
          createdAt: true,
          expiresAt: true,
          id: true,
          maxAttempts: true,
          messageId: true,
          metadata: true,
          phone: true,
          providerId: true,
          status: true,
          updatedAt: true,
          verification_type: true,
          verifiedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VerificationCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VerificationCodeService", "deleteVerificationCode")
  async deleteVerificationCode(
    @common.Param() params: VerificationCodeWhereUniqueInput
  ): Promise<VerificationCode | null> {
    try {
      return await this.service.deleteVerificationCode({
        where: params,
        select: {
          attempts: true,
          code: true,
          createdAt: true,
          expiresAt: true,
          id: true,
          maxAttempts: true,
          messageId: true,
          metadata: true,
          phone: true,
          providerId: true,
          status: true,
          updatedAt: true,
          verification_type: true,
          verifiedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
