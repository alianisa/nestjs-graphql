/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VerificationCode } from "./VerificationCode";
import { VerificationCodeCountArgs } from "./VerificationCodeCountArgs";
import { VerificationCodeFindManyArgs } from "./VerificationCodeFindManyArgs";
import { VerificationCodeFindUniqueArgs } from "./VerificationCodeFindUniqueArgs";
import { CreateVerificationCodeArgs } from "./CreateVerificationCodeArgs";
import { UpdateVerificationCodeArgs } from "./UpdateVerificationCodeArgs";
import { DeleteVerificationCodeArgs } from "./DeleteVerificationCodeArgs";
import { VerificationCodeService } from "../verificationCode.service";
@graphql.Resolver(() => VerificationCode)
export class VerificationCodeResolverBase {
  constructor(protected readonly service: VerificationCodeService) {}

  async _verificationCodesMeta(
    @graphql.Args() args: VerificationCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VerificationCode])
  async verificationCodes(
    @graphql.Args() args: VerificationCodeFindManyArgs
  ): Promise<VerificationCode[]> {
    return this.service.verificationCodes(args);
  }

  @graphql.Query(() => VerificationCode, { nullable: true })
  async verificationCode(
    @graphql.Args() args: VerificationCodeFindUniqueArgs
  ): Promise<VerificationCode | null> {
    const result = await this.service.verificationCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VerificationCode)
  async createVerificationCode(
    @graphql.Args() args: CreateVerificationCodeArgs
  ): Promise<VerificationCode> {
    return await this.service.createVerificationCode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VerificationCode)
  async updateVerificationCode(
    @graphql.Args() args: UpdateVerificationCodeArgs
  ): Promise<VerificationCode | null> {
    try {
      return await this.service.updateVerificationCode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VerificationCode)
  async deleteVerificationCode(
    @graphql.Args() args: DeleteVerificationCodeArgs
  ): Promise<VerificationCode | null> {
    try {
      return await this.service.deleteVerificationCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
