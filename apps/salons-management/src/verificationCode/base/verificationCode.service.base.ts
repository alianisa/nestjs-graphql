/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VerificationCode as PrismaVerificationCode,
} from "@prisma/client";

export class VerificationCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VerificationCodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.verificationCode.count(args);
  }

  async verificationCodes(
    args: Prisma.VerificationCodeFindManyArgs
  ): Promise<PrismaVerificationCode[]> {
    return this.prisma.verificationCode.findMany(args);
  }
  async verificationCode(
    args: Prisma.VerificationCodeFindUniqueArgs
  ): Promise<PrismaVerificationCode | null> {
    return this.prisma.verificationCode.findUnique(args);
  }
  async createVerificationCode(
    args: Prisma.VerificationCodeCreateArgs
  ): Promise<PrismaVerificationCode> {
    return this.prisma.verificationCode.create(args);
  }
  async updateVerificationCode(
    args: Prisma.VerificationCodeUpdateArgs
  ): Promise<PrismaVerificationCode> {
    return this.prisma.verificationCode.update(args);
  }
  async deleteVerificationCode(
    args: Prisma.VerificationCodeDeleteArgs
  ): Promise<PrismaVerificationCode> {
    return this.prisma.verificationCode.delete(args);
  }
}
