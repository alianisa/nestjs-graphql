/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SamlRelayState as PrismaSamlRelayState,
  FlowState as PrismaFlowState,
  SsoProvider as PrismaSsoProvider,
} from "@prisma/client";

export class SamlRelayStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SamlRelayStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.samlRelayState.count(args);
  }

  async samlRelayStates(
    args: Prisma.SamlRelayStateFindManyArgs
  ): Promise<PrismaSamlRelayState[]> {
    return this.prisma.samlRelayState.findMany(args);
  }
  async samlRelayState(
    args: Prisma.SamlRelayStateFindUniqueArgs
  ): Promise<PrismaSamlRelayState | null> {
    return this.prisma.samlRelayState.findUnique(args);
  }
  async createSamlRelayState(
    args: Prisma.SamlRelayStateCreateArgs
  ): Promise<PrismaSamlRelayState> {
    return this.prisma.samlRelayState.create(args);
  }
  async updateSamlRelayState(
    args: Prisma.SamlRelayStateUpdateArgs
  ): Promise<PrismaSamlRelayState> {
    return this.prisma.samlRelayState.update(args);
  }
  async deleteSamlRelayState(
    args: Prisma.SamlRelayStateDeleteArgs
  ): Promise<PrismaSamlRelayState> {
    return this.prisma.samlRelayState.delete(args);
  }

  async getFlowState(parentId: string): Promise<PrismaFlowState | null> {
    return this.prisma.samlRelayState
      .findUnique({
        where: { id: parentId },
      })
      .flowState();
  }

  async getSsoProviders(parentId: string): Promise<PrismaSsoProvider | null> {
    return this.prisma.samlRelayState
      .findUnique({
        where: { id: parentId },
      })
      .ssoProviders();
  }
}
