/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SamlRelayState } from "./SamlRelayState";
import { SamlRelayStateCountArgs } from "./SamlRelayStateCountArgs";
import { SamlRelayStateFindManyArgs } from "./SamlRelayStateFindManyArgs";
import { SamlRelayStateFindUniqueArgs } from "./SamlRelayStateFindUniqueArgs";
import { CreateSamlRelayStateArgs } from "./CreateSamlRelayStateArgs";
import { UpdateSamlRelayStateArgs } from "./UpdateSamlRelayStateArgs";
import { DeleteSamlRelayStateArgs } from "./DeleteSamlRelayStateArgs";
import { FlowState } from "../../flowState/base/FlowState";
import { SsoProvider } from "../../ssoProvider/base/SsoProvider";
import { SamlRelayStateService } from "../samlRelayState.service";
@graphql.Resolver(() => SamlRelayState)
export class SamlRelayStateResolverBase {
  constructor(protected readonly service: SamlRelayStateService) {}

  async _samlRelayStatesMeta(
    @graphql.Args() args: SamlRelayStateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SamlRelayState])
  async samlRelayStates(
    @graphql.Args() args: SamlRelayStateFindManyArgs
  ): Promise<SamlRelayState[]> {
    return this.service.samlRelayStates(args);
  }

  @graphql.Query(() => SamlRelayState, { nullable: true })
  async samlRelayState(
    @graphql.Args() args: SamlRelayStateFindUniqueArgs
  ): Promise<SamlRelayState | null> {
    const result = await this.service.samlRelayState(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SamlRelayState)
  async createSamlRelayState(
    @graphql.Args() args: CreateSamlRelayStateArgs
  ): Promise<SamlRelayState> {
    return await this.service.createSamlRelayState({
      ...args,
      data: {
        ...args.data,

        flowState: args.data.flowState
          ? {
              connect: args.data.flowState,
            }
          : undefined,

        ssoProviders: {
          connect: args.data.ssoProviders,
        },
      },
    });
  }

  @graphql.Mutation(() => SamlRelayState)
  async updateSamlRelayState(
    @graphql.Args() args: UpdateSamlRelayStateArgs
  ): Promise<SamlRelayState | null> {
    try {
      return await this.service.updateSamlRelayState({
        ...args,
        data: {
          ...args.data,

          flowState: args.data.flowState
            ? {
                connect: args.data.flowState,
              }
            : undefined,

          ssoProviders: {
            connect: args.data.ssoProviders,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SamlRelayState)
  async deleteSamlRelayState(
    @graphql.Args() args: DeleteSamlRelayStateArgs
  ): Promise<SamlRelayState | null> {
    try {
      return await this.service.deleteSamlRelayState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => FlowState, {
    nullable: true,
    name: "flowState",
  })
  async getFlowState(
    @graphql.Parent() parent: SamlRelayState
  ): Promise<FlowState | null> {
    const result = await this.service.getFlowState(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => SsoProvider, {
    nullable: true,
    name: "ssoProviders",
  })
  async getSsoProviders(
    @graphql.Parent() parent: SamlRelayState
  ): Promise<SsoProvider | null> {
    const result = await this.service.getSsoProviders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
