/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SamlRelayStateService } from "../samlRelayState.service";
import { SamlRelayStateCreateInput } from "./SamlRelayStateCreateInput";
import { SamlRelayStateWhereInput } from "./SamlRelayStateWhereInput";
import { SamlRelayStateWhereUniqueInput } from "./SamlRelayStateWhereUniqueInput";
import { SamlRelayStateFindManyArgs } from "./SamlRelayStateFindManyArgs";
import { SamlRelayStateUpdateInput } from "./SamlRelayStateUpdateInput";
import { SamlRelayState } from "./SamlRelayState";

export class SamlRelayStateGrpcControllerBase {
  constructor(protected readonly service: SamlRelayStateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SamlRelayState })
  @GrpcMethod("SamlRelayStateService", "createSamlRelayState")
  async createSamlRelayState(
    @common.Body() data: SamlRelayStateCreateInput
  ): Promise<SamlRelayState> {
    return await this.service.createSamlRelayState({
      data: {
        ...data,

        flowState: data.flowState
          ? {
              connect: data.flowState,
            }
          : undefined,

        ssoProviders: {
          connect: data.ssoProviders,
        },
      },
      select: {
        createdAt: true,

        flowState: {
          select: {
            id: true,
          },
        },

        forEmail: true,
        id: true,
        redirectTo: true,
        requestId: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SamlRelayState] })
  @ApiNestedQuery(SamlRelayStateFindManyArgs)
  @GrpcMethod("SamlRelayStateService", "samlRelayStates")
  async samlRelayStates(
    @common.Req() request: Request
  ): Promise<SamlRelayState[]> {
    const args = plainToClass(SamlRelayStateFindManyArgs, request.query);
    return this.service.samlRelayStates({
      ...args,
      select: {
        createdAt: true,

        flowState: {
          select: {
            id: true,
          },
        },

        forEmail: true,
        id: true,
        redirectTo: true,
        requestId: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SamlRelayState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlRelayStateService", "samlRelayState")
  async samlRelayState(
    @common.Param() params: SamlRelayStateWhereUniqueInput
  ): Promise<SamlRelayState | null> {
    const result = await this.service.samlRelayState({
      where: params,
      select: {
        createdAt: true,

        flowState: {
          select: {
            id: true,
          },
        },

        forEmail: true,
        id: true,
        redirectTo: true,
        requestId: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SamlRelayState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlRelayStateService", "updateSamlRelayState")
  async updateSamlRelayState(
    @common.Param() params: SamlRelayStateWhereUniqueInput,
    @common.Body() data: SamlRelayStateUpdateInput
  ): Promise<SamlRelayState | null> {
    try {
      return await this.service.updateSamlRelayState({
        where: params,
        data: {
          ...data,

          flowState: data.flowState
            ? {
                connect: data.flowState,
              }
            : undefined,

          ssoProviders: {
            connect: data.ssoProviders,
          },
        },
        select: {
          createdAt: true,

          flowState: {
            select: {
              id: true,
            },
          },

          forEmail: true,
          id: true,
          redirectTo: true,
          requestId: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SamlRelayState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SamlRelayStateService", "deleteSamlRelayState")
  async deleteSamlRelayState(
    @common.Param() params: SamlRelayStateWhereUniqueInput
  ): Promise<SamlRelayState | null> {
    try {
      return await this.service.deleteSamlRelayState({
        where: params,
        select: {
          createdAt: true,

          flowState: {
            select: {
              id: true,
            },
          },

          forEmail: true,
          id: true,
          redirectTo: true,
          requestId: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
