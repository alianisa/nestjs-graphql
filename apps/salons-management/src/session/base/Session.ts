/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumSessionAal } from "./EnumSessionAal";
import {
  IsEnum,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { MfaAmrClaim } from "../../mfaAmrClaim/base/MfaAmrClaim";
import { RefreshToken } from "../../refreshToken/base/RefreshToken";
import { User } from "../../user/base/User";

@ObjectType()
class Session {
  @ApiProperty({
    required: false,
    enum: EnumSessionAal,
  })
  @IsEnum(EnumSessionAal)
  @IsOptional()
  @Field(() => EnumSessionAal, {
    nullable: true,
  })
  aal?: "aal1" | "aal2" | "aal3" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  factorId!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ip!: string | null;

  @ApiProperty({
    required: false,
    type: () => [MfaAmrClaim],
  })
  @ValidateNested()
  @Type(() => MfaAmrClaim)
  @IsOptional()
  mfaAmrClaims?: Array<MfaAmrClaim>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  notAfter!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [RefreshToken],
  })
  @ValidateNested()
  @Type(() => RefreshToken)
  @IsOptional()
  refreshTokens?: Array<RefreshToken>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  refreshedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tag!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  userAgent!: string | null;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  users?: User;
}

export { Session as Session };
