/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Salon as PrismaSalon,
  Attendance as PrismaAttendance,
  EmployeeDailyStat as PrismaEmployeeDailyStat,
  EmployeeStat as PrismaEmployeeStat,
  EmployeeTask as PrismaEmployeeTask,
  EmployeeWorkSchedule as PrismaEmployeeWorkSchedule,
  Order as PrismaOrder,
  Queue as PrismaQueue,
  SalonAccount as PrismaSalonAccount,
  SalonRatingLike as PrismaSalonRatingLike,
  SalonRating as PrismaSalonRating,
  SalonService as PrismaSalonService,
  TimeSlot as PrismaTimeSlot,
  UserAccount as PrismaUserAccount,
  UserFavoriteSalon as PrismaUserFavoriteSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SalonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SalonCountArgs, "select">): Promise<number> {
    return this.prisma.salon.count(args);
  }

  async salons(args: Prisma.SalonFindManyArgs): Promise<PrismaSalon[]> {
    return this.prisma.salon.findMany(args);
  }
  async salon(args: Prisma.SalonFindUniqueArgs): Promise<PrismaSalon | null> {
    return this.prisma.salon.findUnique(args);
  }
  async createSalon(args: Prisma.SalonCreateArgs): Promise<PrismaSalon> {
    return this.prisma.salon.create(args);
  }
  async updateSalon(args: Prisma.SalonUpdateArgs): Promise<PrismaSalon> {
    return this.prisma.salon.update(args);
  }
  async deleteSalon(args: Prisma.SalonDeleteArgs): Promise<PrismaSalon> {
    return this.prisma.salon.delete(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }

  async findEmployeeDailyStats(
    parentId: string,
    args: Prisma.EmployeeDailyStatFindManyArgs
  ): Promise<PrismaEmployeeDailyStat[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeDailyStats(args);
  }

  async findEmployeeStats(
    parentId: string,
    args: Prisma.EmployeeStatFindManyArgs
  ): Promise<PrismaEmployeeStat[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeStats(args);
  }

  async findEmployeeTasks(
    parentId: string,
    args: Prisma.EmployeeTaskFindManyArgs
  ): Promise<PrismaEmployeeTask[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasks(args);
  }

  async findEmployeeWorkSchedules(
    parentId: string,
    args: Prisma.EmployeeWorkScheduleFindManyArgs
  ): Promise<PrismaEmployeeWorkSchedule[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeWorkSchedules(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findQueues(
    parentId: string,
    args: Prisma.QueueFindManyArgs
  ): Promise<PrismaQueue[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queues(args);
  }

  async findSalonAccounts(
    parentId: string,
    args: Prisma.SalonAccountFindManyArgs
  ): Promise<PrismaSalonAccount[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonAccounts(args);
  }

  async findSalonRatingLikes(
    parentId: string,
    args: Prisma.SalonRatingLikeFindManyArgs
  ): Promise<PrismaSalonRatingLike[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingLikes(args);
  }

  async findSalonRatings(
    parentId: string,
    args: Prisma.SalonRatingFindManyArgs
  ): Promise<PrismaSalonRating[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatings(args);
  }

  async findSalonServices(
    parentId: string,
    args: Prisma.SalonServiceFindManyArgs
  ): Promise<PrismaSalonService[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonServices(args);
  }

  async findTimeSlots(
    parentId: string,
    args: Prisma.TimeSlotFindManyArgs
  ): Promise<PrismaTimeSlot[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeSlots(args);
  }

  async findUserAccounts(
    parentId: string,
    args: Prisma.UserAccountFindManyArgs
  ): Promise<PrismaUserAccount[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAccounts(args);
  }

  async findUserFavoriteSalons(
    parentId: string,
    args: Prisma.UserFavoriteSalonFindManyArgs
  ): Promise<PrismaUserFavoriteSalon[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userFavoriteSalons(args);
  }

  async findUserProfilesUserProfilesSalonIdTosalons(
    parentId: string,
    args: Prisma.UserProfileFindManyArgs
  ): Promise<PrismaUserProfile[]> {
    return this.prisma.salon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userProfilesUserProfilesSalonIdTosalons(args);
  }

  async getUserProfilesSalonsSalonAdminIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.salon
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesSalonsSalonAdminIdTouserProfiles();
  }
}
