/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsBoolean,
  IsOptional,
  IsString,
  MaxLength,
  ValidateNested,
  IsDate,
} from "class-validator";
import { Attendance } from "../../attendance/base/Attendance";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { Order } from "../../order/base/Order";
import { Queue } from "../../queue/base/Queue";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonService } from "../../salonService/base/SalonService";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserProfile } from "../../userProfile/base/UserProfile";

@ObjectType()
class Salon {
  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  active!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Attendance],
  })
  @ValidateNested()
  @Type(() => Attendance)
  @IsOptional()
  attendances?: Array<Attendance>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barbers!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  categories!: JsonValue;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  closeTime!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeDailyStat],
  })
  @ValidateNested()
  @Type(() => EmployeeDailyStat)
  @IsOptional()
  employeeDailyStats?: Array<EmployeeDailyStat>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeStat],
  })
  @ValidateNested()
  @Type(() => EmployeeStat)
  @IsOptional()
  employeeStats?: Array<EmployeeStat>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTask)
  @IsOptional()
  employeeTasks?: Array<EmployeeTask>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeWorkSchedule],
  })
  @ValidateNested()
  @Type(() => EmployeeWorkSchedule)
  @IsOptional()
  employeeWorkSchedules?: Array<EmployeeWorkSchedule>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  images!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  img!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  latLng!: JsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  location!: JsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  open!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  openTime!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [Order],
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  orders?: Array<Order>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  phone!: string;

  @ApiProperty({
    required: false,
    type: () => [Queue],
  })
  @ValidateNested()
  @Type(() => Queue)
  @IsOptional()
  queues?: Array<Queue>;

  @ApiProperty({
    required: false,
    type: () => [SalonAccount],
  })
  @ValidateNested()
  @Type(() => SalonAccount)
  @IsOptional()
  salonAccounts?: Array<SalonAccount>;

  @ApiProperty({
    required: false,
    type: () => [SalonRatingLike],
  })
  @ValidateNested()
  @Type(() => SalonRatingLike)
  @IsOptional()
  salonRatingLikes?: Array<SalonRatingLike>;

  @ApiProperty({
    required: false,
    type: () => [SalonRating],
  })
  @ValidateNested()
  @Type(() => SalonRating)
  @IsOptional()
  salonRatings?: Array<SalonRating>;

  @ApiProperty({
    required: false,
    type: () => [SalonService],
  })
  @ValidateNested()
  @Type(() => SalonService)
  @IsOptional()
  salonServices?: Array<SalonService>;

  @ApiProperty({
    required: false,
    type: () => [TimeSlot],
  })
  @ValidateNested()
  @Type(() => TimeSlot)
  @IsOptional()
  timeSlots?: Array<TimeSlot>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  timezone!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [UserAccount],
  })
  @ValidateNested()
  @Type(() => UserAccount)
  @IsOptional()
  userAccounts?: Array<UserAccount>;

  @ApiProperty({
    required: false,
    type: () => [UserFavoriteSalon],
  })
  @ValidateNested()
  @Type(() => UserFavoriteSalon)
  @IsOptional()
  userFavoriteSalons?: Array<UserFavoriteSalon>;

  @ApiProperty({
    required: false,
    type: () => UserProfile,
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfilesSalonsSalonAdminIdTouserProfiles?: UserProfile | null;

  @ApiProperty({
    required: false,
    type: () => [UserProfile],
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfilesUserProfilesSalonIdTosalons?: Array<UserProfile>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website!: string | null;
}

export { Salon as Salon };
