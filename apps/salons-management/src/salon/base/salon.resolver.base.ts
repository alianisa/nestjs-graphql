/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Salon } from "./Salon";
import { SalonService } from "../../salonService/base/SalonService";
import { SalonCountArgs } from "./SalonCountArgs";
import { SalonFindManyArgs } from "./SalonFindManyArgs";
import { SalonFindUniqueArgs } from "./SalonFindUniqueArgs";
import { CreateSalonArgs } from "./CreateSalonArgs";
import { UpdateSalonArgs } from "./UpdateSalonArgs";
import { DeleteSalonArgs } from "./DeleteSalonArgs";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { EmployeeDailyStatFindManyArgs } from "../../employeeDailyStat/base/EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeStatFindManyArgs } from "../../employeeStat/base/EmployeeStatFindManyArgs";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeWorkScheduleFindManyArgs } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { SalonAccountFindManyArgs } from "../../salonAccount/base/SalonAccountFindManyArgs";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingFindManyArgs } from "../../salonRating/base/SalonRatingFindManyArgs";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonServiceFindManyArgs } from "../../salonService/base/SalonServiceFindManyArgs";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserFavoriteSalonFindManyArgs } from "../../userFavoriteSalon/base/UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { SalonService } from "../salon.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Salon)
export class SalonResolverBase {
  constructor(
    protected readonly service: SalonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async _salonsMeta(
    @graphql.Args() args: SalonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Salon])
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async salons(@graphql.Args() args: SalonFindManyArgs): Promise<Salon[]> {
    return this.service.salons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Salon, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "own",
  })
  async salon(
    @graphql.Args() args: SalonFindUniqueArgs
  ): Promise<Salon | null> {
    const result = await this.service.salon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Salon)
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "create",
    possession: "any",
  })
  async createSalon(@graphql.Args() args: CreateSalonArgs): Promise<Salon> {
    return await this.service.createSalon({
      ...args,
      data: {
        ...args.data,

        userProfilesSalonsSalonAdminIdTouserProfiles: args.data
          .userProfilesSalonsSalonAdminIdTouserProfiles
          ? {
              connect: args.data.userProfilesSalonsSalonAdminIdTouserProfiles,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Salon)
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "update",
    possession: "any",
  })
  async updateSalon(
    @graphql.Args() args: UpdateSalonArgs
  ): Promise<Salon | null> {
    try {
      return await this.service.updateSalon({
        ...args,
        data: {
          ...args.data,

          userProfilesSalonsSalonAdminIdTouserProfiles: args.data
            .userProfilesSalonsSalonAdminIdTouserProfiles
            ? {
                connect: args.data.userProfilesSalonsSalonAdminIdTouserProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Salon)
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "delete",
    possession: "any",
  })
  async deleteSalon(
    @graphql.Args() args: DeleteSalonArgs
  ): Promise<Salon | null> {
    try {
      return await this.service.deleteSalon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attendance], { name: "attendances" })
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: AttendanceFindManyArgs
  ): Promise<Attendance[]> {
    const results = await this.service.findAttendances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeDailyStat], {
    name: "employeeDailyStats",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "read",
    possession: "any",
  })
  async findEmployeeDailyStats(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: EmployeeDailyStatFindManyArgs
  ): Promise<EmployeeDailyStat[]> {
    const results = await this.service.findEmployeeDailyStats(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeStat], { name: "employeeStats" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "read",
    possession: "any",
  })
  async findEmployeeStats(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: EmployeeStatFindManyArgs
  ): Promise<EmployeeStat[]> {
    const results = await this.service.findEmployeeStats(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeTask], { name: "employeeTasks" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "read",
    possession: "any",
  })
  async findEmployeeTasks(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: EmployeeTaskFindManyArgs
  ): Promise<EmployeeTask[]> {
    const results = await this.service.findEmployeeTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeWorkSchedule], {
    name: "employeeWorkSchedules",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "any",
  })
  async findEmployeeWorkSchedules(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: EmployeeWorkScheduleFindManyArgs
  ): Promise<EmployeeWorkSchedule[]> {
    const results = await this.service.findEmployeeWorkSchedules(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Queue], { name: "queues" })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async findQueues(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: QueueFindManyArgs
  ): Promise<Queue[]> {
    const results = await this.service.findQueues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonAccount], { name: "salonAccounts" })
  @nestAccessControl.UseRoles({
    resource: "SalonAccount",
    action: "read",
    possession: "any",
  })
  async findSalonAccounts(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: SalonAccountFindManyArgs
  ): Promise<SalonAccount[]> {
    const results = await this.service.findSalonAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRatingLike], { name: "salonRatingLikes" })
  @nestAccessControl.UseRoles({
    resource: "SalonRatingLike",
    action: "read",
    possession: "any",
  })
  async findSalonRatingLikes(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: SalonRatingLikeFindManyArgs
  ): Promise<SalonRatingLike[]> {
    const results = await this.service.findSalonRatingLikes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRating], { name: "salonRatings" })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "read",
    possession: "any",
  })
  async findSalonRatings(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: SalonRatingFindManyArgs
  ): Promise<SalonRating[]> {
    const results = await this.service.findSalonRatings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonService], { name: "salonServices" })
  @nestAccessControl.UseRoles({
    resource: "SalonService",
    action: "read",
    possession: "any",
  })
  async findSalonServices(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: SalonServiceFindManyArgs
  ): Promise<SalonService[]> {
    const results = await this.service.findSalonServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TimeSlot], { name: "timeSlots" })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async findTimeSlots(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    const results = await this.service.findTimeSlots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserAccount], { name: "userAccounts" })
  @nestAccessControl.UseRoles({
    resource: "UserAccount",
    action: "read",
    possession: "any",
  })
  async findUserAccounts(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: UserAccountFindManyArgs
  ): Promise<UserAccount[]> {
    const results = await this.service.findUserAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFavoriteSalon], {
    name: "userFavoriteSalons",
  })
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteSalon",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteSalons(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: UserFavoriteSalonFindManyArgs
  ): Promise<UserFavoriteSalon[]> {
    const results = await this.service.findUserFavoriteSalons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserProfile], {
    name: "userProfilesUserProfilesSalonIdTosalons",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async findUserProfilesUserProfilesSalonIdTosalons(
    @graphql.Parent() parent: Salon,
    @graphql.Args() args: UserProfileFindManyArgs
  ): Promise<UserProfile[]> {
    const results =
      await this.service.findUserProfilesUserProfilesSalonIdTosalons(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesSalonsSalonAdminIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfilesSalonsSalonAdminIdTouserProfiles(
    @graphql.Parent() parent: Salon
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesSalonsSalonAdminIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
