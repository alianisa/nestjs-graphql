/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SalonService } from "../salon.service";
import { SalonCreateInput } from "./SalonCreateInput";
import { SalonWhereInput } from "./SalonWhereInput";
import { SalonWhereUniqueInput } from "./SalonWhereUniqueInput";
import { SalonFindManyArgs } from "./SalonFindManyArgs";
import { SalonUpdateInput } from "./SalonUpdateInput";
import { Salon } from "./Salon";
import { SalonService } from "../../salonService/base/SalonService";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { EmployeeDailyStatFindManyArgs } from "../../employeeDailyStat/base/EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeDailyStatWhereUniqueInput } from "../../employeeDailyStat/base/EmployeeDailyStatWhereUniqueInput";
import { EmployeeStatFindManyArgs } from "../../employeeStat/base/EmployeeStatFindManyArgs";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeStatWhereUniqueInput } from "../../employeeStat/base/EmployeeStatWhereUniqueInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { EmployeeWorkScheduleFindManyArgs } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { EmployeeWorkScheduleWhereUniqueInput } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { SalonAccountFindManyArgs } from "../../salonAccount/base/SalonAccountFindManyArgs";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonAccountWhereUniqueInput } from "../../salonAccount/base/SalonAccountWhereUniqueInput";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingLikeWhereUniqueInput } from "../../salonRatingLike/base/SalonRatingLikeWhereUniqueInput";
import { SalonRatingFindManyArgs } from "../../salonRating/base/SalonRatingFindManyArgs";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonRatingWhereUniqueInput } from "../../salonRating/base/SalonRatingWhereUniqueInput";
import { SalonServiceFindManyArgs } from "../../salonService/base/SalonServiceFindManyArgs";
import { SalonServiceWhereUniqueInput } from "../../salonService/base/SalonServiceWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAccountWhereUniqueInput } from "../../userAccount/base/UserAccountWhereUniqueInput";
import { UserFavoriteSalonFindManyArgs } from "../../userFavoriteSalon/base/UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserFavoriteSalonWhereUniqueInput } from "../../userFavoriteSalon/base/UserFavoriteSalonWhereUniqueInput";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";

export class SalonGrpcControllerBase {
  constructor(protected readonly service: SalonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Salon })
  @GrpcMethod("SalonService", "createSalon")
  async createSalon(@common.Body() data: SalonCreateInput): Promise<Salon> {
    return await this.service.createSalon({
      data: {
        ...data,

        userProfilesSalonsSalonAdminIdTouserProfiles:
          data.userProfilesSalonsSalonAdminIdTouserProfiles
            ? {
                connect: data.userProfilesSalonsSalonAdminIdTouserProfiles,
              }
            : undefined,
      },
      select: {
        active: true,
        address: true,
        barbers: true,
        categories: true,
        closeTime: true,
        createdAt: true,
        description: true,
        email: true,
        id: true,
        images: true,
        img: true,
        latLng: true,
        location: true,
        logo: true,
        name: true,
        open: true,
        openTime: true,
        phone: true,
        timezone: true,
        updatedAt: true,

        userProfilesSalonsSalonAdminIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Salon] })
  @ApiNestedQuery(SalonFindManyArgs)
  @GrpcMethod("SalonService", "salons")
  async salons(@common.Req() request: Request): Promise<Salon[]> {
    const args = plainToClass(SalonFindManyArgs, request.query);
    return this.service.salons({
      ...args,
      select: {
        active: true,
        address: true,
        barbers: true,
        categories: true,
        closeTime: true,
        createdAt: true,
        description: true,
        email: true,
        id: true,
        images: true,
        img: true,
        latLng: true,
        location: true,
        logo: true,
        name: true,
        open: true,
        openTime: true,
        phone: true,
        timezone: true,
        updatedAt: true,

        userProfilesSalonsSalonAdminIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Salon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonService", "salon")
  async salon(
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<Salon | null> {
    const result = await this.service.salon({
      where: params,
      select: {
        active: true,
        address: true,
        barbers: true,
        categories: true,
        closeTime: true,
        createdAt: true,
        description: true,
        email: true,
        id: true,
        images: true,
        img: true,
        latLng: true,
        location: true,
        logo: true,
        name: true,
        open: true,
        openTime: true,
        phone: true,
        timezone: true,
        updatedAt: true,

        userProfilesSalonsSalonAdminIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Salon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonService", "updateSalon")
  async updateSalon(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() data: SalonUpdateInput
  ): Promise<Salon | null> {
    try {
      return await this.service.updateSalon({
        where: params,
        data: {
          ...data,

          userProfilesSalonsSalonAdminIdTouserProfiles:
            data.userProfilesSalonsSalonAdminIdTouserProfiles
              ? {
                  connect: data.userProfilesSalonsSalonAdminIdTouserProfiles,
                }
              : undefined,
        },
        select: {
          active: true,
          address: true,
          barbers: true,
          categories: true,
          closeTime: true,
          createdAt: true,
          description: true,
          email: true,
          id: true,
          images: true,
          img: true,
          latLng: true,
          location: true,
          logo: true,
          name: true,
          open: true,
          openTime: true,
          phone: true,
          timezone: true,
          updatedAt: true,

          userProfilesSalonsSalonAdminIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Salon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonService", "deleteSalon")
  async deleteSalon(
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<Salon | null> {
    try {
      return await this.service.deleteSalon({
        where: params,
        select: {
          active: true,
          address: true,
          barbers: true,
          categories: true,
          closeTime: true,
          createdAt: true,
          description: true,
          email: true,
          id: true,
          images: true,
          img: true,
          latLng: true,
          location: true,
          logo: true,
          name: true,
          open: true,
          openTime: true,
          phone: true,
          timezone: true,
          updatedAt: true,

          userProfilesSalonsSalonAdminIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  @GrpcMethod("SalonService", "findManyAttendances")
  async findManyAttendances(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        action: true,
        actionTime: true,
        clockin: true,
        clockout: true,
        completed: true,
        createdAt: true,
        date: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  @GrpcMethod("SalonService", "connectAttendances")
  async connectAttendances(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  @GrpcMethod("SalonService", "updateAttendances")
  async updateAttendances(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  @GrpcMethod("SalonService", "disconnectAttendances")
  async disconnectAttendances(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeDailyStats")
  @ApiNestedQuery(EmployeeDailyStatFindManyArgs)
  @GrpcMethod("SalonService", "findManyEmployeeDailyStats")
  async findManyEmployeeDailyStats(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<EmployeeDailyStat[]> {
    const query = plainToClass(EmployeeDailyStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeDailyStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeDailyStats")
  @GrpcMethod("SalonService", "connectEmployeeDailyStats")
  async connectEmployeeDailyStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeDailyStats")
  @GrpcMethod("SalonService", "updateEmployeeDailyStats")
  async updateEmployeeDailyStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeDailyStats")
  @GrpcMethod("SalonService", "disconnectEmployeeDailyStats")
  async disconnectEmployeeDailyStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeStats")
  @ApiNestedQuery(EmployeeStatFindManyArgs)
  @GrpcMethod("SalonService", "findManyEmployeeStats")
  async findManyEmployeeStats(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<EmployeeStat[]> {
    const query = plainToClass(EmployeeStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageOrderDuration: true,
        averageRating: true,
        averageServiceTime: true,
        canceledOrdersCount: true,
        cardPaymentsAmount: true,
        cashPaymentsAmount: true,
        consistencyScore: true,
        conversionRate: true,
        createdAt: true,
        currentMonthOrders: true,
        currentMonthRevenue: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyScore: true,
        efficiencyTrend: true,
        executionRate: true,
        fillRate: true,
        id: true,
        lastOrderAt: true,
        negativeReviews: true,
        ordersChangePercent: true,
        ordersGrowthRate: true,
        ordersPerDay: true,
        ordersTrend: true,
        overtimeCount: true,
        peakHoursOrders: true,
        peakPerformanceRate: true,
        performanceChangePercent: true,
        performanceScore: true,
        performanceTrend: true,
        positiveReviews: true,
        prevMonthEfficiencyRate: true,
        prevMonthPerformanceScore: true,
        prevMonthTotalOrders: true,
        prevMonthTotalRevenue: true,
        previousMonthOrders: true,
        previousMonthRevenue: true,
        qualityScore: true,
        rating: true,
        ratingChangePercent: true,
        ratingTrend: true,
        revenueChangePercent: true,
        revenueGrowthRate: true,
        revenuePerHour: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        servicesChangePercent: true,
        servicesGrowthRate: true,
        servicesPerHour: true,
        servicesTrend: true,
        totalDowntimeHours: true,
        totalExecutionTime: true,
        totalIdleTime: true,
        totalOrders: true,
        totalRatings: true,
        totalRevenue: true,
        totalServices: true,
        totalWorkTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        utilizationRate: true,
        workloadPercentage: true,
        yearToDateOrders: true,
        yearToDateRevenue: true,
        yearToDateServices: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeStats")
  @GrpcMethod("SalonService", "connectEmployeeStats")
  async connectEmployeeStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeStats")
  @GrpcMethod("SalonService", "updateEmployeeStats")
  async updateEmployeeStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeStats")
  @GrpcMethod("SalonService", "disconnectEmployeeStats")
  async disconnectEmployeeStats(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  @GrpcMethod("SalonService", "findManyEmployeeTasks")
  async findManyEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  @GrpcMethod("SalonService", "connectEmployeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  @GrpcMethod("SalonService", "updateEmployeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  @GrpcMethod("SalonService", "disconnectEmployeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeWorkSchedules")
  @ApiNestedQuery(EmployeeWorkScheduleFindManyArgs)
  @GrpcMethod("SalonService", "findManyEmployeeWorkSchedules")
  async findManyEmployeeWorkSchedules(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<EmployeeWorkSchedule[]> {
    const query = plainToClass(EmployeeWorkScheduleFindManyArgs, request.query);
    const results = await this.service.findEmployeeWorkSchedules(params.id, {
      ...query,
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeWorkSchedules")
  @GrpcMethod("SalonService", "connectEmployeeWorkSchedules")
  async connectEmployeeWorkSchedules(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeWorkSchedules")
  @GrpcMethod("SalonService", "updateEmployeeWorkSchedules")
  async updateEmployeeWorkSchedules(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeWorkSchedules")
  @GrpcMethod("SalonService", "disconnectEmployeeWorkSchedules")
  async disconnectEmployeeWorkSchedules(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  @GrpcMethod("SalonService", "findManyOrders")
  async findManyOrders(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        amount: true,

        appointmentsOrdersAppointmentIdToappointments: {
          select: {
            id: true,
          },
        },

        canceled: true,
        canceledReason: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        depositAmount: true,
        discount: true,
        discountAmount: true,

        discounts: {
          select: {
            id: true,
          },
        },

        id: true,
        loyaltyPointsEarned: true,
        loyaltyPointsUsed: true,
        orderImageId: true,
        orderNumber: true,
        order_type: true,

        payments: {
          select: {
            id: true,
          },
        },

        promocodes: {
          select: {
            id: true,
          },
        },

        queuesOrdersQueueIdToqueues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        services: true,
        started: true,
        startedAt: true,
        status: true,
        totalAmount: true,
        updatedAt: true,

        userProfilesOrdersEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesOrdersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  @GrpcMethod("SalonService", "connectOrders")
  async connectOrders(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  @GrpcMethod("SalonService", "updateOrders")
  async updateOrders(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  @GrpcMethod("SalonService", "disconnectOrders")
  async disconnectOrders(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queues")
  @ApiNestedQuery(QueueFindManyArgs)
  @GrpcMethod("SalonService", "findManyQueues")
  async findManyQueues(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueues(params.id, {
      ...query,
      select: {
        completed: true,
        completedAt: true,
        createdAt: true,
        estimatedWaitTime: true,
        id: true,

        ordersQueuesOrderIdToorders: {
          select: {
            id: true,
          },
        },

        queueNumber: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfilesQueuesEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesQueuesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queues")
  @GrpcMethod("SalonService", "connectQueues")
  async connectQueues(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queues")
  @GrpcMethod("SalonService", "updateQueues")
  async updateQueues(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queues")
  @GrpcMethod("SalonService", "disconnectQueues")
  async disconnectQueues(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonAccounts")
  @ApiNestedQuery(SalonAccountFindManyArgs)
  @GrpcMethod("SalonService", "findManySalonAccounts")
  async findManySalonAccounts(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<SalonAccount[]> {
    const query = plainToClass(SalonAccountFindManyArgs, request.query);
    const results = await this.service.findSalonAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonAccounts")
  @GrpcMethod("SalonService", "connectSalonAccounts")
  async connectSalonAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonAccounts")
  @GrpcMethod("SalonService", "updateSalonAccounts")
  async updateSalonAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonAccounts")
  @GrpcMethod("SalonService", "disconnectSalonAccounts")
  async disconnectSalonAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingLikes")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  @GrpcMethod("SalonService", "findManySalonRatingLikes")
  async findManySalonRatingLikes(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results = await this.service.findSalonRatingLikes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        review: true,

        salonRatings: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikes")
  @GrpcMethod("SalonService", "connectSalonRatingLikes")
  async connectSalonRatingLikes(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikes")
  @GrpcMethod("SalonService", "updateSalonRatingLikes")
  async updateSalonRatingLikes(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikes")
  @GrpcMethod("SalonService", "disconnectSalonRatingLikes")
  async disconnectSalonRatingLikes(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatings")
  @ApiNestedQuery(SalonRatingFindManyArgs)
  @GrpcMethod("SalonService", "findManySalonRatings")
  async findManySalonRatings(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<SalonRating[]> {
    const query = plainToClass(SalonRatingFindManyArgs, request.query);
    const results = await this.service.findSalonRatings(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        review: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatings")
  @GrpcMethod("SalonService", "connectSalonRatings")
  async connectSalonRatings(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatings: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatings")
  @GrpcMethod("SalonService", "updateSalonRatings")
  async updateSalonRatings(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatings: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatings")
  @GrpcMethod("SalonService", "disconnectSalonRatings")
  async disconnectSalonRatings(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatings: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonServices")
  @ApiNestedQuery(SalonServiceFindManyArgs)
  @GrpcMethod("SalonService", "findManySalonServices")
  async findManySalonServices(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<SalonService[]> {
    const query = plainToClass(SalonServiceFindManyArgs, request.query);
    const results = await this.service.findSalonServices(params.id, {
      ...query,
      select: {
        description: true,
        duration: true,
        id: true,
        img: true,
        name: true,
        price: true,

        salonServiceCategories: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonServices")
  @GrpcMethod("SalonService", "connectSalonServices")
  async connectSalonServices(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonServices")
  @GrpcMethod("SalonService", "updateSalonServices")
  async updateSalonServices(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonServices")
  @GrpcMethod("SalonService", "disconnectSalonServices")
  async disconnectSalonServices(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlots")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  @GrpcMethod("SalonService", "findManyTimeSlots")
  async findManyTimeSlots(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlots(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlots")
  @GrpcMethod("SalonService", "connectTimeSlots")
  async connectTimeSlots(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlots")
  @GrpcMethod("SalonService", "updateTimeSlots")
  async updateTimeSlots(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlots")
  @GrpcMethod("SalonService", "disconnectTimeSlots")
  async disconnectTimeSlots(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAccounts")
  @ApiNestedQuery(UserAccountFindManyArgs)
  @GrpcMethod("SalonService", "findManyUserAccounts")
  async findManyUserAccounts(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<UserAccount[]> {
    const query = plainToClass(UserAccountFindManyArgs, request.query);
    const results = await this.service.findUserAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAccounts")
  @GrpcMethod("SalonService", "connectUserAccounts")
  async connectUserAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAccounts")
  @GrpcMethod("SalonService", "updateUserAccounts")
  async updateUserAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAccounts")
  @GrpcMethod("SalonService", "disconnectUserAccounts")
  async disconnectUserAccounts(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userFavoriteSalons")
  @ApiNestedQuery(UserFavoriteSalonFindManyArgs)
  @GrpcMethod("SalonService", "findManyUserFavoriteSalons")
  async findManyUserFavoriteSalons(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<UserFavoriteSalon[]> {
    const query = plainToClass(UserFavoriteSalonFindManyArgs, request.query);
    const results = await this.service.findUserFavoriteSalons(params.id, {
      ...query,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userFavoriteSalons")
  @GrpcMethod("SalonService", "connectUserFavoriteSalons")
  async connectUserFavoriteSalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userFavoriteSalons")
  @GrpcMethod("SalonService", "updateUserFavoriteSalons")
  async updateUserFavoriteSalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userFavoriteSalons")
  @GrpcMethod("SalonService", "disconnectUserFavoriteSalons")
  async disconnectUserFavoriteSalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userProfilesUserProfilesSalonIdTosalons")
  @ApiNestedQuery(UserProfileFindManyArgs)
  @GrpcMethod("SalonService", "findManyUserProfilesUserProfilesSalonIdTosalons")
  async findManyUserProfilesUserProfilesSalonIdTosalons(
    @common.Req() request: Request,
    @common.Param() params: SalonWhereUniqueInput
  ): Promise<UserProfile[]> {
    const query = plainToClass(UserProfileFindManyArgs, request.query);
    const results =
      await this.service.findUserProfilesUserProfilesSalonIdTosalons(
        params.id,
        {
          ...query,
          select: {
            avatarUrl: true,
            bio: true,
            createdAt: true,
            dateOfBirth: true,
            deletedAt: true,
            email: true,
            employeeDismissalAt: true,
            employeeEmploymentAt: true,
            firstName: true,
            fullName: true,
            fullRegistered: true,
            hiredDate: true,
            id: true,
            isAdmin: true,
            isBarber: true,
            isEmployee: true,
            jobTitle: true,
            lastName: true,
            location: true,
            loyaltyPoints: true,
            phone: true,

            salonsUserProfilesSalonIdTosalons: {
              select: {
                id: true,
              },
            },

            updatedAt: true,

            user: {
              select: {
                id: true,
              },
            },

            userGenders: {
              select: {
                id: true,
              },
            },

            userNotificationSettings: {
              select: {
                id: true,
              },
            },

            website: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userProfilesUserProfilesSalonIdTosalons")
  @GrpcMethod("SalonService", "connectUserProfilesUserProfilesSalonIdTosalons")
  async connectUserProfilesUserProfilesSalonIdTosalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfilesUserProfilesSalonIdTosalons: {
        connect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userProfilesUserProfilesSalonIdTosalons")
  @GrpcMethod("SalonService", "updateUserProfilesUserProfilesSalonIdTosalons")
  async updateUserProfilesUserProfilesSalonIdTosalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfilesUserProfilesSalonIdTosalons: {
        set: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userProfilesUserProfilesSalonIdTosalons")
  @GrpcMethod(
    "SalonService",
    "disconnectUserProfilesUserProfilesSalonIdTosalons"
  )
  async disconnectUserProfilesUserProfilesSalonIdTosalons(
    @common.Param() params: SalonWhereUniqueInput,
    @common.Body() body: UserProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProfilesUserProfilesSalonIdTosalons: {
        disconnect: body,
      },
    };
    await this.service.updateSalon({
      where: params,
      data,
      select: { id: true },
    });
  }
}
