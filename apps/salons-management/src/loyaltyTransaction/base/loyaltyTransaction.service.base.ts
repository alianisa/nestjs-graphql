/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LoyaltyTransaction as PrismaLoyaltyTransaction,
  Order as PrismaOrder,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class LoyaltyTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoyaltyTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loyaltyTransaction.count(args);
  }

  async loyaltyTransactions(
    args: Prisma.LoyaltyTransactionFindManyArgs
  ): Promise<PrismaLoyaltyTransaction[]> {
    return this.prisma.loyaltyTransaction.findMany(args);
  }
  async loyaltyTransaction(
    args: Prisma.LoyaltyTransactionFindUniqueArgs
  ): Promise<PrismaLoyaltyTransaction | null> {
    return this.prisma.loyaltyTransaction.findUnique(args);
  }
  async createLoyaltyTransaction(
    args: Prisma.LoyaltyTransactionCreateArgs
  ): Promise<PrismaLoyaltyTransaction> {
    return this.prisma.loyaltyTransaction.create(args);
  }
  async updateLoyaltyTransaction(
    args: Prisma.LoyaltyTransactionUpdateArgs
  ): Promise<PrismaLoyaltyTransaction> {
    return this.prisma.loyaltyTransaction.update(args);
  }
  async deleteLoyaltyTransaction(
    args: Prisma.LoyaltyTransactionDeleteArgs
  ): Promise<PrismaLoyaltyTransaction> {
    return this.prisma.loyaltyTransaction.delete(args);
  }

  async getOrders(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.loyaltyTransaction
      .findUnique({
        where: { id: parentId },
      })
      .orders();
  }

  async getUserProfiles(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.loyaltyTransaction
      .findUnique({
        where: { id: parentId },
      })
      .userProfiles();
  }
}
