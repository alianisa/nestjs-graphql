/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LoyaltyTransactionService } from "../loyaltyTransaction.service";
import { LoyaltyTransactionCreateInput } from "./LoyaltyTransactionCreateInput";
import { LoyaltyTransactionWhereInput } from "./LoyaltyTransactionWhereInput";
import { LoyaltyTransactionWhereUniqueInput } from "./LoyaltyTransactionWhereUniqueInput";
import { LoyaltyTransactionFindManyArgs } from "./LoyaltyTransactionFindManyArgs";
import { LoyaltyTransactionUpdateInput } from "./LoyaltyTransactionUpdateInput";
import { LoyaltyTransaction } from "./LoyaltyTransaction";

export class LoyaltyTransactionGrpcControllerBase {
  constructor(protected readonly service: LoyaltyTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LoyaltyTransaction })
  @GrpcMethod("LoyaltyTransactionService", "createLoyaltyTransaction")
  async createLoyaltyTransaction(
    @common.Body() data: LoyaltyTransactionCreateInput
  ): Promise<LoyaltyTransaction> {
    return await this.service.createLoyaltyTransaction({
      data: {
        ...data,

        orders: data.orders
          ? {
              connect: data.orders,
            }
          : undefined,

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LoyaltyTransaction] })
  @ApiNestedQuery(LoyaltyTransactionFindManyArgs)
  @GrpcMethod("LoyaltyTransactionService", "loyaltyTransactions")
  async loyaltyTransactions(
    @common.Req() request: Request
  ): Promise<LoyaltyTransaction[]> {
    const args = plainToClass(LoyaltyTransactionFindManyArgs, request.query);
    return this.service.loyaltyTransactions({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LoyaltyTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LoyaltyTransactionService", "loyaltyTransaction")
  async loyaltyTransaction(
    @common.Param() params: LoyaltyTransactionWhereUniqueInput
  ): Promise<LoyaltyTransaction | null> {
    const result = await this.service.loyaltyTransaction({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LoyaltyTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LoyaltyTransactionService", "updateLoyaltyTransaction")
  async updateLoyaltyTransaction(
    @common.Param() params: LoyaltyTransactionWhereUniqueInput,
    @common.Body() data: LoyaltyTransactionUpdateInput
  ): Promise<LoyaltyTransaction | null> {
    try {
      return await this.service.updateLoyaltyTransaction({
        where: params,
        data: {
          ...data,

          orders: data.orders
            ? {
                connect: data.orders,
              }
            : undefined,

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          orders: {
            select: {
              id: true,
            },
          },

          pointsEarned: true,
          pointsSpent: true,
          transactionType: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LoyaltyTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LoyaltyTransactionService", "deleteLoyaltyTransaction")
  async deleteLoyaltyTransaction(
    @common.Param() params: LoyaltyTransactionWhereUniqueInput
  ): Promise<LoyaltyTransaction | null> {
    try {
      return await this.service.deleteLoyaltyTransaction({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          orders: {
            select: {
              id: true,
            },
          },

          pointsEarned: true,
          pointsSpent: true,
          transactionType: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
