/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LoyaltyTransaction } from "./LoyaltyTransaction";
import { LoyaltyTransactionCountArgs } from "./LoyaltyTransactionCountArgs";
import { LoyaltyTransactionFindManyArgs } from "./LoyaltyTransactionFindManyArgs";
import { LoyaltyTransactionFindUniqueArgs } from "./LoyaltyTransactionFindUniqueArgs";
import { CreateLoyaltyTransactionArgs } from "./CreateLoyaltyTransactionArgs";
import { UpdateLoyaltyTransactionArgs } from "./UpdateLoyaltyTransactionArgs";
import { DeleteLoyaltyTransactionArgs } from "./DeleteLoyaltyTransactionArgs";
import { Order } from "../../order/base/Order";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { LoyaltyTransactionService } from "../loyaltyTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LoyaltyTransaction)
export class LoyaltyTransactionResolverBase {
  constructor(
    protected readonly service: LoyaltyTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "read",
    possession: "any",
  })
  async _loyaltyTransactionsMeta(
    @graphql.Args() args: LoyaltyTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LoyaltyTransaction])
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "read",
    possession: "any",
  })
  async loyaltyTransactions(
    @graphql.Args() args: LoyaltyTransactionFindManyArgs
  ): Promise<LoyaltyTransaction[]> {
    return this.service.loyaltyTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LoyaltyTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "read",
    possession: "own",
  })
  async loyaltyTransaction(
    @graphql.Args() args: LoyaltyTransactionFindUniqueArgs
  ): Promise<LoyaltyTransaction | null> {
    const result = await this.service.loyaltyTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoyaltyTransaction)
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "create",
    possession: "any",
  })
  async createLoyaltyTransaction(
    @graphql.Args() args: CreateLoyaltyTransactionArgs
  ): Promise<LoyaltyTransaction> {
    return await this.service.createLoyaltyTransaction({
      ...args,
      data: {
        ...args.data,

        orders: args.data.orders
          ? {
              connect: args.data.orders,
            }
          : undefined,

        userProfiles: args.data.userProfiles
          ? {
              connect: args.data.userProfiles,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoyaltyTransaction)
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "update",
    possession: "any",
  })
  async updateLoyaltyTransaction(
    @graphql.Args() args: UpdateLoyaltyTransactionArgs
  ): Promise<LoyaltyTransaction | null> {
    try {
      return await this.service.updateLoyaltyTransaction({
        ...args,
        data: {
          ...args.data,

          orders: args.data.orders
            ? {
                connect: args.data.orders,
              }
            : undefined,

          userProfiles: args.data.userProfiles
            ? {
                connect: args.data.userProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoyaltyTransaction)
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteLoyaltyTransaction(
    @graphql.Args() args: DeleteLoyaltyTransactionArgs
  ): Promise<LoyaltyTransaction | null> {
    try {
      return await this.service.deleteLoyaltyTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orders",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrders(
    @graphql.Parent() parent: LoyaltyTransaction
  ): Promise<Order | null> {
    const result = await this.service.getOrders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: LoyaltyTransaction
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
