/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalonAccountService } from "../salonAccount.service";
import { SalonAccountCreateInput } from "./SalonAccountCreateInput";
import { SalonAccount } from "./SalonAccount";
import { SalonAccountFindManyArgs } from "./SalonAccountFindManyArgs";
import { SalonAccountWhereUniqueInput } from "./SalonAccountWhereUniqueInput";
import { SalonAccountUpdateInput } from "./SalonAccountUpdateInput";

export class SalonAccountControllerBase {
  constructor(protected readonly service: SalonAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonAccount })
  async createSalonAccount(
    @common.Body() data: SalonAccountCreateInput
  ): Promise<SalonAccount> {
    return await this.service.createSalonAccount({
      data: {
        ...data,

        salons: data.salons
          ? {
              connect: data.salons,
            }
          : undefined,

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonAccount] })
  @ApiNestedQuery(SalonAccountFindManyArgs)
  async salonAccounts(@common.Req() request: Request): Promise<SalonAccount[]> {
    const args = plainToClass(SalonAccountFindManyArgs, request.query);
    return this.service.salonAccounts({
      ...args,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salonAccount(
    @common.Param() params: SalonAccountWhereUniqueInput
  ): Promise<SalonAccount | null> {
    const result = await this.service.salonAccount({
      where: params,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalonAccount(
    @common.Param() params: SalonAccountWhereUniqueInput,
    @common.Body() data: SalonAccountUpdateInput
  ): Promise<SalonAccount | null> {
    try {
      return await this.service.updateSalonAccount({
        where: params,
        data: {
          ...data,

          salons: data.salons
            ? {
                connect: data.salons,
              }
            : undefined,

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,
          numberField: true,

          salons: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalonAccount(
    @common.Param() params: SalonAccountWhereUniqueInput
  ): Promise<SalonAccount | null> {
    try {
      return await this.service.deleteSalonAccount({
        where: params,
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,
          numberField: true,

          salons: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
