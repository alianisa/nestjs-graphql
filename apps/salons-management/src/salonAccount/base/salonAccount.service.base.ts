/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalonAccount as PrismaSalonAccount,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SalonAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalonAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salonAccount.count(args);
  }

  async salonAccounts(
    args: Prisma.SalonAccountFindManyArgs
  ): Promise<PrismaSalonAccount[]> {
    return this.prisma.salonAccount.findMany(args);
  }
  async salonAccount(
    args: Prisma.SalonAccountFindUniqueArgs
  ): Promise<PrismaSalonAccount | null> {
    return this.prisma.salonAccount.findUnique(args);
  }
  async createSalonAccount(
    args: Prisma.SalonAccountCreateArgs
  ): Promise<PrismaSalonAccount> {
    return this.prisma.salonAccount.create(args);
  }
  async updateSalonAccount(
    args: Prisma.SalonAccountUpdateArgs
  ): Promise<PrismaSalonAccount> {
    return this.prisma.salonAccount.update(args);
  }
  async deleteSalonAccount(
    args: Prisma.SalonAccountDeleteArgs
  ): Promise<PrismaSalonAccount> {
    return this.prisma.salonAccount.delete(args);
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.salonAccount
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfiles(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.salonAccount
      .findUnique({
        where: { id: parentId },
      })
      .userProfiles();
  }
}
