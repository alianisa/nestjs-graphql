/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SsoProvider } from "./SsoProvider";
import { SsoProviderCountArgs } from "./SsoProviderCountArgs";
import { SsoProviderFindManyArgs } from "./SsoProviderFindManyArgs";
import { SsoProviderFindUniqueArgs } from "./SsoProviderFindUniqueArgs";
import { CreateSsoProviderArgs } from "./CreateSsoProviderArgs";
import { UpdateSsoProviderArgs } from "./UpdateSsoProviderArgs";
import { DeleteSsoProviderArgs } from "./DeleteSsoProviderArgs";
import { SamlProviderFindManyArgs } from "../../samlProvider/base/SamlProviderFindManyArgs";
import { SamlProvider } from "../../samlProvider/base/SamlProvider";
import { SamlRelayStateFindManyArgs } from "../../samlRelayState/base/SamlRelayStateFindManyArgs";
import { SamlRelayState } from "../../samlRelayState/base/SamlRelayState";
import { SsoDomainFindManyArgs } from "../../ssoDomain/base/SsoDomainFindManyArgs";
import { SsoDomain } from "../../ssoDomain/base/SsoDomain";
import { SsoProviderService } from "../ssoProvider.service";
@graphql.Resolver(() => SsoProvider)
export class SsoProviderResolverBase {
  constructor(protected readonly service: SsoProviderService) {}

  async _ssoProvidersMeta(
    @graphql.Args() args: SsoProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SsoProvider])
  async ssoProviders(
    @graphql.Args() args: SsoProviderFindManyArgs
  ): Promise<SsoProvider[]> {
    return this.service.ssoProviders(args);
  }

  @graphql.Query(() => SsoProvider, { nullable: true })
  async ssoProvider(
    @graphql.Args() args: SsoProviderFindUniqueArgs
  ): Promise<SsoProvider | null> {
    const result = await this.service.ssoProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SsoProvider)
  async createSsoProvider(
    @graphql.Args() args: CreateSsoProviderArgs
  ): Promise<SsoProvider> {
    return await this.service.createSsoProvider({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SsoProvider)
  async updateSsoProvider(
    @graphql.Args() args: UpdateSsoProviderArgs
  ): Promise<SsoProvider | null> {
    try {
      return await this.service.updateSsoProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SsoProvider)
  async deleteSsoProvider(
    @graphql.Args() args: DeleteSsoProviderArgs
  ): Promise<SsoProvider | null> {
    try {
      return await this.service.deleteSsoProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SamlProvider], { name: "samlProviders" })
  async findSamlProviders(
    @graphql.Parent() parent: SsoProvider,
    @graphql.Args() args: SamlProviderFindManyArgs
  ): Promise<SamlProvider[]> {
    const results = await this.service.findSamlProviders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SamlRelayState], { name: "samlRelayStates" })
  async findSamlRelayStates(
    @graphql.Parent() parent: SsoProvider,
    @graphql.Args() args: SamlRelayStateFindManyArgs
  ): Promise<SamlRelayState[]> {
    const results = await this.service.findSamlRelayStates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SsoDomain], { name: "ssoDomains" })
  async findSsoDomains(
    @graphql.Parent() parent: SsoProvider,
    @graphql.Args() args: SsoDomainFindManyArgs
  ): Promise<SsoDomain[]> {
    const results = await this.service.findSsoDomains(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
