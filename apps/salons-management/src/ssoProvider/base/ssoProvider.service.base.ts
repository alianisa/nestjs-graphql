/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SsoProvider as PrismaSsoProvider,
  SamlProvider as PrismaSamlProvider,
  SamlRelayState as PrismaSamlRelayState,
  SsoDomain as PrismaSsoDomain,
} from "@prisma/client";

export class SsoProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SsoProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ssoProvider.count(args);
  }

  async ssoProviders(
    args: Prisma.SsoProviderFindManyArgs
  ): Promise<PrismaSsoProvider[]> {
    return this.prisma.ssoProvider.findMany(args);
  }
  async ssoProvider(
    args: Prisma.SsoProviderFindUniqueArgs
  ): Promise<PrismaSsoProvider | null> {
    return this.prisma.ssoProvider.findUnique(args);
  }
  async createSsoProvider(
    args: Prisma.SsoProviderCreateArgs
  ): Promise<PrismaSsoProvider> {
    return this.prisma.ssoProvider.create(args);
  }
  async updateSsoProvider(
    args: Prisma.SsoProviderUpdateArgs
  ): Promise<PrismaSsoProvider> {
    return this.prisma.ssoProvider.update(args);
  }
  async deleteSsoProvider(
    args: Prisma.SsoProviderDeleteArgs
  ): Promise<PrismaSsoProvider> {
    return this.prisma.ssoProvider.delete(args);
  }

  async findSamlProviders(
    parentId: string,
    args: Prisma.SamlProviderFindManyArgs
  ): Promise<PrismaSamlProvider[]> {
    return this.prisma.ssoProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .samlProviders(args);
  }

  async findSamlRelayStates(
    parentId: string,
    args: Prisma.SamlRelayStateFindManyArgs
  ): Promise<PrismaSamlRelayState[]> {
    return this.prisma.ssoProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .samlRelayStates(args);
  }

  async findSsoDomains(
    parentId: string,
    args: Prisma.SsoDomainFindManyArgs
  ): Promise<PrismaSsoDomain[]> {
    return this.prisma.ssoProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ssoDomains(args);
  }
}
