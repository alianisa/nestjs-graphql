/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentService } from "../payment.service";
import { PaymentCreateInput } from "./PaymentCreateInput";
import { Payment } from "./Payment";
import { PaymentFindManyArgs } from "./PaymentFindManyArgs";
import { PaymentWhereUniqueInput } from "./PaymentWhereUniqueInput";
import { PaymentUpdateInput } from "./PaymentUpdateInput";
import { DepositFindManyArgs } from "../../deposit/base/DepositFindManyArgs";
import { Deposit } from "../../deposit/base/Deposit";
import { DepositWhereUniqueInput } from "../../deposit/base/DepositWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class PaymentControllerBase {
  constructor(protected readonly service: PaymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Payment })
  async createPayment(
    @common.Body() data: PaymentCreateInput
  ): Promise<Payment> {
    return await this.service.createPayment({
      data: {
        ...data,

        mobilePaymentProviders: data.mobilePaymentProviders
          ? {
              connect: data.mobilePaymentProviders,
            }
          : undefined,
      },
      select: {
        amount: true,
        amountByCard: true,
        amountByCash: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        discountAmount: true,
        id: true,
        isPartial: true,

        mobilePaymentProviders: {
          select: {
            id: true,
          },
        },

        name: true,
        orderId: true,
        payment_method: true,
        status: true,
        tax: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Payment] })
  @ApiNestedQuery(PaymentFindManyArgs)
  async payments(@common.Req() request: Request): Promise<Payment[]> {
    const args = plainToClass(PaymentFindManyArgs, request.query);
    return this.service.payments({
      ...args,
      select: {
        amount: true,
        amountByCard: true,
        amountByCash: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        discountAmount: true,
        id: true,
        isPartial: true,

        mobilePaymentProviders: {
          select: {
            id: true,
          },
        },

        name: true,
        orderId: true,
        payment_method: true,
        status: true,
        tax: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Payment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payment(
    @common.Param() params: PaymentWhereUniqueInput
  ): Promise<Payment | null> {
    const result = await this.service.payment({
      where: params,
      select: {
        amount: true,
        amountByCard: true,
        amountByCash: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        discountAmount: true,
        id: true,
        isPartial: true,

        mobilePaymentProviders: {
          select: {
            id: true,
          },
        },

        name: true,
        orderId: true,
        payment_method: true,
        status: true,
        tax: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Payment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayment(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() data: PaymentUpdateInput
  ): Promise<Payment | null> {
    try {
      return await this.service.updatePayment({
        where: params,
        data: {
          ...data,

          mobilePaymentProviders: data.mobilePaymentProviders
            ? {
                connect: data.mobilePaymentProviders,
              }
            : undefined,
        },
        select: {
          amount: true,
          amountByCard: true,
          amountByCash: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          discountAmount: true,
          id: true,
          isPartial: true,

          mobilePaymentProviders: {
            select: {
              id: true,
            },
          },

          name: true,
          orderId: true,
          payment_method: true,
          status: true,
          tax: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Payment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayment(
    @common.Param() params: PaymentWhereUniqueInput
  ): Promise<Payment | null> {
    try {
      return await this.service.deletePayment({
        where: params,
        select: {
          amount: true,
          amountByCard: true,
          amountByCash: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          discountAmount: true,
          id: true,
          isPartial: true,

          mobilePaymentProviders: {
            select: {
              id: true,
            },
          },

          name: true,
          orderId: true,
          payment_method: true,
          status: true,
          tax: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/deposits")
  @ApiNestedQuery(DepositFindManyArgs)
  async findDeposits(
    @common.Req() request: Request,
    @common.Param() params: PaymentWhereUniqueInput
  ): Promise<Deposit[]> {
    const query = plainToClass(DepositFindManyArgs, request.query);
    const results = await this.service.findDeposits(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        payments: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deposits")
  async connectDeposits(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        connect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deposits")
  async updateDeposits(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        set: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deposits")
  async disconnectDeposits(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        disconnect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: PaymentWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        amount: true,

        appointmentsOrdersAppointmentIdToappointments: {
          select: {
            id: true,
          },
        },

        canceled: true,
        canceledReason: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        depositAmount: true,
        discount: true,
        discountAmount: true,

        discounts: {
          select: {
            id: true,
          },
        },

        id: true,
        loyaltyPointsEarned: true,
        loyaltyPointsUsed: true,
        orderImageId: true,
        orderNumber: true,
        order_type: true,

        payments: {
          select: {
            id: true,
          },
        },

        promocodes: {
          select: {
            id: true,
          },
        },

        queuesOrdersQueueIdToqueues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        services: true,
        started: true,
        startedAt: true,
        status: true,
        totalAmount: true,
        updatedAt: true,

        userProfilesOrdersEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesOrdersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: PaymentWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        errorMessage: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        payments: {
          select: {
            id: true,
          },
        },

        status: true,
        transactionType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: PaymentWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updatePayment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
