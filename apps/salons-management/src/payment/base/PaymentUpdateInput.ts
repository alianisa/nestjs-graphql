/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  IsOptional,
  IsBoolean,
  IsDate,
  ValidateNested,
  IsString,
  MaxLength,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { DepositUpdateManyWithoutPaymentsInput } from "./DepositUpdateManyWithoutPaymentsInput";
import { MobilePaymentProviderWhereUniqueInput } from "../../mobilePaymentProvider/base/MobilePaymentProviderWhereUniqueInput";
import { OrderUpdateManyWithoutPaymentsInput } from "./OrderUpdateManyWithoutPaymentsInput";
import { EnumPaymentPaymentMethod } from "./EnumPaymentPaymentMethod";
import { EnumPaymentStatus } from "./EnumPaymentStatus";
import { TransactionUpdateManyWithoutPaymentsInput } from "./TransactionUpdateManyWithoutPaymentsInput";

@InputType()
class PaymentUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount?: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amountByCard?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amountByCash?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completed?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => DepositUpdateManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => DepositUpdateManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => DepositUpdateManyWithoutPaymentsInput, {
    nullable: true,
  })
  deposits?: DepositUpdateManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPartial?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => MobilePaymentProviderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MobilePaymentProviderWhereUniqueInput)
  @IsOptional()
  @Field(() => MobilePaymentProviderWhereUniqueInput, {
    nullable: true,
  })
  mobilePaymentProviders?: MobilePaymentProviderWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  orderId?: string;

  @ApiProperty({
    required: false,
    type: () => OrderUpdateManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => OrderUpdateManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => OrderUpdateManyWithoutPaymentsInput, {
    nullable: true,
  })
  orders?: OrderUpdateManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    enum: EnumPaymentPaymentMethod,
  })
  @IsEnum(EnumPaymentPaymentMethod)
  @IsOptional()
  @Field(() => EnumPaymentPaymentMethod, {
    nullable: true,
  })
  payment_method?: "cash" | "card" | null;

  @ApiProperty({
    required: false,
    enum: EnumPaymentStatus,
  })
  @IsEnum(EnumPaymentStatus)
  @IsOptional()
  @Field(() => EnumPaymentStatus, {
    nullable: true,
  })
  status?:
    | "Pending"
    | "Completed"
    | "PartiallyPaid"
    | "Failed"
    | "Cancelled"
    | "Refunded"
    | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  tax?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutPaymentsInput, {
    nullable: true,
  })
  transactions?: TransactionUpdateManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { PaymentUpdateInput as PaymentUpdateInput };
