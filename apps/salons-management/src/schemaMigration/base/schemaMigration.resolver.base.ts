/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SchemaMigration } from "./SchemaMigration";
import { SchemaMigrationCountArgs } from "./SchemaMigrationCountArgs";
import { SchemaMigrationFindManyArgs } from "./SchemaMigrationFindManyArgs";
import { SchemaMigrationFindUniqueArgs } from "./SchemaMigrationFindUniqueArgs";
import { DeleteSchemaMigrationArgs } from "./DeleteSchemaMigrationArgs";
import { SchemaMigrationService } from "../schemaMigration.service";
@graphql.Resolver(() => SchemaMigration)
export class SchemaMigrationResolverBase {
  constructor(protected readonly service: SchemaMigrationService) {}

  async _schemaMigrationsMeta(
    @graphql.Args() args: SchemaMigrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SchemaMigration])
  async schemaMigrations(
    @graphql.Args() args: SchemaMigrationFindManyArgs
  ): Promise<SchemaMigration[]> {
    return this.service.schemaMigrations(args);
  }

  @graphql.Query(() => SchemaMigration, { nullable: true })
  async schemaMigration(
    @graphql.Args() args: SchemaMigrationFindUniqueArgs
  ): Promise<SchemaMigration | null> {
    const result = await this.service.schemaMigration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SchemaMigration)
  async deleteSchemaMigration(
    @graphql.Args() args: DeleteSchemaMigrationArgs
  ): Promise<SchemaMigration | null> {
    try {
      return await this.service.deleteSchemaMigration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
