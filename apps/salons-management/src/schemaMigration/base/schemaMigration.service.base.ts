/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SchemaMigration as PrismaSchemaMigration,
} from "@prisma/client";

export class SchemaMigrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SchemaMigrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.schemaMigration.count(args);
  }

  async schemaMigrations(
    args: Prisma.SchemaMigrationFindManyArgs
  ): Promise<PrismaSchemaMigration[]> {
    return this.prisma.schemaMigration.findMany(args);
  }
  async schemaMigration(
    args: Prisma.SchemaMigrationFindUniqueArgs
  ): Promise<PrismaSchemaMigration | null> {
    return this.prisma.schemaMigration.findUnique(args);
  }
  async createSchemaMigration(
    args: Prisma.SchemaMigrationCreateArgs
  ): Promise<PrismaSchemaMigration> {
    return this.prisma.schemaMigration.create(args);
  }
  async updateSchemaMigration(
    args: Prisma.SchemaMigrationUpdateArgs
  ): Promise<PrismaSchemaMigration> {
    return this.prisma.schemaMigration.update(args);
  }
  async deleteSchemaMigration(
    args: Prisma.SchemaMigrationDeleteArgs
  ): Promise<PrismaSchemaMigration> {
    return this.prisma.schemaMigration.delete(args);
  }
}
