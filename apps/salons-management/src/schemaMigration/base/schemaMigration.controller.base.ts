/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SchemaMigrationService } from "../schemaMigration.service";
import { SchemaMigrationCreateInput } from "./SchemaMigrationCreateInput";
import { SchemaMigration } from "./SchemaMigration";
import { SchemaMigrationFindManyArgs } from "./SchemaMigrationFindManyArgs";
import { SchemaMigrationWhereUniqueInput } from "./SchemaMigrationWhereUniqueInput";
import { SchemaMigrationUpdateInput } from "./SchemaMigrationUpdateInput";

export class SchemaMigrationControllerBase {
  constructor(protected readonly service: SchemaMigrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SchemaMigration })
  async createSchemaMigration(
    @common.Body() data: SchemaMigrationCreateInput
  ): Promise<SchemaMigration> {
    return await this.service.createSchemaMigration({
      data: data,
      select: {
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SchemaMigration] })
  @ApiNestedQuery(SchemaMigrationFindManyArgs)
  async schemaMigrations(
    @common.Req() request: Request
  ): Promise<SchemaMigration[]> {
    const args = plainToClass(SchemaMigrationFindManyArgs, request.query);
    return this.service.schemaMigrations({
      ...args,
      select: {
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SchemaMigration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async schemaMigration(
    @common.Param() params: SchemaMigrationWhereUniqueInput
  ): Promise<SchemaMigration | null> {
    const result = await this.service.schemaMigration({
      where: params,
      select: {
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SchemaMigration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSchemaMigration(
    @common.Param() params: SchemaMigrationWhereUniqueInput,
    @common.Body() data: SchemaMigrationUpdateInput
  ): Promise<SchemaMigration | null> {
    try {
      return await this.service.updateSchemaMigration({
        where: params,
        data: data,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SchemaMigration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSchemaMigration(
    @common.Param() params: SchemaMigrationWhereUniqueInput
  ): Promise<SchemaMigration | null> {
    try {
      return await this.service.deleteSchemaMigration({
        where: params,
        select: {
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
