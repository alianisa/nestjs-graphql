/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatMessageService } from "../chatMessage.service";
import { ChatMessageCreateInput } from "./ChatMessageCreateInput";
import { ChatMessage } from "./ChatMessage";
import { ChatMessageFindManyArgs } from "./ChatMessageFindManyArgs";
import { ChatMessageWhereUniqueInput } from "./ChatMessageWhereUniqueInput";
import { ChatMessageUpdateInput } from "./ChatMessageUpdateInput";

export class ChatMessageControllerBase {
  constructor(protected readonly service: ChatMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatMessage })
  async createChatMessage(
    @common.Body() data: ChatMessageCreateInput
  ): Promise<ChatMessage> {
    return await this.service.createChatMessage({
      data: {
        ...data,

        chatMessages: data.chatMessages
          ? {
              connect: data.chatMessages,
            }
          : undefined,

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatMessage] })
  @ApiNestedQuery(ChatMessageFindManyArgs)
  async chatMessages(@common.Req() request: Request): Promise<ChatMessage[]> {
    const args = plainToClass(ChatMessageFindManyArgs, request.query);
    return this.service.chatMessages({
      ...args,
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatMessage(
    @common.Param() params: ChatMessageWhereUniqueInput
  ): Promise<ChatMessage | null> {
    const result = await this.service.chatMessage({
      where: params,
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatMessage(
    @common.Param() params: ChatMessageWhereUniqueInput,
    @common.Body() data: ChatMessageUpdateInput
  ): Promise<ChatMessage | null> {
    try {
      return await this.service.updateChatMessage({
        where: params,
        data: {
          ...data,

          chatMessages: data.chatMessages
            ? {
                connect: data.chatMessages,
              }
            : undefined,

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          chatMessages: {
            select: {
              id: true,
            },
          },

          id: true,
          text: true,
          timestamp: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatMessage(
    @common.Param() params: ChatMessageWhereUniqueInput
  ): Promise<ChatMessage | null> {
    try {
      return await this.service.deleteChatMessage({
        where: params,
        select: {
          chatMessages: {
            select: {
              id: true,
            },
          },

          id: true,
          text: true,
          timestamp: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/otherChatMessages")
  @ApiNestedQuery(ChatMessageFindManyArgs)
  async findOtherChatMessages(
    @common.Req() request: Request,
    @common.Param() params: ChatMessageWhereUniqueInput
  ): Promise<ChatMessage[]> {
    const query = plainToClass(ChatMessageFindManyArgs, request.query);
    const results = await this.service.findOtherChatMessages(params.id, {
      ...query,
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otherChatMessages")
  async connectOtherChatMessages(
    @common.Param() params: ChatMessageWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherChatMessages: {
        connect: body,
      },
    };
    await this.service.updateChatMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otherChatMessages")
  async updateOtherChatMessages(
    @common.Param() params: ChatMessageWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherChatMessages: {
        set: body,
      },
    };
    await this.service.updateChatMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otherChatMessages")
  async disconnectOtherChatMessages(
    @common.Param() params: ChatMessageWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherChatMessages: {
        disconnect: body,
      },
    };
    await this.service.updateChatMessage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
