/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeTask as PrismaEmployeeTask,
  Appointment as PrismaAppointment,
  Order as PrismaOrder,
  Queue as PrismaQueue,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class EmployeeTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeTask.count(args);
  }

  async employeeTasks(
    args: Prisma.EmployeeTaskFindManyArgs
  ): Promise<PrismaEmployeeTask[]> {
    return this.prisma.employeeTask.findMany(args);
  }
  async employeeTask(
    args: Prisma.EmployeeTaskFindUniqueArgs
  ): Promise<PrismaEmployeeTask | null> {
    return this.prisma.employeeTask.findUnique(args);
  }
  async createEmployeeTask(
    args: Prisma.EmployeeTaskCreateArgs
  ): Promise<PrismaEmployeeTask> {
    return this.prisma.employeeTask.create(args);
  }
  async updateEmployeeTask(
    args: Prisma.EmployeeTaskUpdateArgs
  ): Promise<PrismaEmployeeTask> {
    return this.prisma.employeeTask.update(args);
  }
  async deleteEmployeeTask(
    args: Prisma.EmployeeTaskDeleteArgs
  ): Promise<PrismaEmployeeTask> {
    return this.prisma.employeeTask.delete(args);
  }

  async getAppointments(parentId: string): Promise<PrismaAppointment | null> {
    return this.prisma.employeeTask
      .findUnique({
        where: { id: parentId },
      })
      .appointments();
  }

  async getOrders(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.employeeTask
      .findUnique({
        where: { id: parentId },
      })
      .orders();
  }

  async getQueues(parentId: string): Promise<PrismaQueue | null> {
    return this.prisma.employeeTask
      .findUnique({
        where: { id: parentId },
      })
      .queues();
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.employeeTask
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfiles(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.employeeTask
      .findUnique({
        where: { id: parentId },
      })
      .userProfiles();
  }
}
