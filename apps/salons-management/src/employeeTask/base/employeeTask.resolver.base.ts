/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeTask } from "./EmployeeTask";
import { EmployeeTaskCountArgs } from "./EmployeeTaskCountArgs";
import { EmployeeTaskFindManyArgs } from "./EmployeeTaskFindManyArgs";
import { EmployeeTaskFindUniqueArgs } from "./EmployeeTaskFindUniqueArgs";
import { CreateEmployeeTaskArgs } from "./CreateEmployeeTaskArgs";
import { UpdateEmployeeTaskArgs } from "./UpdateEmployeeTaskArgs";
import { DeleteEmployeeTaskArgs } from "./DeleteEmployeeTaskArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { Order } from "../../order/base/Order";
import { Queue } from "../../queue/base/Queue";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { EmployeeTaskService } from "../employeeTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeTask)
export class EmployeeTaskResolverBase {
  constructor(
    protected readonly service: EmployeeTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "read",
    possession: "any",
  })
  async _employeeTasksMeta(
    @graphql.Args() args: EmployeeTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeTask])
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "read",
    possession: "any",
  })
  async employeeTasks(
    @graphql.Args() args: EmployeeTaskFindManyArgs
  ): Promise<EmployeeTask[]> {
    return this.service.employeeTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "read",
    possession: "own",
  })
  async employeeTask(
    @graphql.Args() args: EmployeeTaskFindUniqueArgs
  ): Promise<EmployeeTask | null> {
    const result = await this.service.employeeTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeTask)
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "create",
    possession: "any",
  })
  async createEmployeeTask(
    @graphql.Args() args: CreateEmployeeTaskArgs
  ): Promise<EmployeeTask> {
    return await this.service.createEmployeeTask({
      ...args,
      data: {
        ...args.data,

        appointments: args.data.appointments
          ? {
              connect: args.data.appointments,
            }
          : undefined,

        orders: {
          connect: args.data.orders,
        },

        queues: args.data.queues
          ? {
              connect: args.data.queues,
            }
          : undefined,

        salons: {
          connect: args.data.salons,
        },

        userProfiles: {
          connect: args.data.userProfiles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeTask)
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "update",
    possession: "any",
  })
  async updateEmployeeTask(
    @graphql.Args() args: UpdateEmployeeTaskArgs
  ): Promise<EmployeeTask | null> {
    try {
      return await this.service.updateEmployeeTask({
        ...args,
        data: {
          ...args.data,

          appointments: args.data.appointments
            ? {
                connect: args.data.appointments,
              }
            : undefined,

          orders: {
            connect: args.data.orders,
          },

          queues: args.data.queues
            ? {
                connect: args.data.queues,
              }
            : undefined,

          salons: {
            connect: args.data.salons,
          },

          userProfiles: {
            connect: args.data.userProfiles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeTask)
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeTask(
    @graphql.Args() args: DeleteEmployeeTaskArgs
  ): Promise<EmployeeTask | null> {
    try {
      return await this.service.deleteEmployeeTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Appointment, {
    nullable: true,
    name: "appointments",
  })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async getAppointments(
    @graphql.Parent() parent: EmployeeTask
  ): Promise<Appointment | null> {
    const result = await this.service.getAppointments(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orders",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrders(
    @graphql.Parent() parent: EmployeeTask
  ): Promise<Order | null> {
    const result = await this.service.getOrders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Queue, {
    nullable: true,
    name: "queues",
  })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async getQueues(
    @graphql.Parent() parent: EmployeeTask
  ): Promise<Queue | null> {
    const result = await this.service.getQueues(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async getSalons(
    @graphql.Parent() parent: EmployeeTask
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: EmployeeTask
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
