/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MfaAmrClaim } from "./MfaAmrClaim";
import { MfaAmrClaimCountArgs } from "./MfaAmrClaimCountArgs";
import { MfaAmrClaimFindManyArgs } from "./MfaAmrClaimFindManyArgs";
import { MfaAmrClaimFindUniqueArgs } from "./MfaAmrClaimFindUniqueArgs";
import { CreateMfaAmrClaimArgs } from "./CreateMfaAmrClaimArgs";
import { UpdateMfaAmrClaimArgs } from "./UpdateMfaAmrClaimArgs";
import { DeleteMfaAmrClaimArgs } from "./DeleteMfaAmrClaimArgs";
import { Session } from "../../session/base/Session";
import { MfaAmrClaimService } from "../mfaAmrClaim.service";
@graphql.Resolver(() => MfaAmrClaim)
export class MfaAmrClaimResolverBase {
  constructor(protected readonly service: MfaAmrClaimService) {}

  async _mfaAmrClaimsMeta(
    @graphql.Args() args: MfaAmrClaimCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MfaAmrClaim])
  async mfaAmrClaims(
    @graphql.Args() args: MfaAmrClaimFindManyArgs
  ): Promise<MfaAmrClaim[]> {
    return this.service.mfaAmrClaims(args);
  }

  @graphql.Query(() => MfaAmrClaim, { nullable: true })
  async mfaAmrClaim(
    @graphql.Args() args: MfaAmrClaimFindUniqueArgs
  ): Promise<MfaAmrClaim | null> {
    const result = await this.service.mfaAmrClaim(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MfaAmrClaim)
  async createMfaAmrClaim(
    @graphql.Args() args: CreateMfaAmrClaimArgs
  ): Promise<MfaAmrClaim> {
    return await this.service.createMfaAmrClaim({
      ...args,
      data: {
        ...args.data,

        sessions: {
          connect: args.data.sessions,
        },
      },
    });
  }

  @graphql.Mutation(() => MfaAmrClaim)
  async updateMfaAmrClaim(
    @graphql.Args() args: UpdateMfaAmrClaimArgs
  ): Promise<MfaAmrClaim | null> {
    try {
      return await this.service.updateMfaAmrClaim({
        ...args,
        data: {
          ...args.data,

          sessions: {
            connect: args.data.sessions,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MfaAmrClaim)
  async deleteMfaAmrClaim(
    @graphql.Args() args: DeleteMfaAmrClaimArgs
  ): Promise<MfaAmrClaim | null> {
    try {
      return await this.service.deleteMfaAmrClaim(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "sessions",
  })
  async getSessions(
    @graphql.Parent() parent: MfaAmrClaim
  ): Promise<Session | null> {
    const result = await this.service.getSessions(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
