/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MfaAmrClaimService } from "../mfaAmrClaim.service";
import { MfaAmrClaimCreateInput } from "./MfaAmrClaimCreateInput";
import { MfaAmrClaim } from "./MfaAmrClaim";
import { MfaAmrClaimFindManyArgs } from "./MfaAmrClaimFindManyArgs";
import { MfaAmrClaimWhereUniqueInput } from "./MfaAmrClaimWhereUniqueInput";
import { MfaAmrClaimUpdateInput } from "./MfaAmrClaimUpdateInput";

export class MfaAmrClaimControllerBase {
  constructor(protected readonly service: MfaAmrClaimService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MfaAmrClaim })
  async createMfaAmrClaim(
    @common.Body() data: MfaAmrClaimCreateInput
  ): Promise<MfaAmrClaim> {
    return await this.service.createMfaAmrClaim({
      data: {
        ...data,

        sessions: {
          connect: data.sessions,
        },
      },
      select: {
        authenticationMethod: true,
        createdAt: true,
        id: true,

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MfaAmrClaim] })
  @ApiNestedQuery(MfaAmrClaimFindManyArgs)
  async mfaAmrClaims(@common.Req() request: Request): Promise<MfaAmrClaim[]> {
    const args = plainToClass(MfaAmrClaimFindManyArgs, request.query);
    return this.service.mfaAmrClaims({
      ...args,
      select: {
        authenticationMethod: true,
        createdAt: true,
        id: true,

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MfaAmrClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mfaAmrClaim(
    @common.Param() params: MfaAmrClaimWhereUniqueInput
  ): Promise<MfaAmrClaim | null> {
    const result = await this.service.mfaAmrClaim({
      where: params,
      select: {
        authenticationMethod: true,
        createdAt: true,
        id: true,

        sessions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MfaAmrClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMfaAmrClaim(
    @common.Param() params: MfaAmrClaimWhereUniqueInput,
    @common.Body() data: MfaAmrClaimUpdateInput
  ): Promise<MfaAmrClaim | null> {
    try {
      return await this.service.updateMfaAmrClaim({
        where: params,
        data: {
          ...data,

          sessions: {
            connect: data.sessions,
          },
        },
        select: {
          authenticationMethod: true,
          createdAt: true,
          id: true,

          sessions: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MfaAmrClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMfaAmrClaim(
    @common.Param() params: MfaAmrClaimWhereUniqueInput
  ): Promise<MfaAmrClaim | null> {
    try {
      return await this.service.deleteMfaAmrClaim({
        where: params,
        select: {
          authenticationMethod: true,
          createdAt: true,
          id: true,

          sessions: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
