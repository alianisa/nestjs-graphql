/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TimeSlotService } from "../timeSlot.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TimeSlotCreateInput } from "./TimeSlotCreateInput";
import { TimeSlot } from "./TimeSlot";
import { TimeSlotFindManyArgs } from "./TimeSlotFindManyArgs";
import { TimeSlotWhereUniqueInput } from "./TimeSlotWhereUniqueInput";
import { TimeSlotUpdateInput } from "./TimeSlotUpdateInput";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TimeSlotControllerBase {
  constructor(
    protected readonly service: TimeSlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeSlot })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTimeSlot(
    @common.Body() data: TimeSlotCreateInput
  ): Promise<TimeSlot> {
    return await this.service.createTimeSlot({
      data: {
        ...data,

        salons: data.salons
          ? {
              connect: data.salons,
            }
          : undefined,

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeSlot] })
  @ApiNestedQuery(TimeSlotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timeSlots(@common.Req() request: Request): Promise<TimeSlot[]> {
    const args = plainToClass(TimeSlotFindManyArgs, request.query);
    return this.service.timeSlots({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    const result = await this.service.timeSlot({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTimeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() data: TimeSlotUpdateInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.updateTimeSlot({
        where: params,
        data: {
          ...data,

          salons: data.salons
            ? {
                connect: data.salons,
              }
            : undefined,

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          isAvailable: true,

          salons: {
            select: {
              id: true,
            },
          },

          slotDate: true,
          slotTime: true,
          startTime: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTimeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.deleteTimeSlot({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          isAvailable: true,

          salons: {
            select: {
              id: true,
            },
          },

          slotDate: true,
          slotTime: true,
          startTime: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/appointments")
  @ApiNestedQuery(AppointmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @common.Req() request: Request,
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<Appointment[]> {
    const query = plainToClass(AppointmentFindManyArgs, request.query);
    const results = await this.service.findAppointments(params.id, {
      ...query,
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "update",
    possession: "any",
  })
  async connectAppointments(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        connect: body,
      },
    };
    await this.service.updateTimeSlot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "update",
    possession: "any",
  })
  async updateAppointments(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        set: body,
      },
    };
    await this.service.updateTimeSlot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "update",
    possession: "any",
  })
  async disconnectAppointments(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        disconnect: body,
      },
    };
    await this.service.updateTimeSlot({
      where: params,
      data,
      select: { id: true },
    });
  }
}
