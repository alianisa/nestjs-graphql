/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TimeSlot } from "./TimeSlot";
import { TimeSlotCountArgs } from "./TimeSlotCountArgs";
import { TimeSlotFindManyArgs } from "./TimeSlotFindManyArgs";
import { TimeSlotFindUniqueArgs } from "./TimeSlotFindUniqueArgs";
import { CreateTimeSlotArgs } from "./CreateTimeSlotArgs";
import { UpdateTimeSlotArgs } from "./UpdateTimeSlotArgs";
import { DeleteTimeSlotArgs } from "./DeleteTimeSlotArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { TimeSlotService } from "../timeSlot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeSlot)
export class TimeSlotResolverBase {
  constructor(
    protected readonly service: TimeSlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async _timeSlotsMeta(
    @graphql.Args() args: TimeSlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeSlot])
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async timeSlots(
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    return this.service.timeSlots(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeSlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "own",
  })
  async timeSlot(
    @graphql.Args() args: TimeSlotFindUniqueArgs
  ): Promise<TimeSlot | null> {
    const result = await this.service.timeSlot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeSlot)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "create",
    possession: "any",
  })
  async createTimeSlot(
    @graphql.Args() args: CreateTimeSlotArgs
  ): Promise<TimeSlot> {
    return await this.service.createTimeSlot({
      ...args,
      data: {
        ...args.data,

        salons: args.data.salons
          ? {
              connect: args.data.salons,
            }
          : undefined,

        userProfiles: args.data.userProfiles
          ? {
              connect: args.data.userProfiles,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeSlot)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "update",
    possession: "any",
  })
  async updateTimeSlot(
    @graphql.Args() args: UpdateTimeSlotArgs
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.updateTimeSlot({
        ...args,
        data: {
          ...args.data,

          salons: args.data.salons
            ? {
                connect: args.data.salons,
              }
            : undefined,

          userProfiles: args.data.userProfiles
            ? {
                connect: args.data.userProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeSlot)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "delete",
    possession: "any",
  })
  async deleteTimeSlot(
    @graphql.Args() args: DeleteTimeSlotArgs
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.deleteTimeSlot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: TimeSlot,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async getSalons(@graphql.Parent() parent: TimeSlot): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfiles(
    @graphql.Parent() parent: TimeSlot
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfiles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
