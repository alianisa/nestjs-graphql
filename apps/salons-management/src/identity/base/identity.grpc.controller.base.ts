/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { IdentityService } from "../identity.service";
import { IdentityCreateInput } from "./IdentityCreateInput";
import { IdentityWhereInput } from "./IdentityWhereInput";
import { IdentityWhereUniqueInput } from "./IdentityWhereUniqueInput";
import { IdentityFindManyArgs } from "./IdentityFindManyArgs";
import { IdentityUpdateInput } from "./IdentityUpdateInput";
import { Identity } from "./Identity";

export class IdentityGrpcControllerBase {
  constructor(protected readonly service: IdentityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Identity })
  @GrpcMethod("IdentityService", "createIdentity")
  async createIdentity(
    @common.Body() data: IdentityCreateInput
  ): Promise<Identity> {
    return await this.service.createIdentity({
      data: {
        ...data,

        users: {
          connect: data.users,
        },
      },
      select: {
        createdAt: true,
        email: true,
        id: true,
        identityData: true,
        lastSignInAt: true,
        provider: true,
        providerId: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Identity] })
  @ApiNestedQuery(IdentityFindManyArgs)
  @GrpcMethod("IdentityService", "identities")
  async identities(@common.Req() request: Request): Promise<Identity[]> {
    const args = plainToClass(IdentityFindManyArgs, request.query);
    return this.service.identities({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        identityData: true,
        lastSignInAt: true,
        provider: true,
        providerId: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Identity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IdentityService", "identity")
  async identity(
    @common.Param() params: IdentityWhereUniqueInput
  ): Promise<Identity | null> {
    const result = await this.service.identity({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        identityData: true,
        lastSignInAt: true,
        provider: true,
        providerId: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Identity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IdentityService", "updateIdentity")
  async updateIdentity(
    @common.Param() params: IdentityWhereUniqueInput,
    @common.Body() data: IdentityUpdateInput
  ): Promise<Identity | null> {
    try {
      return await this.service.updateIdentity({
        where: params,
        data: {
          ...data,

          users: {
            connect: data.users,
          },
        },
        select: {
          createdAt: true,
          email: true,
          id: true,
          identityData: true,
          lastSignInAt: true,
          provider: true,
          providerId: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Identity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IdentityService", "deleteIdentity")
  async deleteIdentity(
    @common.Param() params: IdentityWhereUniqueInput
  ): Promise<Identity | null> {
    try {
      return await this.service.deleteIdentity({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          identityData: true,
          lastSignInAt: true,
          provider: true,
          providerId: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
