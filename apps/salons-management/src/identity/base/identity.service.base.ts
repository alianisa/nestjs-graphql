/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Identity as PrismaIdentity,
  User as PrismaUser,
} from "@prisma/client";

export class IdentityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IdentityCountArgs, "select">): Promise<number> {
    return this.prisma.identity.count(args);
  }

  async identities(
    args: Prisma.IdentityFindManyArgs
  ): Promise<PrismaIdentity[]> {
    return this.prisma.identity.findMany(args);
  }
  async identity(
    args: Prisma.IdentityFindUniqueArgs
  ): Promise<PrismaIdentity | null> {
    return this.prisma.identity.findUnique(args);
  }
  async createIdentity(
    args: Prisma.IdentityCreateArgs
  ): Promise<PrismaIdentity> {
    return this.prisma.identity.create(args);
  }
  async updateIdentity(
    args: Prisma.IdentityUpdateArgs
  ): Promise<PrismaIdentity> {
    return this.prisma.identity.update(args);
  }
  async deleteIdentity(
    args: Prisma.IdentityDeleteArgs
  ): Promise<PrismaIdentity> {
    return this.prisma.identity.delete(args);
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.identity
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
