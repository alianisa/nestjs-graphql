/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OneTimeToken as PrismaOneTimeToken,
  User as PrismaUser,
} from "@prisma/client";

export class OneTimeTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OneTimeTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.oneTimeToken.count(args);
  }

  async oneTimeTokens(
    args: Prisma.OneTimeTokenFindManyArgs
  ): Promise<PrismaOneTimeToken[]> {
    return this.prisma.oneTimeToken.findMany(args);
  }
  async oneTimeToken(
    args: Prisma.OneTimeTokenFindUniqueArgs
  ): Promise<PrismaOneTimeToken | null> {
    return this.prisma.oneTimeToken.findUnique(args);
  }
  async createOneTimeToken(
    args: Prisma.OneTimeTokenCreateArgs
  ): Promise<PrismaOneTimeToken> {
    return this.prisma.oneTimeToken.create(args);
  }
  async updateOneTimeToken(
    args: Prisma.OneTimeTokenUpdateArgs
  ): Promise<PrismaOneTimeToken> {
    return this.prisma.oneTimeToken.update(args);
  }
  async deleteOneTimeToken(
    args: Prisma.OneTimeTokenDeleteArgs
  ): Promise<PrismaOneTimeToken> {
    return this.prisma.oneTimeToken.delete(args);
  }

  async getUsers(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.oneTimeToken
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
