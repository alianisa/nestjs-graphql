/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WebhookService } from "../webhook.service";
import { WebhookCreateInput } from "./WebhookCreateInput";
import { WebhookWhereInput } from "./WebhookWhereInput";
import { WebhookWhereUniqueInput } from "./WebhookWhereUniqueInput";
import { WebhookFindManyArgs } from "./WebhookFindManyArgs";
import { WebhookUpdateInput } from "./WebhookUpdateInput";
import { Webhook } from "./Webhook";

export class WebhookGrpcControllerBase {
  constructor(protected readonly service: WebhookService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Webhook })
  @GrpcMethod("WebhookService", "createWebhook")
  async createWebhook(
    @common.Body() data: WebhookCreateInput
  ): Promise<Webhook> {
    return await this.service.createWebhook({
      data: data,
      select: {
        createdAt: true,
        events: true,
        failureCount: true,
        id: true,
        isActive: true,
        lastSuccess: true,
        lastTriggeredAt: true,
        metadata: true,
        secret: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Webhook] })
  @ApiNestedQuery(WebhookFindManyArgs)
  @GrpcMethod("WebhookService", "webhooks")
  async webhooks(@common.Req() request: Request): Promise<Webhook[]> {
    const args = plainToClass(WebhookFindManyArgs, request.query);
    return this.service.webhooks({
      ...args,
      select: {
        createdAt: true,
        events: true,
        failureCount: true,
        id: true,
        isActive: true,
        lastSuccess: true,
        lastTriggeredAt: true,
        metadata: true,
        secret: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WebhookService", "webhook")
  async webhook(
    @common.Param() params: WebhookWhereUniqueInput
  ): Promise<Webhook | null> {
    const result = await this.service.webhook({
      where: params,
      select: {
        createdAt: true,
        events: true,
        failureCount: true,
        id: true,
        isActive: true,
        lastSuccess: true,
        lastTriggeredAt: true,
        metadata: true,
        secret: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WebhookService", "updateWebhook")
  async updateWebhook(
    @common.Param() params: WebhookWhereUniqueInput,
    @common.Body() data: WebhookUpdateInput
  ): Promise<Webhook | null> {
    try {
      return await this.service.updateWebhook({
        where: params,
        data: data,
        select: {
          createdAt: true,
          events: true,
          failureCount: true,
          id: true,
          isActive: true,
          lastSuccess: true,
          lastTriggeredAt: true,
          metadata: true,
          secret: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WebhookService", "deleteWebhook")
  async deleteWebhook(
    @common.Param() params: WebhookWhereUniqueInput
  ): Promise<Webhook | null> {
    try {
      return await this.service.deleteWebhook({
        where: params,
        select: {
          createdAt: true,
          events: true,
          failureCount: true,
          id: true,
          isActive: true,
          lastSuccess: true,
          lastTriggeredAt: true,
          metadata: true,
          secret: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
