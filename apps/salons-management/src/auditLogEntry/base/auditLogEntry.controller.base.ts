/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuditLogEntryService } from "../auditLogEntry.service";
import { AuditLogEntryCreateInput } from "./AuditLogEntryCreateInput";
import { AuditLogEntry } from "./AuditLogEntry";
import { AuditLogEntryFindManyArgs } from "./AuditLogEntryFindManyArgs";
import { AuditLogEntryWhereUniqueInput } from "./AuditLogEntryWhereUniqueInput";
import { AuditLogEntryUpdateInput } from "./AuditLogEntryUpdateInput";

export class AuditLogEntryControllerBase {
  constructor(protected readonly service: AuditLogEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuditLogEntry })
  async createAuditLogEntry(
    @common.Body() data: AuditLogEntryCreateInput
  ): Promise<AuditLogEntry> {
    return await this.service.createAuditLogEntry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        ipAddress: true,
        payload: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuditLogEntry] })
  @ApiNestedQuery(AuditLogEntryFindManyArgs)
  async auditLogEntries(
    @common.Req() request: Request
  ): Promise<AuditLogEntry[]> {
    const args = plainToClass(AuditLogEntryFindManyArgs, request.query);
    return this.service.auditLogEntries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        ipAddress: true,
        payload: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuditLogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async auditLogEntry(
    @common.Param() params: AuditLogEntryWhereUniqueInput
  ): Promise<AuditLogEntry | null> {
    const result = await this.service.auditLogEntry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        ipAddress: true,
        payload: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuditLogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuditLogEntry(
    @common.Param() params: AuditLogEntryWhereUniqueInput,
    @common.Body() data: AuditLogEntryUpdateInput
  ): Promise<AuditLogEntry | null> {
    try {
      return await this.service.updateAuditLogEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          instanceId: true,
          ipAddress: true,
          payload: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuditLogEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuditLogEntry(
    @common.Param() params: AuditLogEntryWhereUniqueInput
  ): Promise<AuditLogEntry | null> {
    try {
      return await this.service.deleteAuditLogEntry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          instanceId: true,
          ipAddress: true,
          payload: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
