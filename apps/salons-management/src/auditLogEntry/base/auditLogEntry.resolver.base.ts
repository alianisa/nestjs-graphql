/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AuditLogEntry } from "./AuditLogEntry";
import { AuditLogEntryCountArgs } from "./AuditLogEntryCountArgs";
import { AuditLogEntryFindManyArgs } from "./AuditLogEntryFindManyArgs";
import { AuditLogEntryFindUniqueArgs } from "./AuditLogEntryFindUniqueArgs";
import { CreateAuditLogEntryArgs } from "./CreateAuditLogEntryArgs";
import { UpdateAuditLogEntryArgs } from "./UpdateAuditLogEntryArgs";
import { DeleteAuditLogEntryArgs } from "./DeleteAuditLogEntryArgs";
import { AuditLogEntryService } from "../auditLogEntry.service";
@graphql.Resolver(() => AuditLogEntry)
export class AuditLogEntryResolverBase {
  constructor(protected readonly service: AuditLogEntryService) {}

  async _auditLogEntriesMeta(
    @graphql.Args() args: AuditLogEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AuditLogEntry])
  async auditLogEntries(
    @graphql.Args() args: AuditLogEntryFindManyArgs
  ): Promise<AuditLogEntry[]> {
    return this.service.auditLogEntries(args);
  }

  @graphql.Query(() => AuditLogEntry, { nullable: true })
  async auditLogEntry(
    @graphql.Args() args: AuditLogEntryFindUniqueArgs
  ): Promise<AuditLogEntry | null> {
    const result = await this.service.auditLogEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuditLogEntry)
  async createAuditLogEntry(
    @graphql.Args() args: CreateAuditLogEntryArgs
  ): Promise<AuditLogEntry> {
    return await this.service.createAuditLogEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AuditLogEntry)
  async updateAuditLogEntry(
    @graphql.Args() args: UpdateAuditLogEntryArgs
  ): Promise<AuditLogEntry | null> {
    try {
      return await this.service.updateAuditLogEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuditLogEntry)
  async deleteAuditLogEntry(
    @graphql.Args() args: DeleteAuditLogEntryArgs
  ): Promise<AuditLogEntry | null> {
    try {
      return await this.service.deleteAuditLogEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
