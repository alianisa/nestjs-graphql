/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  IsOptional,
  ValidateNested,
  IsBoolean,
  IsString,
  MaxLength,
  IsDate,
  IsInt,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { AppointmentUpdateManyWithoutOrdersInput } from "./AppointmentUpdateManyWithoutOrdersInput";
import { Type } from "class-transformer";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { DepositUpdateManyWithoutOrdersInput } from "./DepositUpdateManyWithoutOrdersInput";
import { DiscountWhereUniqueInput } from "../../discount/base/DiscountWhereUniqueInput";
import { EmployeeTaskUpdateManyWithoutOrdersInput } from "./EmployeeTaskUpdateManyWithoutOrdersInput";
import { LoyaltyTransactionUpdateManyWithoutOrdersInput } from "./LoyaltyTransactionUpdateManyWithoutOrdersInput";
import { OrderImageUpdateManyWithoutOrdersInput } from "./OrderImageUpdateManyWithoutOrdersInput";
import { EnumOrderOrderType } from "./EnumOrderOrderType";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { PromocodeWhereUniqueInput } from "../../promocode/base/PromocodeWhereUniqueInput";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { QueueUpdateManyWithoutOrdersInput } from "./QueueUpdateManyWithoutOrdersInput";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { EnumOrderStatus } from "./EnumOrderStatus";
import { TransactionUpdateManyWithoutOrdersInput } from "./TransactionUpdateManyWithoutOrdersInput";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";
import { UserRatingUpdateManyWithoutOrdersInput } from "./UserRatingUpdateManyWithoutOrdersInput";

@InputType()
class OrderUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => AppointmentUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => AppointmentUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  appointmentsAppointmentsOrderIdToorders?: AppointmentUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: () => AppointmentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppointmentWhereUniqueInput)
  @IsOptional()
  @Field(() => AppointmentWhereUniqueInput, {
    nullable: true,
  })
  appointmentsOrdersAppointmentIdToappointments?: AppointmentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  canceled?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  canceledReason?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completed?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  depositAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DepositUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => DepositUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => DepositUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  deposits?: DepositUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DiscountWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DiscountWhereUniqueInput)
  @IsOptional()
  @Field(() => DiscountWhereUniqueInput, {
    nullable: true,
  })
  discounts?: DiscountWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeTaskUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTaskUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => EmployeeTaskUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  employeeTasks?: EmployeeTaskUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsEarned?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsUsed?: number | null;

  @ApiProperty({
    required: false,
    type: () => LoyaltyTransactionUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => LoyaltyTransactionUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => LoyaltyTransactionUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  loyaltyTransactions?: LoyaltyTransactionUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  orderImageId?: string;

  @ApiProperty({
    required: false,
    type: () => OrderImageUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => OrderImageUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => OrderImageUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  orderImages?: OrderImageUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  orderNumber?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderOrderType,
  })
  @IsEnum(EnumOrderOrderType)
  @IsOptional()
  @Field(() => EnumOrderOrderType, {
    nullable: true,
  })
  order_type?: "appointment" | "queue" | null;

  @ApiProperty({
    required: false,
    type: () => PaymentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentWhereUniqueInput, {
    nullable: true,
  })
  payments?: PaymentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PromocodeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PromocodeWhereUniqueInput)
  @IsOptional()
  @Field(() => PromocodeWhereUniqueInput, {
    nullable: true,
  })
  promocodes?: PromocodeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => QueueWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => QueueWhereUniqueInput)
  @IsOptional()
  @Field(() => QueueWhereUniqueInput, {
    nullable: true,
  })
  queuesOrdersQueueIdToqueues?: QueueWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => QueueUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => QueueUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => QueueUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  queuesQueuesOrderIdToorders?: QueueUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: () => SalonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalonWhereUniqueInput)
  @IsOptional()
  @Field(() => SalonWhereUniqueInput, {
    nullable: true,
  })
  salons?: SalonWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  services?: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  started?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedAt?: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderStatus, {
    nullable: true,
  })
  status?:
    | "CREATED"
    | "IN_TRANSIT"
    | "IN_QUEUE"
    | "APPOINTMENT"
    | "WAITING_FOR_MASTER"
    | "WITH_MASTER"
    | "CANCELLED_BY_USER"
    | "CANCELLED_BY_MASTER"
    | "IN_PROGRESS"
    | "IN_PAYMENT"
    | "PAID"
    | "COMPLETED"
    | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalAmount?: Decimal;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  transactions?: TransactionUpdateManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserProfileWhereUniqueInput)
  @IsOptional()
  @Field(() => UserProfileWhereUniqueInput, {
    nullable: true,
  })
  userProfilesOrdersEmployeeIdTouserProfiles?: UserProfileWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserProfileWhereUniqueInput)
  @IsOptional()
  @Field(() => UserProfileWhereUniqueInput, {
    nullable: true,
  })
  userProfilesOrdersUserIdTouserProfiles?: UserProfileWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserRatingUpdateManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => UserRatingUpdateManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => UserRatingUpdateManyWithoutOrdersInput, {
    nullable: true,
  })
  userRatings?: UserRatingUpdateManyWithoutOrdersInput;
}

export { OrderUpdateInput as OrderUpdateInput };
