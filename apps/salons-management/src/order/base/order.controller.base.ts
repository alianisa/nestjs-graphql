/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderService } from "../order.service";
import { OrderCreateInput } from "./OrderCreateInput";
import { Order } from "./Order";
import { OrderFindManyArgs } from "./OrderFindManyArgs";
import { OrderWhereUniqueInput } from "./OrderWhereUniqueInput";
import { OrderUpdateInput } from "./OrderUpdateInput";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { DepositFindManyArgs } from "../../deposit/base/DepositFindManyArgs";
import { Deposit } from "../../deposit/base/Deposit";
import { DepositWhereUniqueInput } from "../../deposit/base/DepositWhereUniqueInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { LoyaltyTransactionFindManyArgs } from "../../loyaltyTransaction/base/LoyaltyTransactionFindManyArgs";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { LoyaltyTransactionWhereUniqueInput } from "../../loyaltyTransaction/base/LoyaltyTransactionWhereUniqueInput";
import { OrderImageFindManyArgs } from "../../orderImage/base/OrderImageFindManyArgs";
import { OrderImage } from "../../orderImage/base/OrderImage";
import { OrderImageWhereUniqueInput } from "../../orderImage/base/OrderImageWhereUniqueInput";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";
import { UserRatingFindManyArgs } from "../../userRating/base/UserRatingFindManyArgs";
import { UserRating } from "../../userRating/base/UserRating";
import { UserRatingWhereUniqueInput } from "../../userRating/base/UserRatingWhereUniqueInput";

export class OrderControllerBase {
  constructor(protected readonly service: OrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Order })
  async createOrder(@common.Body() data: OrderCreateInput): Promise<Order> {
    return await this.service.createOrder({
      data: {
        ...data,

        appointmentsOrdersAppointmentIdToappointments:
          data.appointmentsOrdersAppointmentIdToappointments
            ? {
                connect: data.appointmentsOrdersAppointmentIdToappointments,
              }
            : undefined,

        discounts: data.discounts
          ? {
              connect: data.discounts,
            }
          : undefined,

        payments: data.payments
          ? {
              connect: data.payments,
            }
          : undefined,

        promocodes: data.promocodes
          ? {
              connect: data.promocodes,
            }
          : undefined,

        queuesOrdersQueueIdToqueues: data.queuesOrdersQueueIdToqueues
          ? {
              connect: data.queuesOrdersQueueIdToqueues,
            }
          : undefined,

        salons: {
          connect: data.salons,
        },

        userProfilesOrdersEmployeeIdTouserProfiles: {
          connect: data.userProfilesOrdersEmployeeIdTouserProfiles,
        },

        userProfilesOrdersUserIdTouserProfiles: {
          connect: data.userProfilesOrdersUserIdTouserProfiles,
        },
      },
      select: {
        amount: true,

        appointmentsOrdersAppointmentIdToappointments: {
          select: {
            id: true,
          },
        },

        canceled: true,
        canceledReason: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        depositAmount: true,
        discount: true,
        discountAmount: true,

        discounts: {
          select: {
            id: true,
          },
        },

        id: true,
        loyaltyPointsEarned: true,
        loyaltyPointsUsed: true,
        orderImageId: true,
        orderNumber: true,
        order_type: true,

        payments: {
          select: {
            id: true,
          },
        },

        promocodes: {
          select: {
            id: true,
          },
        },

        queuesOrdersQueueIdToqueues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        services: true,
        started: true,
        startedAt: true,
        status: true,
        totalAmount: true,
        updatedAt: true,

        userProfilesOrdersEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesOrdersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Order] })
  @ApiNestedQuery(OrderFindManyArgs)
  async orders(@common.Req() request: Request): Promise<Order[]> {
    const args = plainToClass(OrderFindManyArgs, request.query);
    return this.service.orders({
      ...args,
      select: {
        amount: true,

        appointmentsOrdersAppointmentIdToappointments: {
          select: {
            id: true,
          },
        },

        canceled: true,
        canceledReason: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        depositAmount: true,
        discount: true,
        discountAmount: true,

        discounts: {
          select: {
            id: true,
          },
        },

        id: true,
        loyaltyPointsEarned: true,
        loyaltyPointsUsed: true,
        orderImageId: true,
        orderNumber: true,
        order_type: true,

        payments: {
          select: {
            id: true,
          },
        },

        promocodes: {
          select: {
            id: true,
          },
        },

        queuesOrdersQueueIdToqueues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        services: true,
        started: true,
        startedAt: true,
        status: true,
        totalAmount: true,
        updatedAt: true,

        userProfilesOrdersEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesOrdersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async order(
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Order | null> {
    const result = await this.service.order({
      where: params,
      select: {
        amount: true,

        appointmentsOrdersAppointmentIdToappointments: {
          select: {
            id: true,
          },
        },

        canceled: true,
        canceledReason: true,
        completed: true,
        completedAt: true,
        createdAt: true,
        depositAmount: true,
        discount: true,
        discountAmount: true,

        discounts: {
          select: {
            id: true,
          },
        },

        id: true,
        loyaltyPointsEarned: true,
        loyaltyPointsUsed: true,
        orderImageId: true,
        orderNumber: true,
        order_type: true,

        payments: {
          select: {
            id: true,
          },
        },

        promocodes: {
          select: {
            id: true,
          },
        },

        queuesOrdersQueueIdToqueues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        services: true,
        started: true,
        startedAt: true,
        status: true,
        totalAmount: true,
        updatedAt: true,

        userProfilesOrdersEmployeeIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesOrdersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrder(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() data: OrderUpdateInput
  ): Promise<Order | null> {
    try {
      return await this.service.updateOrder({
        where: params,
        data: {
          ...data,

          appointmentsOrdersAppointmentIdToappointments:
            data.appointmentsOrdersAppointmentIdToappointments
              ? {
                  connect: data.appointmentsOrdersAppointmentIdToappointments,
                }
              : undefined,

          discounts: data.discounts
            ? {
                connect: data.discounts,
              }
            : undefined,

          payments: data.payments
            ? {
                connect: data.payments,
              }
            : undefined,

          promocodes: data.promocodes
            ? {
                connect: data.promocodes,
              }
            : undefined,

          queuesOrdersQueueIdToqueues: data.queuesOrdersQueueIdToqueues
            ? {
                connect: data.queuesOrdersQueueIdToqueues,
              }
            : undefined,

          salons: {
            connect: data.salons,
          },

          userProfilesOrdersEmployeeIdTouserProfiles: {
            connect: data.userProfilesOrdersEmployeeIdTouserProfiles,
          },

          userProfilesOrdersUserIdTouserProfiles: {
            connect: data.userProfilesOrdersUserIdTouserProfiles,
          },
        },
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Order })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrder(
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Order | null> {
    try {
      return await this.service.deleteOrder({
        where: params,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentsAppointmentsOrderIdToorders")
  @ApiNestedQuery(AppointmentFindManyArgs)
  async findAppointmentsAppointmentsOrderIdToorders(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Appointment[]> {
    const query = plainToClass(AppointmentFindManyArgs, request.query);
    const results =
      await this.service.findAppointmentsAppointmentsOrderIdToorders(
        params.id,
        {
          ...query,
          select: {
            appointmentDate: true,
            employeeId: true,
            id: true,

            ordersAppointmentsOrderIdToorders: {
              select: {
                id: true,
              },
            },

            timeSlots: {
              select: {
                id: true,
              },
            },

            userProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentsAppointmentsOrderIdToorders")
  async connectAppointmentsAppointmentsOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsAppointmentsOrderIdToorders: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentsAppointmentsOrderIdToorders")
  async updateAppointmentsAppointmentsOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsAppointmentsOrderIdToorders: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentsAppointmentsOrderIdToorders")
  async disconnectAppointmentsAppointmentsOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsAppointmentsOrderIdToorders: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/deposits")
  @ApiNestedQuery(DepositFindManyArgs)
  async findDeposits(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Deposit[]> {
    const query = plainToClass(DepositFindManyArgs, request.query);
    const results = await this.service.findDeposits(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        payments: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deposits")
  async connectDeposits(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deposits")
  async updateDeposits(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deposits")
  async disconnectDeposits(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: DepositWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deposits: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  async findEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/loyaltyTransactions")
  @ApiNestedQuery(LoyaltyTransactionFindManyArgs)
  async findLoyaltyTransactions(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<LoyaltyTransaction[]> {
    const query = plainToClass(LoyaltyTransactionFindManyArgs, request.query);
    const results = await this.service.findLoyaltyTransactions(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loyaltyTransactions")
  async connectLoyaltyTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loyaltyTransactions")
  async updateLoyaltyTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loyaltyTransactions")
  async disconnectLoyaltyTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orderImages")
  @ApiNestedQuery(OrderImageFindManyArgs)
  async findOrderImages(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<OrderImage[]> {
    const query = plainToClass(OrderImageFindManyArgs, request.query);
    const results = await this.service.findOrderImages(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        orders: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderImages")
  async connectOrderImages(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: OrderImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderImages: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderImages")
  async updateOrderImages(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: OrderImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderImages: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderImages")
  async disconnectOrderImages(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: OrderImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderImages: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuesQueuesOrderIdToorders")
  @ApiNestedQuery(QueueFindManyArgs)
  async findQueuesQueuesOrderIdToorders(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueuesQueuesOrderIdToorders(
      params.id,
      {
        ...query,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuesQueuesOrderIdToorders")
  async connectQueuesQueuesOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesOrderIdToorders: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuesQueuesOrderIdToorders")
  async updateQueuesQueuesOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesOrderIdToorders: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuesQueuesOrderIdToorders")
  async disconnectQueuesQueuesOrderIdToorders(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesOrderIdToorders: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        errorMessage: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        payments: {
          select: {
            id: true,
          },
        },

        status: true,
        transactionType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRatings")
  @ApiNestedQuery(UserRatingFindManyArgs)
  async findUserRatings(
    @common.Req() request: Request,
    @common.Param() params: OrderWhereUniqueInput
  ): Promise<UserRating[]> {
    const query = plainToClass(UserRatingFindManyArgs, request.query);
    const results = await this.service.findUserRatings(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        rating: true,
        review: true,

        userProfilesUserRatingsOwnerTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRatings")
  async connectUserRatings(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatings: {
        connect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRatings")
  async updateUserRatings(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatings: {
        set: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRatings")
  async disconnectUserRatings(
    @common.Param() params: OrderWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatings: {
        disconnect: body,
      },
    };
    await this.service.updateOrder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
