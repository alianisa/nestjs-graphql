/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  IsOptional,
  ValidateNested,
  IsBoolean,
  IsString,
  MaxLength,
  IsDate,
  IsInt,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { AppointmentCreateNestedManyWithoutOrdersInput } from "./AppointmentCreateNestedManyWithoutOrdersInput";
import { Type } from "class-transformer";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { DepositCreateNestedManyWithoutOrdersInput } from "./DepositCreateNestedManyWithoutOrdersInput";
import { DiscountWhereUniqueInput } from "../../discount/base/DiscountWhereUniqueInput";
import { EmployeeTaskCreateNestedManyWithoutOrdersInput } from "./EmployeeTaskCreateNestedManyWithoutOrdersInput";
import { LoyaltyTransactionCreateNestedManyWithoutOrdersInput } from "./LoyaltyTransactionCreateNestedManyWithoutOrdersInput";
import { OrderImageCreateNestedManyWithoutOrdersInput } from "./OrderImageCreateNestedManyWithoutOrdersInput";
import { EnumOrderOrderType } from "./EnumOrderOrderType";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { PromocodeWhereUniqueInput } from "../../promocode/base/PromocodeWhereUniqueInput";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { QueueCreateNestedManyWithoutOrdersInput } from "./QueueCreateNestedManyWithoutOrdersInput";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { EnumOrderStatus } from "./EnumOrderStatus";
import { TransactionCreateNestedManyWithoutOrdersInput } from "./TransactionCreateNestedManyWithoutOrdersInput";
import { UserProfileWhereUniqueInput } from "../../userProfile/base/UserProfileWhereUniqueInput";
import { UserRatingCreateNestedManyWithoutOrdersInput } from "./UserRatingCreateNestedManyWithoutOrdersInput";

@InputType()
class OrderCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => AppointmentCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => AppointmentCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  appointmentsAppointmentsOrderIdToorders?: AppointmentCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: () => AppointmentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppointmentWhereUniqueInput)
  @IsOptional()
  @Field(() => AppointmentWhereUniqueInput, {
    nullable: true,
  })
  appointmentsOrdersAppointmentIdToappointments?: AppointmentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  canceled?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  canceledReason?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completed?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  depositAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DepositCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => DepositCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => DepositCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  deposits?: DepositCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DiscountWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DiscountWhereUniqueInput)
  @IsOptional()
  @Field(() => DiscountWhereUniqueInput, {
    nullable: true,
  })
  discounts?: DiscountWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeTaskCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTaskCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => EmployeeTaskCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  employeeTasks?: EmployeeTaskCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsEarned?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsUsed?: number | null;

  @ApiProperty({
    required: false,
    type: () => LoyaltyTransactionCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => LoyaltyTransactionCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => LoyaltyTransactionCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  loyaltyTransactions?: LoyaltyTransactionCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  orderImageId!: string;

  @ApiProperty({
    required: false,
    type: () => OrderImageCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => OrderImageCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => OrderImageCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  orderImages?: OrderImageCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  orderNumber?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderOrderType,
  })
  @IsEnum(EnumOrderOrderType)
  @IsOptional()
  @Field(() => EnumOrderOrderType, {
    nullable: true,
  })
  order_type?: "appointment" | "queue" | null;

  @ApiProperty({
    required: false,
    type: () => PaymentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentWhereUniqueInput, {
    nullable: true,
  })
  payments?: PaymentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PromocodeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PromocodeWhereUniqueInput)
  @IsOptional()
  @Field(() => PromocodeWhereUniqueInput, {
    nullable: true,
  })
  promocodes?: PromocodeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => QueueWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => QueueWhereUniqueInput)
  @IsOptional()
  @Field(() => QueueWhereUniqueInput, {
    nullable: true,
  })
  queuesOrdersQueueIdToqueues?: QueueWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => QueueCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => QueueCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => QueueCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  queuesQueuesOrderIdToorders?: QueueCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: true,
    type: () => SalonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalonWhereUniqueInput)
  @Field(() => SalonWhereUniqueInput)
  salons!: SalonWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  services!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  started?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedAt?: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderStatus, {
    nullable: true,
  })
  status?:
    | "CREATED"
    | "IN_TRANSIT"
    | "IN_QUEUE"
    | "APPOINTMENT"
    | "WAITING_FOR_MASTER"
    | "WITH_MASTER"
    | "CANCELLED_BY_USER"
    | "CANCELLED_BY_MASTER"
    | "IN_PROGRESS"
    | "IN_PAYMENT"
    | "PAID"
    | "COMPLETED"
    | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  totalAmount!: Decimal;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: true,
    type: () => UserProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserProfileWhereUniqueInput)
  @Field(() => UserProfileWhereUniqueInput)
  userProfilesOrdersEmployeeIdTouserProfiles!: UserProfileWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: () => UserProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserProfileWhereUniqueInput)
  @Field(() => UserProfileWhereUniqueInput)
  userProfilesOrdersUserIdTouserProfiles!: UserProfileWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserRatingCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => UserRatingCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => UserRatingCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  userRatings?: UserRatingCreateNestedManyWithoutOrdersInput;
}

export { OrderCreateInput as OrderCreateInput };
