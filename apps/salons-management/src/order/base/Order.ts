/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  IsOptional,
  ValidateNested,
  IsBoolean,
  IsString,
  MaxLength,
  IsDate,
  IsInt,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Appointment } from "../../appointment/base/Appointment";
import { Type } from "class-transformer";
import { Deposit } from "../../deposit/base/Deposit";
import { Discount } from "../../discount/base/Discount";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { OrderImage } from "../../orderImage/base/OrderImage";
import { EnumOrderOrderType } from "./EnumOrderOrderType";
import { Payment } from "../../payment/base/Payment";
import { Promocode } from "../../promocode/base/Promocode";
import { Queue } from "../../queue/base/Queue";
import { Salon } from "../../salon/base/Salon";
import { EnumOrderStatus } from "./EnumOrderStatus";
import { Transaction } from "../../transaction/base/Transaction";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserRating } from "../../userRating/base/UserRating";

@ObjectType()
class Order {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [Appointment],
  })
  @ValidateNested()
  @Type(() => Appointment)
  @IsOptional()
  appointmentsAppointmentsOrderIdToorders?: Array<Appointment>;

  @ApiProperty({
    required: false,
    type: () => Appointment,
  })
  @ValidateNested()
  @Type(() => Appointment)
  @IsOptional()
  appointmentsOrdersAppointmentIdToappointments?: Appointment | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  canceled!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  canceledReason!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completed!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  depositAmount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [Deposit],
  })
  @ValidateNested()
  @Type(() => Deposit)
  @IsOptional()
  deposits?: Array<Deposit>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => Discount,
  })
  @ValidateNested()
  @Type(() => Discount)
  @IsOptional()
  discounts?: Discount | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTask)
  @IsOptional()
  employeeTasks?: Array<EmployeeTask>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsEarned!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPointsUsed!: number | null;

  @ApiProperty({
    required: false,
    type: () => [LoyaltyTransaction],
  })
  @ValidateNested()
  @Type(() => LoyaltyTransaction)
  @IsOptional()
  loyaltyTransactions?: Array<LoyaltyTransaction>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  orderImageId!: string;

  @ApiProperty({
    required: false,
    type: () => [OrderImage],
  })
  @ValidateNested()
  @Type(() => OrderImage)
  @IsOptional()
  orderImages?: Array<OrderImage>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  orderNumber!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderOrderType,
  })
  @IsEnum(EnumOrderOrderType)
  @IsOptional()
  @Field(() => EnumOrderOrderType, {
    nullable: true,
  })
  order_type?: "appointment" | "queue" | null;

  @ApiProperty({
    required: false,
    type: () => Payment,
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Payment | null;

  @ApiProperty({
    required: false,
    type: () => Promocode,
  })
  @ValidateNested()
  @Type(() => Promocode)
  @IsOptional()
  promocodes?: Promocode | null;

  @ApiProperty({
    required: false,
    type: () => Queue,
  })
  @ValidateNested()
  @Type(() => Queue)
  @IsOptional()
  queuesOrdersQueueIdToqueues?: Queue | null;

  @ApiProperty({
    required: false,
    type: () => [Queue],
  })
  @ValidateNested()
  @Type(() => Queue)
  @IsOptional()
  queuesQueuesOrderIdToorders?: Array<Queue>;

  @ApiProperty({
    required: true,
    type: () => Salon,
  })
  @ValidateNested()
  @Type(() => Salon)
  salons?: Salon;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  services!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  started!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startedAt!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderStatus, {
    nullable: true,
  })
  status?:
    | "CREATED"
    | "IN_TRANSIT"
    | "IN_QUEUE"
    | "APPOINTMENT"
    | "WAITING_FOR_MASTER"
    | "WITH_MASTER"
    | "CANCELLED_BY_USER"
    | "CANCELLED_BY_MASTER"
    | "IN_PROGRESS"
    | "IN_PAYMENT"
    | "PAID"
    | "COMPLETED"
    | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  totalAmount!: Decimal;

  @ApiProperty({
    required: false,
    type: () => [Transaction],
  })
  @ValidateNested()
  @Type(() => Transaction)
  @IsOptional()
  transactions?: Array<Transaction>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: true,
    type: () => UserProfile,
  })
  @ValidateNested()
  @Type(() => UserProfile)
  userProfilesOrdersEmployeeIdTouserProfiles?: UserProfile;

  @ApiProperty({
    required: true,
    type: () => UserProfile,
  })
  @ValidateNested()
  @Type(() => UserProfile)
  userProfilesOrdersUserIdTouserProfiles?: UserProfile;

  @ApiProperty({
    required: false,
    type: () => [UserRating],
  })
  @ValidateNested()
  @Type(() => UserRating)
  @IsOptional()
  userRatings?: Array<UserRating>;
}

export { Order as Order };
