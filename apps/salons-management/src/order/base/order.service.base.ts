/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Order as PrismaOrder,
  Appointment as PrismaAppointment,
  Deposit as PrismaDeposit,
  EmployeeTask as PrismaEmployeeTask,
  LoyaltyTransaction as PrismaLoyaltyTransaction,
  OrderImage as PrismaOrderImage,
  Queue as PrismaQueue,
  Transaction as PrismaTransaction,
  UserRating as PrismaUserRating,
  Discount as PrismaDiscount,
  Payment as PrismaPayment,
  Promocode as PrismaPromocode,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class OrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OrderCountArgs, "select">): Promise<number> {
    return this.prisma.order.count(args);
  }

  async orders(args: Prisma.OrderFindManyArgs): Promise<PrismaOrder[]> {
    return this.prisma.order.findMany(args);
  }
  async order(args: Prisma.OrderFindUniqueArgs): Promise<PrismaOrder | null> {
    return this.prisma.order.findUnique(args);
  }
  async createOrder(args: Prisma.OrderCreateArgs): Promise<PrismaOrder> {
    return this.prisma.order.create(args);
  }
  async updateOrder(args: Prisma.OrderUpdateArgs): Promise<PrismaOrder> {
    return this.prisma.order.update(args);
  }
  async deleteOrder(args: Prisma.OrderDeleteArgs): Promise<PrismaOrder> {
    return this.prisma.order.delete(args);
  }

  async findAppointmentsAppointmentsOrderIdToorders(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsAppointmentsOrderIdToorders(args);
  }

  async findDeposits(
    parentId: string,
    args: Prisma.DepositFindManyArgs
  ): Promise<PrismaDeposit[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deposits(args);
  }

  async findEmployeeTasks(
    parentId: string,
    args: Prisma.EmployeeTaskFindManyArgs
  ): Promise<PrismaEmployeeTask[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasks(args);
  }

  async findLoyaltyTransactions(
    parentId: string,
    args: Prisma.LoyaltyTransactionFindManyArgs
  ): Promise<PrismaLoyaltyTransaction[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loyaltyTransactions(args);
  }

  async findOrderImages(
    parentId: string,
    args: Prisma.OrderImageFindManyArgs
  ): Promise<PrismaOrderImage[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderImages(args);
  }

  async findQueuesQueuesOrderIdToorders(
    parentId: string,
    args: Prisma.QueueFindManyArgs
  ): Promise<PrismaQueue[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queuesQueuesOrderIdToorders(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async findUserRatings(
    parentId: string,
    args: Prisma.UserRatingFindManyArgs
  ): Promise<PrismaUserRating[]> {
    return this.prisma.order
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userRatings(args);
  }

  async getAppointmentsOrdersAppointmentIdToappointments(
    parentId: string
  ): Promise<PrismaAppointment | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .appointmentsOrdersAppointmentIdToappointments();
  }

  async getDiscounts(parentId: string): Promise<PrismaDiscount | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .discounts();
  }

  async getPayments(parentId: string): Promise<PrismaPayment | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .payments();
  }

  async getPromocodes(parentId: string): Promise<PrismaPromocode | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .promocodes();
  }

  async getQueuesOrdersQueueIdToqueues(
    parentId: string
  ): Promise<PrismaQueue | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .queuesOrdersQueueIdToqueues();
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfilesOrdersEmployeeIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesOrdersEmployeeIdTouserProfiles();
  }

  async getUserProfilesOrdersUserIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.order
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesOrdersUserIdTouserProfiles();
  }
}
