/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserRatingService } from "../userRating.service";
import { UserRatingCreateInput } from "./UserRatingCreateInput";
import { UserRating } from "./UserRating";
import { UserRatingFindManyArgs } from "./UserRatingFindManyArgs";
import { UserRatingWhereUniqueInput } from "./UserRatingWhereUniqueInput";
import { UserRatingUpdateInput } from "./UserRatingUpdateInput";

export class UserRatingControllerBase {
  constructor(protected readonly service: UserRatingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserRating })
  async createUserRating(
    @common.Body() data: UserRatingCreateInput
  ): Promise<UserRating> {
    return await this.service.createUserRating({
      data: {
        ...data,

        orders: data.orders
          ? {
              connect: data.orders,
            }
          : undefined,

        userProfilesUserRatingsOwnerTouserProfiles: {
          connect: data.userProfilesUserRatingsOwnerTouserProfiles,
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          connect: data.userProfilesUserRatingsUserIdTouserProfiles,
        },
      },
      select: {
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        rating: true,
        review: true,

        userProfilesUserRatingsOwnerTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserRating] })
  @ApiNestedQuery(UserRatingFindManyArgs)
  async userRatings(@common.Req() request: Request): Promise<UserRating[]> {
    const args = plainToClass(UserRatingFindManyArgs, request.query);
    return this.service.userRatings({
      ...args,
      select: {
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        rating: true,
        review: true,

        userProfilesUserRatingsOwnerTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userRating(
    @common.Param() params: UserRatingWhereUniqueInput
  ): Promise<UserRating | null> {
    const result = await this.service.userRating({
      where: params,
      select: {
        createdAt: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        rating: true,
        review: true,

        userProfilesUserRatingsOwnerTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserRating(
    @common.Param() params: UserRatingWhereUniqueInput,
    @common.Body() data: UserRatingUpdateInput
  ): Promise<UserRating | null> {
    try {
      return await this.service.updateUserRating({
        where: params,
        data: {
          ...data,

          orders: data.orders
            ? {
                connect: data.orders,
              }
            : undefined,

          userProfilesUserRatingsOwnerTouserProfiles: {
            connect: data.userProfilesUserRatingsOwnerTouserProfiles,
          },

          userProfilesUserRatingsUserIdTouserProfiles: {
            connect: data.userProfilesUserRatingsUserIdTouserProfiles,
          },
        },
        select: {
          createdAt: true,
          id: true,

          orders: {
            select: {
              id: true,
            },
          },

          rating: true,
          review: true,

          userProfilesUserRatingsOwnerTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesUserRatingsUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserRating(
    @common.Param() params: UserRatingWhereUniqueInput
  ): Promise<UserRating | null> {
    try {
      return await this.service.deleteUserRating({
        where: params,
        select: {
          createdAt: true,
          id: true,

          orders: {
            select: {
              id: true,
            },
          },

          rating: true,
          review: true,

          userProfilesUserRatingsOwnerTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesUserRatingsUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
