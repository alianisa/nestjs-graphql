/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserRating } from "./UserRating";
import { UserRatingCountArgs } from "./UserRatingCountArgs";
import { UserRatingFindManyArgs } from "./UserRatingFindManyArgs";
import { UserRatingFindUniqueArgs } from "./UserRatingFindUniqueArgs";
import { CreateUserRatingArgs } from "./CreateUserRatingArgs";
import { UpdateUserRatingArgs } from "./UpdateUserRatingArgs";
import { DeleteUserRatingArgs } from "./DeleteUserRatingArgs";
import { Order } from "../../order/base/Order";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserRatingService } from "../userRating.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserRating)
export class UserRatingResolverBase {
  constructor(
    protected readonly service: UserRatingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "read",
    possession: "any",
  })
  async _userRatingsMeta(
    @graphql.Args() args: UserRatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserRating])
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "read",
    possession: "any",
  })
  async userRatings(
    @graphql.Args() args: UserRatingFindManyArgs
  ): Promise<UserRating[]> {
    return this.service.userRatings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserRating, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "read",
    possession: "own",
  })
  async userRating(
    @graphql.Args() args: UserRatingFindUniqueArgs
  ): Promise<UserRating | null> {
    const result = await this.service.userRating(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRating)
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "create",
    possession: "any",
  })
  async createUserRating(
    @graphql.Args() args: CreateUserRatingArgs
  ): Promise<UserRating> {
    return await this.service.createUserRating({
      ...args,
      data: {
        ...args.data,

        orders: args.data.orders
          ? {
              connect: args.data.orders,
            }
          : undefined,

        userProfilesUserRatingsOwnerTouserProfiles: {
          connect: args.data.userProfilesUserRatingsOwnerTouserProfiles,
        },

        userProfilesUserRatingsUserIdTouserProfiles: {
          connect: args.data.userProfilesUserRatingsUserIdTouserProfiles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRating)
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "update",
    possession: "any",
  })
  async updateUserRating(
    @graphql.Args() args: UpdateUserRatingArgs
  ): Promise<UserRating | null> {
    try {
      return await this.service.updateUserRating({
        ...args,
        data: {
          ...args.data,

          orders: args.data.orders
            ? {
                connect: args.data.orders,
              }
            : undefined,

          userProfilesUserRatingsOwnerTouserProfiles: {
            connect: args.data.userProfilesUserRatingsOwnerTouserProfiles,
          },

          userProfilesUserRatingsUserIdTouserProfiles: {
            connect: args.data.userProfilesUserRatingsUserIdTouserProfiles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserRating)
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "delete",
    possession: "any",
  })
  async deleteUserRating(
    @graphql.Args() args: DeleteUserRatingArgs
  ): Promise<UserRating | null> {
    try {
      return await this.service.deleteUserRating(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orders",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrders(@graphql.Parent() parent: UserRating): Promise<Order | null> {
    const result = await this.service.getOrders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesUserRatingsOwnerTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfilesUserRatingsOwnerTouserProfiles(
    @graphql.Parent() parent: UserRating
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesUserRatingsOwnerTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesUserRatingsUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfilesUserRatingsUserIdTouserProfiles(
    @graphql.Parent() parent: UserRating
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesUserRatingsUserIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
