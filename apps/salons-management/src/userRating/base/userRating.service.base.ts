/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserRating as PrismaUserRating,
  Order as PrismaOrder,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class UserRatingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserRatingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userRating.count(args);
  }

  async userRatings(
    args: Prisma.UserRatingFindManyArgs
  ): Promise<PrismaUserRating[]> {
    return this.prisma.userRating.findMany(args);
  }
  async userRating(
    args: Prisma.UserRatingFindUniqueArgs
  ): Promise<PrismaUserRating | null> {
    return this.prisma.userRating.findUnique(args);
  }
  async createUserRating(
    args: Prisma.UserRatingCreateArgs
  ): Promise<PrismaUserRating> {
    return this.prisma.userRating.create(args);
  }
  async updateUserRating(
    args: Prisma.UserRatingUpdateArgs
  ): Promise<PrismaUserRating> {
    return this.prisma.userRating.update(args);
  }
  async deleteUserRating(
    args: Prisma.UserRatingDeleteArgs
  ): Promise<PrismaUserRating> {
    return this.prisma.userRating.delete(args);
  }

  async getOrders(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.userRating
      .findUnique({
        where: { id: parentId },
      })
      .orders();
  }

  async getUserProfilesUserRatingsOwnerTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.userRating
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesUserRatingsOwnerTouserProfiles();
  }

  async getUserProfilesUserRatingsUserIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.userRating
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesUserRatingsUserIdTouserProfiles();
  }
}
