/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { MetricService } from "../metric.service";
import { MetricCreateInput } from "./MetricCreateInput";
import { MetricWhereInput } from "./MetricWhereInput";
import { MetricWhereUniqueInput } from "./MetricWhereUniqueInput";
import { MetricFindManyArgs } from "./MetricFindManyArgs";
import { MetricUpdateInput } from "./MetricUpdateInput";
import { Metric } from "./Metric";

export class MetricGrpcControllerBase {
  constructor(protected readonly service: MetricService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Metric })
  @GrpcMethod("MetricService", "createMetric")
  async createMetric(@common.Body() data: MetricCreateInput): Promise<Metric> {
    return await this.service.createMetric({
      data: data,
      select: {
        duration: true,
        id: true,
        metadata: true,
        success: true,
        timestamp: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Metric] })
  @ApiNestedQuery(MetricFindManyArgs)
  @GrpcMethod("MetricService", "metrics")
  async metrics(@common.Req() request: Request): Promise<Metric[]> {
    const args = plainToClass(MetricFindManyArgs, request.query);
    return this.service.metrics({
      ...args,
      select: {
        duration: true,
        id: true,
        metadata: true,
        success: true,
        timestamp: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Metric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MetricService", "metric")
  async metric(
    @common.Param() params: MetricWhereUniqueInput
  ): Promise<Metric | null> {
    const result = await this.service.metric({
      where: params,
      select: {
        duration: true,
        id: true,
        metadata: true,
        success: true,
        timestamp: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Metric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MetricService", "updateMetric")
  async updateMetric(
    @common.Param() params: MetricWhereUniqueInput,
    @common.Body() data: MetricUpdateInput
  ): Promise<Metric | null> {
    try {
      return await this.service.updateMetric({
        where: params,
        data: data,
        select: {
          duration: true,
          id: true,
          metadata: true,
          success: true,
          timestamp: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Metric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MetricService", "deleteMetric")
  async deleteMetric(
    @common.Param() params: MetricWhereUniqueInput
  ): Promise<Metric | null> {
    try {
      return await this.service.deleteMetric({
        where: params,
        select: {
          duration: true,
          id: true,
          metadata: true,
          success: true,
          timestamp: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
