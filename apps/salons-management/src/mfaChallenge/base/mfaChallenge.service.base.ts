/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MfaChallenge as PrismaMfaChallenge,
  MfaFactor as PrismaMfaFactor,
} from "@prisma/client";

export class MfaChallengeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MfaChallengeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mfaChallenge.count(args);
  }

  async mfaChallenges(
    args: Prisma.MfaChallengeFindManyArgs
  ): Promise<PrismaMfaChallenge[]> {
    return this.prisma.mfaChallenge.findMany(args);
  }
  async mfaChallenge(
    args: Prisma.MfaChallengeFindUniqueArgs
  ): Promise<PrismaMfaChallenge | null> {
    return this.prisma.mfaChallenge.findUnique(args);
  }
  async createMfaChallenge(
    args: Prisma.MfaChallengeCreateArgs
  ): Promise<PrismaMfaChallenge> {
    return this.prisma.mfaChallenge.create(args);
  }
  async updateMfaChallenge(
    args: Prisma.MfaChallengeUpdateArgs
  ): Promise<PrismaMfaChallenge> {
    return this.prisma.mfaChallenge.update(args);
  }
  async deleteMfaChallenge(
    args: Prisma.MfaChallengeDeleteArgs
  ): Promise<PrismaMfaChallenge> {
    return this.prisma.mfaChallenge.delete(args);
  }

  async getMfaFactors(parentId: string): Promise<PrismaMfaFactor | null> {
    return this.prisma.mfaChallenge
      .findUnique({
        where: { id: parentId },
      })
      .mfaFactors();
  }
}
