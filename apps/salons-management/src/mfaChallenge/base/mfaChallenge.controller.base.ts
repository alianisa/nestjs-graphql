/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MfaChallengeService } from "../mfaChallenge.service";
import { MfaChallengeCreateInput } from "./MfaChallengeCreateInput";
import { MfaChallenge } from "./MfaChallenge";
import { MfaChallengeFindManyArgs } from "./MfaChallengeFindManyArgs";
import { MfaChallengeWhereUniqueInput } from "./MfaChallengeWhereUniqueInput";
import { MfaChallengeUpdateInput } from "./MfaChallengeUpdateInput";

export class MfaChallengeControllerBase {
  constructor(protected readonly service: MfaChallengeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MfaChallenge })
  async createMfaChallenge(
    @common.Body() data: MfaChallengeCreateInput
  ): Promise<MfaChallenge> {
    return await this.service.createMfaChallenge({
      data: {
        ...data,

        mfaFactors: {
          connect: data.mfaFactors,
        },
      },
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,

        mfaFactors: {
          select: {
            id: true,
          },
        },

        otpCode: true,
        verifiedAt: true,
        webAuthnSessionData: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MfaChallenge] })
  @ApiNestedQuery(MfaChallengeFindManyArgs)
  async mfaChallenges(@common.Req() request: Request): Promise<MfaChallenge[]> {
    const args = plainToClass(MfaChallengeFindManyArgs, request.query);
    return this.service.mfaChallenges({
      ...args,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,

        mfaFactors: {
          select: {
            id: true,
          },
        },

        otpCode: true,
        verifiedAt: true,
        webAuthnSessionData: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MfaChallenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mfaChallenge(
    @common.Param() params: MfaChallengeWhereUniqueInput
  ): Promise<MfaChallenge | null> {
    const result = await this.service.mfaChallenge({
      where: params,
      select: {
        createdAt: true,
        id: true,
        ipAddress: true,

        mfaFactors: {
          select: {
            id: true,
          },
        },

        otpCode: true,
        verifiedAt: true,
        webAuthnSessionData: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MfaChallenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMfaChallenge(
    @common.Param() params: MfaChallengeWhereUniqueInput,
    @common.Body() data: MfaChallengeUpdateInput
  ): Promise<MfaChallenge | null> {
    try {
      return await this.service.updateMfaChallenge({
        where: params,
        data: {
          ...data,

          mfaFactors: {
            connect: data.mfaFactors,
          },
        },
        select: {
          createdAt: true,
          id: true,
          ipAddress: true,

          mfaFactors: {
            select: {
              id: true,
            },
          },

          otpCode: true,
          verifiedAt: true,
          webAuthnSessionData: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MfaChallenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMfaChallenge(
    @common.Param() params: MfaChallengeWhereUniqueInput
  ): Promise<MfaChallenge | null> {
    try {
      return await this.service.deleteMfaChallenge({
        where: params,
        select: {
          createdAt: true,
          id: true,
          ipAddress: true,

          mfaFactors: {
            select: {
              id: true,
            },
          },

          otpCode: true,
          verifiedAt: true,
          webAuthnSessionData: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
