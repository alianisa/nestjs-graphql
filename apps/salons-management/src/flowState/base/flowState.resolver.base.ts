/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FlowState } from "./FlowState";
import { FlowStateCountArgs } from "./FlowStateCountArgs";
import { FlowStateFindManyArgs } from "./FlowStateFindManyArgs";
import { FlowStateFindUniqueArgs } from "./FlowStateFindUniqueArgs";
import { CreateFlowStateArgs } from "./CreateFlowStateArgs";
import { UpdateFlowStateArgs } from "./UpdateFlowStateArgs";
import { DeleteFlowStateArgs } from "./DeleteFlowStateArgs";
import { SamlRelayStateFindManyArgs } from "../../samlRelayState/base/SamlRelayStateFindManyArgs";
import { SamlRelayState } from "../../samlRelayState/base/SamlRelayState";
import { FlowStateService } from "../flowState.service";
@graphql.Resolver(() => FlowState)
export class FlowStateResolverBase {
  constructor(protected readonly service: FlowStateService) {}

  async _flowStatesMeta(
    @graphql.Args() args: FlowStateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FlowState])
  async flowStates(
    @graphql.Args() args: FlowStateFindManyArgs
  ): Promise<FlowState[]> {
    return this.service.flowStates(args);
  }

  @graphql.Query(() => FlowState, { nullable: true })
  async flowState(
    @graphql.Args() args: FlowStateFindUniqueArgs
  ): Promise<FlowState | null> {
    const result = await this.service.flowState(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FlowState)
  async createFlowState(
    @graphql.Args() args: CreateFlowStateArgs
  ): Promise<FlowState> {
    return await this.service.createFlowState({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FlowState)
  async updateFlowState(
    @graphql.Args() args: UpdateFlowStateArgs
  ): Promise<FlowState | null> {
    try {
      return await this.service.updateFlowState({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlowState)
  async deleteFlowState(
    @graphql.Args() args: DeleteFlowStateArgs
  ): Promise<FlowState | null> {
    try {
      return await this.service.deleteFlowState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SamlRelayState], { name: "samlRelayStates" })
  async findSamlRelayStates(
    @graphql.Parent() parent: FlowState,
    @graphql.Args() args: SamlRelayStateFindManyArgs
  ): Promise<SamlRelayState[]> {
    const results = await this.service.findSamlRelayStates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
