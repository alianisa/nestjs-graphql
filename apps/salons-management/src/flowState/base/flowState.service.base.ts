/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FlowState as PrismaFlowState,
  SamlRelayState as PrismaSamlRelayState,
} from "@prisma/client";

export class FlowStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FlowStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.flowState.count(args);
  }

  async flowStates(
    args: Prisma.FlowStateFindManyArgs
  ): Promise<PrismaFlowState[]> {
    return this.prisma.flowState.findMany(args);
  }
  async flowState(
    args: Prisma.FlowStateFindUniqueArgs
  ): Promise<PrismaFlowState | null> {
    return this.prisma.flowState.findUnique(args);
  }
  async createFlowState(
    args: Prisma.FlowStateCreateArgs
  ): Promise<PrismaFlowState> {
    return this.prisma.flowState.create(args);
  }
  async updateFlowState(
    args: Prisma.FlowStateUpdateArgs
  ): Promise<PrismaFlowState> {
    return this.prisma.flowState.update(args);
  }
  async deleteFlowState(
    args: Prisma.FlowStateDeleteArgs
  ): Promise<PrismaFlowState> {
    return this.prisma.flowState.delete(args);
  }

  async findSamlRelayStates(
    parentId: string,
    args: Prisma.SamlRelayStateFindManyArgs
  ): Promise<PrismaSamlRelayState[]> {
    return this.prisma.flowState
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .samlRelayStates(args);
  }
}
