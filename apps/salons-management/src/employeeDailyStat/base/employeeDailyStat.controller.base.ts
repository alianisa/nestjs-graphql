/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployeeDailyStatService } from "../employeeDailyStat.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployeeDailyStatCreateInput } from "./EmployeeDailyStatCreateInput";
import { EmployeeDailyStat } from "./EmployeeDailyStat";
import { EmployeeDailyStatFindManyArgs } from "./EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStatWhereUniqueInput } from "./EmployeeDailyStatWhereUniqueInput";
import { EmployeeDailyStatUpdateInput } from "./EmployeeDailyStatUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployeeDailyStatControllerBase {
  constructor(
    protected readonly service: EmployeeDailyStatService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeDailyStat })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmployeeDailyStat(
    @common.Body() data: EmployeeDailyStatCreateInput
  ): Promise<EmployeeDailyStat> {
    return await this.service.createEmployeeDailyStat({
      data: {
        ...data,

        salons: {
          connect: data.salons,
        },

        userProfiles: {
          connect: data.userProfiles,
        },
      },
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeDailyStat] })
  @ApiNestedQuery(EmployeeDailyStatFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeDailyStats(
    @common.Req() request: Request
  ): Promise<EmployeeDailyStat[]> {
    const args = plainToClass(EmployeeDailyStatFindManyArgs, request.query);
    return this.service.employeeDailyStats({
      ...args,
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeDailyStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeDailyStat(
    @common.Param() params: EmployeeDailyStatWhereUniqueInput
  ): Promise<EmployeeDailyStat | null> {
    const result = await this.service.employeeDailyStat({
      where: params,
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeDailyStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmployeeDailyStat(
    @common.Param() params: EmployeeDailyStatWhereUniqueInput,
    @common.Body() data: EmployeeDailyStatUpdateInput
  ): Promise<EmployeeDailyStat | null> {
    try {
      return await this.service.updateEmployeeDailyStat({
        where: params,
        data: {
          ...data,

          salons: {
            connect: data.salons,
          },

          userProfiles: {
            connect: data.userProfiles,
          },
        },
        select: {
          averageOrderAmount: true,
          averageServiceTime: true,
          avgServiceTimeChangePercent: true,
          avgServiceTimeTrend: true,
          bestServiceTime: true,
          canceledOrders: true,
          cardRevenue: true,
          cashRevenue: true,
          clientsChangePercent: true,
          clientsTrend: true,
          completedOrders: true,
          createdAt: true,
          dailyRating: true,
          date: true,
          efficiencyChangePercent: true,
          efficiencyRate: true,
          efficiencyTrend: true,
          firstOrderTime: true,
          id: true,
          lastOrderTime: true,
          monthToDateOrders: true,
          monthToDateRevenue: true,
          newClients: true,
          offPeakOrders: true,
          ordersChangePercent: true,
          ordersCount: true,
          ordersTrend: true,
          overtimeHours: true,
          peakHoursOrders: true,
          performanceScore: true,
          prevMonthOrders: true,
          prevMonthRevenue: true,
          ratingChangePercent: true,
          ratingTrend: true,
          ratingsCount: true,
          repeatClients: true,
          revenue: true,
          revenueChangePercent: true,
          revenueTrend: true,

          salons: {
            select: {
              id: true,
            },
          },

          scheduledHours: true,
          servicesCount: true,
          totalBreaksTime: true,
          totalClients: true,
          totalIdleTime: true,
          totalWorkedHours: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },

          workTime: true,
          worstServiceTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeDailyStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployeeDailyStat(
    @common.Param() params: EmployeeDailyStatWhereUniqueInput
  ): Promise<EmployeeDailyStat | null> {
    try {
      return await this.service.deleteEmployeeDailyStat({
        where: params,
        select: {
          averageOrderAmount: true,
          averageServiceTime: true,
          avgServiceTimeChangePercent: true,
          avgServiceTimeTrend: true,
          bestServiceTime: true,
          canceledOrders: true,
          cardRevenue: true,
          cashRevenue: true,
          clientsChangePercent: true,
          clientsTrend: true,
          completedOrders: true,
          createdAt: true,
          dailyRating: true,
          date: true,
          efficiencyChangePercent: true,
          efficiencyRate: true,
          efficiencyTrend: true,
          firstOrderTime: true,
          id: true,
          lastOrderTime: true,
          monthToDateOrders: true,
          monthToDateRevenue: true,
          newClients: true,
          offPeakOrders: true,
          ordersChangePercent: true,
          ordersCount: true,
          ordersTrend: true,
          overtimeHours: true,
          peakHoursOrders: true,
          performanceScore: true,
          prevMonthOrders: true,
          prevMonthRevenue: true,
          ratingChangePercent: true,
          ratingTrend: true,
          ratingsCount: true,
          repeatClients: true,
          revenue: true,
          revenueChangePercent: true,
          revenueTrend: true,

          salons: {
            select: {
              id: true,
            },
          },

          scheduledHours: true,
          servicesCount: true,
          totalBreaksTime: true,
          totalClients: true,
          totalIdleTime: true,
          totalWorkedHours: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },

          workTime: true,
          worstServiceTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
