/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserAddressService } from "../userAddress.service";
import { UserAddressCreateInput } from "./UserAddressCreateInput";
import { UserAddressWhereInput } from "./UserAddressWhereInput";
import { UserAddressWhereUniqueInput } from "./UserAddressWhereUniqueInput";
import { UserAddressFindManyArgs } from "./UserAddressFindManyArgs";
import { UserAddressUpdateInput } from "./UserAddressUpdateInput";
import { UserAddress } from "./UserAddress";

export class UserAddressGrpcControllerBase {
  constructor(protected readonly service: UserAddressService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAddress })
  @GrpcMethod("UserAddressService", "createUserAddress")
  async createUserAddress(
    @common.Body() data: UserAddressCreateInput
  ): Promise<UserAddress> {
    return await this.service.createUserAddress({
      data: {
        ...data,

        userProfiles: {
          connect: data.userProfiles,
        },
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAddress] })
  @ApiNestedQuery(UserAddressFindManyArgs)
  @GrpcMethod("UserAddressService", "userAddresses")
  async userAddresses(@common.Req() request: Request): Promise<UserAddress[]> {
    const args = plainToClass(UserAddressFindManyArgs, request.query);
    return this.service.userAddresses({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAddressService", "userAddress")
  async userAddress(
    @common.Param() params: UserAddressWhereUniqueInput
  ): Promise<UserAddress | null> {
    const result = await this.service.userAddress({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAddressService", "updateUserAddress")
  async updateUserAddress(
    @common.Param() params: UserAddressWhereUniqueInput,
    @common.Body() data: UserAddressUpdateInput
  ): Promise<UserAddress | null> {
    try {
      return await this.service.updateUserAddress({
        where: params,
        data: {
          ...data,

          userProfiles: {
            connect: data.userProfiles,
          },
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          lat: true,
          lng: true,
          name: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAddress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAddressService", "deleteUserAddress")
  async deleteUserAddress(
    @common.Param() params: UserAddressWhereUniqueInput
  ): Promise<UserAddress | null> {
    try {
      return await this.service.deleteUserAddress({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          lat: true,
          lng: true,
          name: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
