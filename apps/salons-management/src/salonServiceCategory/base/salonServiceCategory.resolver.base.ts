/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalonServiceCategory } from "./SalonServiceCategory";
import { SalonServiceCategoryCountArgs } from "./SalonServiceCategoryCountArgs";
import { SalonServiceCategoryFindManyArgs } from "./SalonServiceCategoryFindManyArgs";
import { SalonServiceCategoryFindUniqueArgs } from "./SalonServiceCategoryFindUniqueArgs";
import { CreateSalonServiceCategoryArgs } from "./CreateSalonServiceCategoryArgs";
import { UpdateSalonServiceCategoryArgs } from "./UpdateSalonServiceCategoryArgs";
import { DeleteSalonServiceCategoryArgs } from "./DeleteSalonServiceCategoryArgs";
import { SalonServiceFindManyArgs } from "../../salonService/base/SalonServiceFindManyArgs";
import { SalonService } from "../../salonService/base/SalonService";
import { SalonServiceCategoryService } from "../salonServiceCategory.service";
@graphql.Resolver(() => SalonServiceCategory)
export class SalonServiceCategoryResolverBase {
  constructor(protected readonly service: SalonServiceCategoryService) {}

  async _salonServiceCategoriesMeta(
    @graphql.Args() args: SalonServiceCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalonServiceCategory])
  async salonServiceCategories(
    @graphql.Args() args: SalonServiceCategoryFindManyArgs
  ): Promise<SalonServiceCategory[]> {
    return this.service.salonServiceCategories(args);
  }

  @graphql.Query(() => SalonServiceCategory, { nullable: true })
  async salonServiceCategory(
    @graphql.Args() args: SalonServiceCategoryFindUniqueArgs
  ): Promise<SalonServiceCategory | null> {
    const result = await this.service.salonServiceCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalonServiceCategory)
  async createSalonServiceCategory(
    @graphql.Args() args: CreateSalonServiceCategoryArgs
  ): Promise<SalonServiceCategory> {
    return await this.service.createSalonServiceCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalonServiceCategory)
  async updateSalonServiceCategory(
    @graphql.Args() args: UpdateSalonServiceCategoryArgs
  ): Promise<SalonServiceCategory | null> {
    try {
      return await this.service.updateSalonServiceCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalonServiceCategory)
  async deleteSalonServiceCategory(
    @graphql.Args() args: DeleteSalonServiceCategoryArgs
  ): Promise<SalonServiceCategory | null> {
    try {
      return await this.service.deleteSalonServiceCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SalonService], { name: "salonServices" })
  async findSalonServices(
    @graphql.Parent() parent: SalonServiceCategory,
    @graphql.Args() args: SalonServiceFindManyArgs
  ): Promise<SalonService[]> {
    const results = await this.service.findSalonServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
