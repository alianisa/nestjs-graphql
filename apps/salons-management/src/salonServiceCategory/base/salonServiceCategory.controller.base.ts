/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SalonServiceCategoryService } from "../salonServiceCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SalonServiceCategoryCreateInput } from "./SalonServiceCategoryCreateInput";
import { SalonServiceCategory } from "./SalonServiceCategory";
import { SalonServiceCategoryFindManyArgs } from "./SalonServiceCategoryFindManyArgs";
import { SalonServiceCategoryWhereUniqueInput } from "./SalonServiceCategoryWhereUniqueInput";
import { SalonServiceCategoryUpdateInput } from "./SalonServiceCategoryUpdateInput";
import { SalonServiceFindManyArgs } from "../../salonService/base/SalonServiceFindManyArgs";
import { SalonService } from "../../salonService/base/SalonService";
import { SalonServiceWhereUniqueInput } from "../../salonService/base/SalonServiceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SalonServiceCategoryControllerBase {
  constructor(
    protected readonly service: SalonServiceCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonServiceCategory })
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSalonServiceCategory(
    @common.Body() data: SalonServiceCategoryCreateInput
  ): Promise<SalonServiceCategory> {
    return await this.service.createSalonServiceCategory({
      data: data,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonServiceCategory] })
  @ApiNestedQuery(SalonServiceCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async salonServiceCategories(
    @common.Req() request: Request
  ): Promise<SalonServiceCategory[]> {
    const args = plainToClass(SalonServiceCategoryFindManyArgs, request.query);
    return this.service.salonServiceCategories({
      ...args,
      select: {
        id: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonServiceCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async salonServiceCategory(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput
  ): Promise<SalonServiceCategory | null> {
    const result = await this.service.salonServiceCategory({
      where: params,
      select: {
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonServiceCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSalonServiceCategory(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput,
    @common.Body() data: SalonServiceCategoryUpdateInput
  ): Promise<SalonServiceCategory | null> {
    try {
      return await this.service.updateSalonServiceCategory({
        where: params,
        data: data,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonServiceCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSalonServiceCategory(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput
  ): Promise<SalonServiceCategory | null> {
    try {
      return await this.service.deleteSalonServiceCategory({
        where: params,
        select: {
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salonServices")
  @ApiNestedQuery(SalonServiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalonService",
    action: "read",
    possession: "any",
  })
  async findSalonServices(
    @common.Req() request: Request,
    @common.Param() params: SalonServiceCategoryWhereUniqueInput
  ): Promise<SalonService[]> {
    const query = plainToClass(SalonServiceFindManyArgs, request.query);
    const results = await this.service.findSalonServices(params.id, {
      ...query,
      select: {
        description: true,
        duration: true,
        id: true,
        img: true,
        name: true,
        price: true,

        salonServiceCategories: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonServices")
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "update",
    possession: "any",
  })
  async connectSalonServices(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        connect: body,
      },
    };
    await this.service.updateSalonServiceCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonServices")
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "update",
    possession: "any",
  })
  async updateSalonServices(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        set: body,
      },
    };
    await this.service.updateSalonServiceCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonServices")
  @nestAccessControl.UseRoles({
    resource: "SalonServiceCategory",
    action: "update",
    possession: "any",
  })
  async disconnectSalonServices(
    @common.Param() params: SalonServiceCategoryWhereUniqueInput,
    @common.Body() body: SalonServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonServices: {
        disconnect: body,
      },
    };
    await this.service.updateSalonServiceCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
