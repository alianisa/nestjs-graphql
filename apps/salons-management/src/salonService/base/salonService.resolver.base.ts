/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalonService } from "./SalonService";
import { SalonServiceCountArgs } from "./SalonServiceCountArgs";
import { SalonServiceFindManyArgs } from "./SalonServiceFindManyArgs";
import { SalonServiceFindUniqueArgs } from "./SalonServiceFindUniqueArgs";
import { CreateSalonServiceArgs } from "./CreateSalonServiceArgs";
import { UpdateSalonServiceArgs } from "./UpdateSalonServiceArgs";
import { DeleteSalonServiceArgs } from "./DeleteSalonServiceArgs";
import { SalonServiceCategory } from "../../salonServiceCategory/base/SalonServiceCategory";
import { Salon } from "../../salon/base/Salon";
import { SalonServiceService } from "../salonService.service";
@graphql.Resolver(() => SalonService)
export class SalonServiceResolverBase {
  constructor(protected readonly service: SalonServiceService) {}

  async _salonServicesMeta(
    @graphql.Args() args: SalonServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalonService])
  async salonServices(
    @graphql.Args() args: SalonServiceFindManyArgs
  ): Promise<SalonService[]> {
    return this.service.salonServices(args);
  }

  @graphql.Query(() => SalonService, { nullable: true })
  async salonService(
    @graphql.Args() args: SalonServiceFindUniqueArgs
  ): Promise<SalonService | null> {
    const result = await this.service.salonService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalonService)
  async createSalonService(
    @graphql.Args() args: CreateSalonServiceArgs
  ): Promise<SalonService> {
    return await this.service.createSalonService({
      ...args,
      data: {
        ...args.data,

        salonServiceCategories: args.data.salonServiceCategories
          ? {
              connect: args.data.salonServiceCategories,
            }
          : undefined,

        salons: args.data.salons
          ? {
              connect: args.data.salons,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SalonService)
  async updateSalonService(
    @graphql.Args() args: UpdateSalonServiceArgs
  ): Promise<SalonService | null> {
    try {
      return await this.service.updateSalonService({
        ...args,
        data: {
          ...args.data,

          salonServiceCategories: args.data.salonServiceCategories
            ? {
                connect: args.data.salonServiceCategories,
              }
            : undefined,

          salons: args.data.salons
            ? {
                connect: args.data.salons,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalonService)
  async deleteSalonService(
    @graphql.Args() args: DeleteSalonServiceArgs
  ): Promise<SalonService | null> {
    try {
      return await this.service.deleteSalonService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => SalonServiceCategory, {
    nullable: true,
    name: "salonServiceCategories",
  })
  async getSalonServiceCategories(
    @graphql.Parent() parent: SalonService
  ): Promise<SalonServiceCategory | null> {
    const result = await this.service.getSalonServiceCategories(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  async getSalons(
    @graphql.Parent() parent: SalonService
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
