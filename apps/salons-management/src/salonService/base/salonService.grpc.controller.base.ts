/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SalonServiceService } from "../salonService.service";
import { SalonServiceCreateInput } from "./SalonServiceCreateInput";
import { SalonServiceWhereInput } from "./SalonServiceWhereInput";
import { SalonServiceWhereUniqueInput } from "./SalonServiceWhereUniqueInput";
import { SalonServiceFindManyArgs } from "./SalonServiceFindManyArgs";
import { SalonServiceUpdateInput } from "./SalonServiceUpdateInput";
import { SalonService } from "./SalonService";

export class SalonServiceGrpcControllerBase {
  constructor(protected readonly service: SalonServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonService })
  @GrpcMethod("SalonServiceService", "createSalonService")
  async createSalonService(
    @common.Body() data: SalonServiceCreateInput
  ): Promise<SalonService> {
    return await this.service.createSalonService({
      data: {
        ...data,

        salonServiceCategories: data.salonServiceCategories
          ? {
              connect: data.salonServiceCategories,
            }
          : undefined,

        salons: data.salons
          ? {
              connect: data.salons,
            }
          : undefined,
      },
      select: {
        description: true,
        duration: true,
        id: true,
        img: true,
        name: true,
        price: true,

        salonServiceCategories: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonService] })
  @ApiNestedQuery(SalonServiceFindManyArgs)
  @GrpcMethod("SalonServiceService", "salonServices")
  async salonServices(@common.Req() request: Request): Promise<SalonService[]> {
    const args = plainToClass(SalonServiceFindManyArgs, request.query);
    return this.service.salonServices({
      ...args,
      select: {
        description: true,
        duration: true,
        id: true,
        img: true,
        name: true,
        price: true,

        salonServiceCategories: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonServiceService", "salonService")
  async salonService(
    @common.Param() params: SalonServiceWhereUniqueInput
  ): Promise<SalonService | null> {
    const result = await this.service.salonService({
      where: params,
      select: {
        description: true,
        duration: true,
        id: true,
        img: true,
        name: true,
        price: true,

        salonServiceCategories: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonServiceService", "updateSalonService")
  async updateSalonService(
    @common.Param() params: SalonServiceWhereUniqueInput,
    @common.Body() data: SalonServiceUpdateInput
  ): Promise<SalonService | null> {
    try {
      return await this.service.updateSalonService({
        where: params,
        data: {
          ...data,

          salonServiceCategories: data.salonServiceCategories
            ? {
                connect: data.salonServiceCategories,
              }
            : undefined,

          salons: data.salons
            ? {
                connect: data.salons,
              }
            : undefined,
        },
        select: {
          description: true,
          duration: true,
          id: true,
          img: true,
          name: true,
          price: true,

          salonServiceCategories: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SalonServiceService", "deleteSalonService")
  async deleteSalonService(
    @common.Param() params: SalonServiceWhereUniqueInput
  ): Promise<SalonService | null> {
    try {
      return await this.service.deleteSalonService({
        where: params,
        select: {
          description: true,
          duration: true,
          id: true,
          img: true,
          name: true,
          price: true,

          salonServiceCategories: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
