/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppointmentService } from "../appointment.service";
import { AppointmentCreateInput } from "./AppointmentCreateInput";
import { Appointment } from "./Appointment";
import { AppointmentFindManyArgs } from "./AppointmentFindManyArgs";
import { AppointmentWhereUniqueInput } from "./AppointmentWhereUniqueInput";
import { AppointmentUpdateInput } from "./AppointmentUpdateInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";

export class AppointmentControllerBase {
  constructor(protected readonly service: AppointmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Appointment })
  async createAppointment(
    @common.Body() data: AppointmentCreateInput
  ): Promise<Appointment> {
    return await this.service.createAppointment({
      data: {
        ...data,

        ordersAppointmentsOrderIdToorders:
          data.ordersAppointmentsOrderIdToorders
            ? {
                connect: data.ordersAppointmentsOrderIdToorders,
              }
            : undefined,

        timeSlots: {
          connect: data.timeSlots,
        },

        userProfiles: {
          connect: data.userProfiles,
        },
      },
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Appointment] })
  @ApiNestedQuery(AppointmentFindManyArgs)
  async appointments(@common.Req() request: Request): Promise<Appointment[]> {
    const args = plainToClass(AppointmentFindManyArgs, request.query);
    return this.service.appointments({
      ...args,
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Appointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appointment(
    @common.Param() params: AppointmentWhereUniqueInput
  ): Promise<Appointment | null> {
    const result = await this.service.appointment({
      where: params,
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Appointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppointment(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() data: AppointmentUpdateInput
  ): Promise<Appointment | null> {
    try {
      return await this.service.updateAppointment({
        where: params,
        data: {
          ...data,

          ordersAppointmentsOrderIdToorders:
            data.ordersAppointmentsOrderIdToorders
              ? {
                  connect: data.ordersAppointmentsOrderIdToorders,
                }
              : undefined,

          timeSlots: {
            connect: data.timeSlots,
          },

          userProfiles: {
            connect: data.userProfiles,
          },
        },
        select: {
          appointmentDate: true,
          employeeId: true,
          id: true,

          ordersAppointmentsOrderIdToorders: {
            select: {
              id: true,
            },
          },

          timeSlots: {
            select: {
              id: true,
            },
          },

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Appointment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppointment(
    @common.Param() params: AppointmentWhereUniqueInput
  ): Promise<Appointment | null> {
    try {
      return await this.service.deleteAppointment({
        where: params,
        select: {
          appointmentDate: true,
          employeeId: true,
          id: true,

          ordersAppointmentsOrderIdToorders: {
            select: {
              id: true,
            },
          },

          timeSlots: {
            select: {
              id: true,
            },
          },

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  async findEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: AppointmentWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersAppointmentIdToappointments")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrdersOrdersAppointmentIdToappointments(
    @common.Req() request: Request,
    @common.Param() params: AppointmentWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results =
      await this.service.findOrdersOrdersAppointmentIdToappointments(
        params.id,
        {
          ...query,
          select: {
            amount: true,

            appointmentsOrdersAppointmentIdToappointments: {
              select: {
                id: true,
              },
            },

            canceled: true,
            canceledReason: true,
            completed: true,
            completedAt: true,
            createdAt: true,
            depositAmount: true,
            discount: true,
            discountAmount: true,

            discounts: {
              select: {
                id: true,
              },
            },

            id: true,
            loyaltyPointsEarned: true,
            loyaltyPointsUsed: true,
            orderImageId: true,
            orderNumber: true,
            order_type: true,

            payments: {
              select: {
                id: true,
              },
            },

            promocodes: {
              select: {
                id: true,
              },
            },

            queuesOrdersQueueIdToqueues: {
              select: {
                id: true,
              },
            },

            salons: {
              select: {
                id: true,
              },
            },

            services: true,
            started: true,
            startedAt: true,
            status: true,
            totalAmount: true,
            updatedAt: true,

            userProfilesOrdersEmployeeIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesOrdersUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersAppointmentIdToappointments")
  async connectOrdersOrdersAppointmentIdToappointments(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersAppointmentIdToappointments: {
        connect: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersAppointmentIdToappointments")
  async updateOrdersOrdersAppointmentIdToappointments(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersAppointmentIdToappointments: {
        set: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersAppointmentIdToappointments")
  async disconnectOrdersOrdersAppointmentIdToappointments(
    @common.Param() params: AppointmentWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersAppointmentIdToappointments: {
        disconnect: body,
      },
    };
    await this.service.updateAppointment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
