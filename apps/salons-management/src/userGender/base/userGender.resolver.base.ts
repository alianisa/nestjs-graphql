/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserGender } from "./UserGender";
import { UserGenderCountArgs } from "./UserGenderCountArgs";
import { UserGenderFindManyArgs } from "./UserGenderFindManyArgs";
import { UserGenderFindUniqueArgs } from "./UserGenderFindUniqueArgs";
import { CreateUserGenderArgs } from "./CreateUserGenderArgs";
import { UpdateUserGenderArgs } from "./UpdateUserGenderArgs";
import { DeleteUserGenderArgs } from "./DeleteUserGenderArgs";
import { UserProfileFindManyArgs } from "../../userProfile/base/UserProfileFindManyArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserGenderService } from "../userGender.service";
@graphql.Resolver(() => UserGender)
export class UserGenderResolverBase {
  constructor(protected readonly service: UserGenderService) {}

  async _userGendersMeta(
    @graphql.Args() args: UserGenderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserGender])
  async userGenders(
    @graphql.Args() args: UserGenderFindManyArgs
  ): Promise<UserGender[]> {
    return this.service.userGenders(args);
  }

  @graphql.Query(() => UserGender, { nullable: true })
  async userGender(
    @graphql.Args() args: UserGenderFindUniqueArgs
  ): Promise<UserGender | null> {
    const result = await this.service.userGender(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserGender)
  async createUserGender(
    @graphql.Args() args: CreateUserGenderArgs
  ): Promise<UserGender> {
    return await this.service.createUserGender({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserGender)
  async updateUserGender(
    @graphql.Args() args: UpdateUserGenderArgs
  ): Promise<UserGender | null> {
    try {
      return await this.service.updateUserGender({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserGender)
  async deleteUserGender(
    @graphql.Args() args: DeleteUserGenderArgs
  ): Promise<UserGender | null> {
    try {
      return await this.service.deleteUserGender(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserProfile], { name: "userProfiles" })
  async findUserProfiles(
    @graphql.Parent() parent: UserGender,
    @graphql.Args() args: UserProfileFindManyArgs
  ): Promise<UserProfile[]> {
    const results = await this.service.findUserProfiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
