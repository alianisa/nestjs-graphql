/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserGender as PrismaUserGender,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class UserGenderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserGenderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userGender.count(args);
  }

  async userGenders(
    args: Prisma.UserGenderFindManyArgs
  ): Promise<PrismaUserGender[]> {
    return this.prisma.userGender.findMany(args);
  }
  async userGender(
    args: Prisma.UserGenderFindUniqueArgs
  ): Promise<PrismaUserGender | null> {
    return this.prisma.userGender.findUnique(args);
  }
  async createUserGender(
    args: Prisma.UserGenderCreateArgs
  ): Promise<PrismaUserGender> {
    return this.prisma.userGender.create(args);
  }
  async updateUserGender(
    args: Prisma.UserGenderUpdateArgs
  ): Promise<PrismaUserGender> {
    return this.prisma.userGender.update(args);
  }
  async deleteUserGender(
    args: Prisma.UserGenderDeleteArgs
  ): Promise<PrismaUserGender> {
    return this.prisma.userGender.delete(args);
  }

  async findUserProfiles(
    parentId: string,
    args: Prisma.UserProfileFindManyArgs
  ): Promise<PrismaUserProfile[]> {
    return this.prisma.userGender
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userProfiles(args);
  }
}
