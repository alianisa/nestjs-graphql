/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SsoDomain } from "./SsoDomain";
import { SsoDomainCountArgs } from "./SsoDomainCountArgs";
import { SsoDomainFindManyArgs } from "./SsoDomainFindManyArgs";
import { SsoDomainFindUniqueArgs } from "./SsoDomainFindUniqueArgs";
import { CreateSsoDomainArgs } from "./CreateSsoDomainArgs";
import { UpdateSsoDomainArgs } from "./UpdateSsoDomainArgs";
import { DeleteSsoDomainArgs } from "./DeleteSsoDomainArgs";
import { SsoProvider } from "../../ssoProvider/base/SsoProvider";
import { SsoDomainService } from "../ssoDomain.service";
@graphql.Resolver(() => SsoDomain)
export class SsoDomainResolverBase {
  constructor(protected readonly service: SsoDomainService) {}

  async _ssoDomainsMeta(
    @graphql.Args() args: SsoDomainCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SsoDomain])
  async ssoDomains(
    @graphql.Args() args: SsoDomainFindManyArgs
  ): Promise<SsoDomain[]> {
    return this.service.ssoDomains(args);
  }

  @graphql.Query(() => SsoDomain, { nullable: true })
  async ssoDomain(
    @graphql.Args() args: SsoDomainFindUniqueArgs
  ): Promise<SsoDomain | null> {
    const result = await this.service.ssoDomain(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SsoDomain)
  async createSsoDomain(
    @graphql.Args() args: CreateSsoDomainArgs
  ): Promise<SsoDomain> {
    return await this.service.createSsoDomain({
      ...args,
      data: {
        ...args.data,

        ssoProviders: {
          connect: args.data.ssoProviders,
        },
      },
    });
  }

  @graphql.Mutation(() => SsoDomain)
  async updateSsoDomain(
    @graphql.Args() args: UpdateSsoDomainArgs
  ): Promise<SsoDomain | null> {
    try {
      return await this.service.updateSsoDomain({
        ...args,
        data: {
          ...args.data,

          ssoProviders: {
            connect: args.data.ssoProviders,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SsoDomain)
  async deleteSsoDomain(
    @graphql.Args() args: DeleteSsoDomainArgs
  ): Promise<SsoDomain | null> {
    try {
      return await this.service.deleteSsoDomain(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => SsoProvider, {
    nullable: true,
    name: "ssoProviders",
  })
  async getSsoProviders(
    @graphql.Parent() parent: SsoDomain
  ): Promise<SsoProvider | null> {
    const result = await this.service.getSsoProviders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
