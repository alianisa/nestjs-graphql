/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SsoDomainService } from "../ssoDomain.service";
import { SsoDomainCreateInput } from "./SsoDomainCreateInput";
import { SsoDomain } from "./SsoDomain";
import { SsoDomainFindManyArgs } from "./SsoDomainFindManyArgs";
import { SsoDomainWhereUniqueInput } from "./SsoDomainWhereUniqueInput";
import { SsoDomainUpdateInput } from "./SsoDomainUpdateInput";

export class SsoDomainControllerBase {
  constructor(protected readonly service: SsoDomainService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SsoDomain })
  async createSsoDomain(
    @common.Body() data: SsoDomainCreateInput
  ): Promise<SsoDomain> {
    return await this.service.createSsoDomain({
      data: {
        ...data,

        ssoProviders: {
          connect: data.ssoProviders,
        },
      },
      select: {
        createdAt: true,
        domain: true,
        id: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SsoDomain] })
  @ApiNestedQuery(SsoDomainFindManyArgs)
  async ssoDomains(@common.Req() request: Request): Promise<SsoDomain[]> {
    const args = plainToClass(SsoDomainFindManyArgs, request.query);
    return this.service.ssoDomains({
      ...args,
      select: {
        createdAt: true,
        domain: true,
        id: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SsoDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ssoDomain(
    @common.Param() params: SsoDomainWhereUniqueInput
  ): Promise<SsoDomain | null> {
    const result = await this.service.ssoDomain({
      where: params,
      select: {
        createdAt: true,
        domain: true,
        id: true,

        ssoProviders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SsoDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSsoDomain(
    @common.Param() params: SsoDomainWhereUniqueInput,
    @common.Body() data: SsoDomainUpdateInput
  ): Promise<SsoDomain | null> {
    try {
      return await this.service.updateSsoDomain({
        where: params,
        data: {
          ...data,

          ssoProviders: {
            connect: data.ssoProviders,
          },
        },
        select: {
          createdAt: true,
          domain: true,
          id: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SsoDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSsoDomain(
    @common.Param() params: SsoDomainWhereUniqueInput
  ): Promise<SsoDomain | null> {
    try {
      return await this.service.deleteSsoDomain({
        where: params,
        select: {
          createdAt: true,
          domain: true,
          id: true,

          ssoProviders: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
