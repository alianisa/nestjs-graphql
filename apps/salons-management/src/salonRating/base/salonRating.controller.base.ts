/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SalonRatingService } from "../salonRating.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SalonRatingCreateInput } from "./SalonRatingCreateInput";
import { SalonRating } from "./SalonRating";
import { SalonRatingFindManyArgs } from "./SalonRatingFindManyArgs";
import { SalonRatingWhereUniqueInput } from "./SalonRatingWhereUniqueInput";
import { SalonRatingUpdateInput } from "./SalonRatingUpdateInput";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingLikeWhereUniqueInput } from "../../salonRatingLike/base/SalonRatingLikeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SalonRatingControllerBase {
  constructor(
    protected readonly service: SalonRatingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalonRating })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSalonRating(
    @common.Body() data: SalonRatingCreateInput
  ): Promise<SalonRating> {
    return await this.service.createSalonRating({
      data: {
        ...data,

        salons: {
          connect: data.salons,
        },

        userProfilesSalonRatingsUserIdTouserProfiles:
          data.userProfilesSalonRatingsUserIdTouserProfiles
            ? {
                connect: data.userProfilesSalonRatingsUserIdTouserProfiles,
              }
            : undefined,

        userProfilesSalonRatingsVoterIdTouserProfiles:
          data.userProfilesSalonRatingsVoterIdTouserProfiles
            ? {
                connect: data.userProfilesSalonRatingsVoterIdTouserProfiles,
              }
            : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        rating: true,
        review: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SalonRating] })
  @ApiNestedQuery(SalonRatingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async salonRatings(@common.Req() request: Request): Promise<SalonRating[]> {
    const args = plainToClass(SalonRatingFindManyArgs, request.query);
    return this.service.salonRatings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        review: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalonRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async salonRating(
    @common.Param() params: SalonRatingWhereUniqueInput
  ): Promise<SalonRating | null> {
    const result = await this.service.salonRating({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        review: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingsVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalonRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSalonRating(
    @common.Param() params: SalonRatingWhereUniqueInput,
    @common.Body() data: SalonRatingUpdateInput
  ): Promise<SalonRating | null> {
    try {
      return await this.service.updateSalonRating({
        where: params,
        data: {
          ...data,

          salons: {
            connect: data.salons,
          },

          userProfilesSalonRatingsUserIdTouserProfiles:
            data.userProfilesSalonRatingsUserIdTouserProfiles
              ? {
                  connect: data.userProfilesSalonRatingsUserIdTouserProfiles,
                }
              : undefined,

          userProfilesSalonRatingsVoterIdTouserProfiles:
            data.userProfilesSalonRatingsVoterIdTouserProfiles
              ? {
                  connect: data.userProfilesSalonRatingsVoterIdTouserProfiles,
                }
              : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          rating: true,
          review: true,

          salons: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingsUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingsVoterIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalonRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSalonRating(
    @common.Param() params: SalonRatingWhereUniqueInput
  ): Promise<SalonRating | null> {
    try {
      return await this.service.deleteSalonRating({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          review: true,

          salons: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingsUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesSalonRatingsVoterIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salonRatingLikes")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalonRatingLike",
    action: "read",
    possession: "any",
  })
  async findSalonRatingLikes(
    @common.Req() request: Request,
    @common.Param() params: SalonRatingWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results = await this.service.findSalonRatingLikes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        review: true,

        salonRatings: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesSalonRatingLikesVoterIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikes")
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "update",
    possession: "any",
  })
  async connectSalonRatingLikes(
    @common.Param() params: SalonRatingWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        connect: body,
      },
    };
    await this.service.updateSalonRating({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikes")
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "update",
    possession: "any",
  })
  async updateSalonRatingLikes(
    @common.Param() params: SalonRatingWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        set: body,
      },
    };
    await this.service.updateSalonRating({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikes")
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "update",
    possession: "any",
  })
  async disconnectSalonRatingLikes(
    @common.Param() params: SalonRatingWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikes: {
        disconnect: body,
      },
    };
    await this.service.updateSalonRating({
      where: params,
      data,
      select: { id: true },
    });
  }
}
