/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalonRating } from "./SalonRating";
import { SalonRatingCountArgs } from "./SalonRatingCountArgs";
import { SalonRatingFindManyArgs } from "./SalonRatingFindManyArgs";
import { SalonRatingFindUniqueArgs } from "./SalonRatingFindUniqueArgs";
import { CreateSalonRatingArgs } from "./CreateSalonRatingArgs";
import { UpdateSalonRatingArgs } from "./UpdateSalonRatingArgs";
import { DeleteSalonRatingArgs } from "./DeleteSalonRatingArgs";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { Salon } from "../../salon/base/Salon";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { SalonRatingService } from "../salonRating.service";
@graphql.Resolver(() => SalonRating)
export class SalonRatingResolverBase {
  constructor(protected readonly service: SalonRatingService) {}

  async _salonRatingsMeta(
    @graphql.Args() args: SalonRatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalonRating])
  async salonRatings(
    @graphql.Args() args: SalonRatingFindManyArgs
  ): Promise<SalonRating[]> {
    return this.service.salonRatings(args);
  }

  @graphql.Query(() => SalonRating, { nullable: true })
  async salonRating(
    @graphql.Args() args: SalonRatingFindUniqueArgs
  ): Promise<SalonRating | null> {
    const result = await this.service.salonRating(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalonRating)
  async createSalonRating(
    @graphql.Args() args: CreateSalonRatingArgs
  ): Promise<SalonRating> {
    return await this.service.createSalonRating({
      ...args,
      data: {
        ...args.data,

        salons: {
          connect: args.data.salons,
        },

        userProfilesSalonRatingsUserIdTouserProfiles: args.data
          .userProfilesSalonRatingsUserIdTouserProfiles
          ? {
              connect: args.data.userProfilesSalonRatingsUserIdTouserProfiles,
            }
          : undefined,

        userProfilesSalonRatingsVoterIdTouserProfiles: args.data
          .userProfilesSalonRatingsVoterIdTouserProfiles
          ? {
              connect: args.data.userProfilesSalonRatingsVoterIdTouserProfiles,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SalonRating)
  async updateSalonRating(
    @graphql.Args() args: UpdateSalonRatingArgs
  ): Promise<SalonRating | null> {
    try {
      return await this.service.updateSalonRating({
        ...args,
        data: {
          ...args.data,

          salons: {
            connect: args.data.salons,
          },

          userProfilesSalonRatingsUserIdTouserProfiles: args.data
            .userProfilesSalonRatingsUserIdTouserProfiles
            ? {
                connect: args.data.userProfilesSalonRatingsUserIdTouserProfiles,
              }
            : undefined,

          userProfilesSalonRatingsVoterIdTouserProfiles: args.data
            .userProfilesSalonRatingsVoterIdTouserProfiles
            ? {
                connect:
                  args.data.userProfilesSalonRatingsVoterIdTouserProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalonRating)
  async deleteSalonRating(
    @graphql.Args() args: DeleteSalonRatingArgs
  ): Promise<SalonRating | null> {
    try {
      return await this.service.deleteSalonRating(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SalonRatingLike], { name: "salonRatingLikes" })
  async findSalonRatingLikes(
    @graphql.Parent() parent: SalonRating,
    @graphql.Args() args: SalonRatingLikeFindManyArgs
  ): Promise<SalonRatingLike[]> {
    const results = await this.service.findSalonRatingLikes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salons",
  })
  async getSalons(
    @graphql.Parent() parent: SalonRating
  ): Promise<Salon | null> {
    const result = await this.service.getSalons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesSalonRatingsUserIdTouserProfiles",
  })
  async getUserProfilesSalonRatingsUserIdTouserProfiles(
    @graphql.Parent() parent: SalonRating
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesSalonRatingsUserIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesSalonRatingsVoterIdTouserProfiles",
  })
  async getUserProfilesSalonRatingsVoterIdTouserProfiles(
    @graphql.Parent() parent: SalonRating
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesSalonRatingsVoterIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
