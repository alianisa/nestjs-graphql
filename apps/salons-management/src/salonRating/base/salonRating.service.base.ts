/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalonRating as PrismaSalonRating,
  SalonRatingLike as PrismaSalonRatingLike,
  Salon as PrismaSalon,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SalonRatingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalonRatingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salonRating.count(args);
  }

  async salonRatings(
    args: Prisma.SalonRatingFindManyArgs
  ): Promise<PrismaSalonRating[]> {
    return this.prisma.salonRating.findMany(args);
  }
  async salonRating(
    args: Prisma.SalonRatingFindUniqueArgs
  ): Promise<PrismaSalonRating | null> {
    return this.prisma.salonRating.findUnique(args);
  }
  async createSalonRating(
    args: Prisma.SalonRatingCreateArgs
  ): Promise<PrismaSalonRating> {
    return this.prisma.salonRating.create(args);
  }
  async updateSalonRating(
    args: Prisma.SalonRatingUpdateArgs
  ): Promise<PrismaSalonRating> {
    return this.prisma.salonRating.update(args);
  }
  async deleteSalonRating(
    args: Prisma.SalonRatingDeleteArgs
  ): Promise<PrismaSalonRating> {
    return this.prisma.salonRating.delete(args);
  }

  async findSalonRatingLikes(
    parentId: string,
    args: Prisma.SalonRatingLikeFindManyArgs
  ): Promise<PrismaSalonRatingLike[]> {
    return this.prisma.salonRating
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingLikes(args);
  }

  async getSalons(parentId: string): Promise<PrismaSalon | null> {
    return this.prisma.salonRating
      .findUnique({
        where: { id: parentId },
      })
      .salons();
  }

  async getUserProfilesSalonRatingsUserIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.salonRating
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesSalonRatingsUserIdTouserProfiles();
  }

  async getUserProfilesSalonRatingsVoterIdTouserProfiles(
    parentId: string
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.salonRating
      .findUnique({
        where: { id: parentId },
      })
      .userProfilesSalonRatingsVoterIdTouserProfiles();
  }
}
