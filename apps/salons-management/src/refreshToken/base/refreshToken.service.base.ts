/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RefreshToken as PrismaRefreshToken,
  Session as PrismaSession,
} from "@prisma/client";

export class RefreshTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RefreshTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.refreshToken.count(args);
  }

  async refreshTokens(
    args: Prisma.RefreshTokenFindManyArgs
  ): Promise<PrismaRefreshToken[]> {
    return this.prisma.refreshToken.findMany(args);
  }
  async refreshToken(
    args: Prisma.RefreshTokenFindUniqueArgs
  ): Promise<PrismaRefreshToken | null> {
    return this.prisma.refreshToken.findUnique(args);
  }
  async createRefreshToken(
    args: Prisma.RefreshTokenCreateArgs
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.create(args);
  }
  async updateRefreshToken(
    args: Prisma.RefreshTokenUpdateArgs
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.update(args);
  }
  async deleteRefreshToken(
    args: Prisma.RefreshTokenDeleteArgs
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.delete(args);
  }

  async getSessions(parentId: bigint): Promise<PrismaSession | null> {
    return this.prisma.refreshToken
      .findUnique({
        where: { id: parentId },
      })
      .sessions();
  }
}
