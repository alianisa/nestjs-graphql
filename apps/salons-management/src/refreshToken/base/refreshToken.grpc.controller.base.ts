/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { RefreshTokenService } from "../refreshToken.service";
import { RefreshTokenCreateInput } from "./RefreshTokenCreateInput";
import { RefreshTokenWhereInput } from "./RefreshTokenWhereInput";
import { RefreshTokenWhereUniqueInput } from "./RefreshTokenWhereUniqueInput";
import { RefreshTokenFindManyArgs } from "./RefreshTokenFindManyArgs";
import { RefreshTokenUpdateInput } from "./RefreshTokenUpdateInput";
import { RefreshToken } from "./RefreshToken";

export class RefreshTokenGrpcControllerBase {
  constructor(protected readonly service: RefreshTokenService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RefreshToken })
  @GrpcMethod("RefreshTokenService", "createRefreshToken")
  async createRefreshToken(
    @common.Body() data: RefreshTokenCreateInput
  ): Promise<RefreshToken> {
    return await this.service.createRefreshToken({
      data: {
        ...data,

        sessions: data.sessions
          ? {
              connect: data.sessions,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        parent: true,
        revoked: true,

        sessions: {
          select: {
            id: true,
          },
        },

        token: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RefreshToken] })
  @ApiNestedQuery(RefreshTokenFindManyArgs)
  @GrpcMethod("RefreshTokenService", "refreshTokens")
  async refreshTokens(@common.Req() request: Request): Promise<RefreshToken[]> {
    const args = plainToClass(RefreshTokenFindManyArgs, request.query);
    return this.service.refreshTokens({
      ...args,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        parent: true,
        revoked: true,

        sessions: {
          select: {
            id: true,
          },
        },

        token: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RefreshToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RefreshTokenService", "refreshToken")
  async refreshToken(
    @common.Param() params: RefreshTokenWhereUniqueInput
  ): Promise<RefreshToken | null> {
    const result = await this.service.refreshToken({
      where: params,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,
        parent: true,
        revoked: true,

        sessions: {
          select: {
            id: true,
          },
        },

        token: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RefreshToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RefreshTokenService", "updateRefreshToken")
  async updateRefreshToken(
    @common.Param() params: RefreshTokenWhereUniqueInput,
    @common.Body() data: RefreshTokenUpdateInput
  ): Promise<RefreshToken | null> {
    try {
      return await this.service.updateRefreshToken({
        where: params,
        data: {
          ...data,

          sessions: data.sessions
            ? {
                connect: data.sessions,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          instanceId: true,
          parent: true,
          revoked: true,

          sessions: {
            select: {
              id: true,
            },
          },

          token: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RefreshToken })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RefreshTokenService", "deleteRefreshToken")
  async deleteRefreshToken(
    @common.Param() params: RefreshTokenWhereUniqueInput
  ): Promise<RefreshToken | null> {
    try {
      return await this.service.deleteRefreshToken({
        where: params,
        select: {
          createdAt: true,
          id: true,
          instanceId: true,
          parent: true,
          revoked: true,

          sessions: {
            select: {
              id: true,
            },
          },

          token: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
