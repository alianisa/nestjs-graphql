/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { InstanceService } from "../instance.service";
import { InstanceCreateInput } from "./InstanceCreateInput";
import { InstanceWhereInput } from "./InstanceWhereInput";
import { InstanceWhereUniqueInput } from "./InstanceWhereUniqueInput";
import { InstanceFindManyArgs } from "./InstanceFindManyArgs";
import { InstanceUpdateInput } from "./InstanceUpdateInput";
import { Instance } from "./Instance";

export class InstanceGrpcControllerBase {
  constructor(protected readonly service: InstanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Instance })
  @GrpcMethod("InstanceService", "createInstance")
  async createInstance(
    @common.Body() data: InstanceCreateInput
  ): Promise<Instance> {
    return await this.service.createInstance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        rawBaseConfig: true,
        updatedAt: true,
        uuid: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Instance] })
  @ApiNestedQuery(InstanceFindManyArgs)
  @GrpcMethod("InstanceService", "instances")
  async instances(@common.Req() request: Request): Promise<Instance[]> {
    const args = plainToClass(InstanceFindManyArgs, request.query);
    return this.service.instances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rawBaseConfig: true,
        updatedAt: true,
        uuid: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Instance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceService", "instance")
  async instance(
    @common.Param() params: InstanceWhereUniqueInput
  ): Promise<Instance | null> {
    const result = await this.service.instance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rawBaseConfig: true,
        updatedAt: true,
        uuid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Instance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceService", "updateInstance")
  async updateInstance(
    @common.Param() params: InstanceWhereUniqueInput,
    @common.Body() data: InstanceUpdateInput
  ): Promise<Instance | null> {
    try {
      return await this.service.updateInstance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          rawBaseConfig: true,
          updatedAt: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Instance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceService", "deleteInstance")
  async deleteInstance(
    @common.Param() params: InstanceWhereUniqueInput
  ): Promise<Instance | null> {
    try {
      return await this.service.deleteInstance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rawBaseConfig: true,
          updatedAt: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
