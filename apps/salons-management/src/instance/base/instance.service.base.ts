/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Instance as PrismaInstance } from "@prisma/client";

export class InstanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.InstanceCountArgs, "select">): Promise<number> {
    return this.prisma.instance.count(args);
  }

  async instances(
    args: Prisma.InstanceFindManyArgs
  ): Promise<PrismaInstance[]> {
    return this.prisma.instance.findMany(args);
  }
  async instance(
    args: Prisma.InstanceFindUniqueArgs
  ): Promise<PrismaInstance | null> {
    return this.prisma.instance.findUnique(args);
  }
  async createInstance(
    args: Prisma.InstanceCreateArgs
  ): Promise<PrismaInstance> {
    return this.prisma.instance.create(args);
  }
  async updateInstance(
    args: Prisma.InstanceUpdateArgs
  ): Promise<PrismaInstance> {
    return this.prisma.instance.update(args);
  }
  async deleteInstance(
    args: Prisma.InstanceDeleteArgs
  ): Promise<PrismaInstance> {
    return this.prisma.instance.delete(args);
  }
}
