/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Instance } from "./Instance";
import { InstanceCountArgs } from "./InstanceCountArgs";
import { InstanceFindManyArgs } from "./InstanceFindManyArgs";
import { InstanceFindUniqueArgs } from "./InstanceFindUniqueArgs";
import { CreateInstanceArgs } from "./CreateInstanceArgs";
import { UpdateInstanceArgs } from "./UpdateInstanceArgs";
import { DeleteInstanceArgs } from "./DeleteInstanceArgs";
import { InstanceService } from "../instance.service";
@graphql.Resolver(() => Instance)
export class InstanceResolverBase {
  constructor(protected readonly service: InstanceService) {}

  async _instancesMeta(
    @graphql.Args() args: InstanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Instance])
  async instances(
    @graphql.Args() args: InstanceFindManyArgs
  ): Promise<Instance[]> {
    return this.service.instances(args);
  }

  @graphql.Query(() => Instance, { nullable: true })
  async instance(
    @graphql.Args() args: InstanceFindUniqueArgs
  ): Promise<Instance | null> {
    const result = await this.service.instance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Instance)
  async createInstance(
    @graphql.Args() args: CreateInstanceArgs
  ): Promise<Instance> {
    return await this.service.createInstance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Instance)
  async updateInstance(
    @graphql.Args() args: UpdateInstanceArgs
  ): Promise<Instance | null> {
    try {
      return await this.service.updateInstance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Instance)
  async deleteInstance(
    @graphql.Args() args: DeleteInstanceArgs
  ): Promise<Instance | null> {
    try {
      return await this.service.deleteInstance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
