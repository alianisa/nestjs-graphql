/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserAccountService } from "../userAccount.service";
import { UserAccountCreateInput } from "./UserAccountCreateInput";
import { UserAccountWhereInput } from "./UserAccountWhereInput";
import { UserAccountWhereUniqueInput } from "./UserAccountWhereUniqueInput";
import { UserAccountFindManyArgs } from "./UserAccountFindManyArgs";
import { UserAccountUpdateInput } from "./UserAccountUpdateInput";
import { UserAccount } from "./UserAccount";

export class UserAccountGrpcControllerBase {
  constructor(protected readonly service: UserAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAccount })
  @GrpcMethod("UserAccountService", "createUserAccount")
  async createUserAccount(
    @common.Body() data: UserAccountCreateInput
  ): Promise<UserAccount> {
    return await this.service.createUserAccount({
      data: {
        ...data,

        salons: data.salons
          ? {
              connect: data.salons,
            }
          : undefined,

        userProfiles: data.userProfiles
          ? {
              connect: data.userProfiles,
            }
          : undefined,
      },
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAccount] })
  @ApiNestedQuery(UserAccountFindManyArgs)
  @GrpcMethod("UserAccountService", "userAccounts")
  async userAccounts(@common.Req() request: Request): Promise<UserAccount[]> {
    const args = plainToClass(UserAccountFindManyArgs, request.query);
    return this.service.userAccounts({
      ...args,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAccountService", "userAccount")
  async userAccount(
    @common.Param() params: UserAccountWhereUniqueInput
  ): Promise<UserAccount | null> {
    const result = await this.service.userAccount({
      where: params,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAccountService", "updateUserAccount")
  async updateUserAccount(
    @common.Param() params: UserAccountWhereUniqueInput,
    @common.Body() data: UserAccountUpdateInput
  ): Promise<UserAccount | null> {
    try {
      return await this.service.updateUserAccount({
        where: params,
        data: {
          ...data,

          salons: data.salons
            ? {
                connect: data.salons,
              }
            : undefined,

          userProfiles: data.userProfiles
            ? {
                connect: data.userProfiles,
              }
            : undefined,
        },
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,
          numberField: true,

          salons: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserAccountService", "deleteUserAccount")
  async deleteUserAccount(
    @common.Param() params: UserAccountWhereUniqueInput
  ): Promise<UserAccount | null> {
    try {
      return await this.service.deleteUserAccount({
        where: params,
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,
          numberField: true,

          salons: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          userProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
