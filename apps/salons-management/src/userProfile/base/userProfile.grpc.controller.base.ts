/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserProfileService } from "../userProfile.service";
import { UserProfileCreateInput } from "./UserProfileCreateInput";
import { UserProfileWhereInput } from "./UserProfileWhereInput";
import { UserProfileWhereUniqueInput } from "./UserProfileWhereUniqueInput";
import { UserProfileFindManyArgs } from "./UserProfileFindManyArgs";
import { UserProfileUpdateInput } from "./UserProfileUpdateInput";
import { UserProfile } from "./UserProfile";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ChatMessageWhereUniqueInput } from "../../chatMessage/base/ChatMessageWhereUniqueInput";
import { ChatFindManyArgs } from "../../chat/base/ChatFindManyArgs";
import { Chat } from "../../chat/base/Chat";
import { ChatWhereUniqueInput } from "../../chat/base/ChatWhereUniqueInput";
import { EmployeeDailyStatFindManyArgs } from "../../employeeDailyStat/base/EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeDailyStatWhereUniqueInput } from "../../employeeDailyStat/base/EmployeeDailyStatWhereUniqueInput";
import { EmployeeStatFindManyArgs } from "../../employeeStat/base/EmployeeStatFindManyArgs";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeStatWhereUniqueInput } from "../../employeeStat/base/EmployeeStatWhereUniqueInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { EmployeeWorkScheduleFindManyArgs } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { EmployeeWorkScheduleWhereUniqueInput } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleWhereUniqueInput";
import { LoyaltyTransactionFindManyArgs } from "../../loyaltyTransaction/base/LoyaltyTransactionFindManyArgs";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { LoyaltyTransactionWhereUniqueInput } from "../../loyaltyTransaction/base/LoyaltyTransactionWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { PayrollWhereUniqueInput } from "../../payroll/base/PayrollWhereUniqueInput";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { SalonAccountFindManyArgs } from "../../salonAccount/base/SalonAccountFindManyArgs";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonAccountWhereUniqueInput } from "../../salonAccount/base/SalonAccountWhereUniqueInput";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingLikeWhereUniqueInput } from "../../salonRatingLike/base/SalonRatingLikeWhereUniqueInput";
import { SalonRatingFindManyArgs } from "../../salonRating/base/SalonRatingFindManyArgs";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonRatingWhereUniqueInput } from "../../salonRating/base/SalonRatingWhereUniqueInput";
import { SalonFindManyArgs } from "../../salon/base/SalonFindManyArgs";
import { Salon } from "../../salon/base/Salon";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAccountWhereUniqueInput } from "../../userAccount/base/UserAccountWhereUniqueInput";
import { UserAddressFindManyArgs } from "../../userAddress/base/UserAddressFindManyArgs";
import { UserAddress } from "../../userAddress/base/UserAddress";
import { UserAddressWhereUniqueInput } from "../../userAddress/base/UserAddressWhereUniqueInput";
import { UserBankCardFindManyArgs } from "../../userBankCard/base/UserBankCardFindManyArgs";
import { UserBankCard } from "../../userBankCard/base/UserBankCard";
import { UserBankCardWhereUniqueInput } from "../../userBankCard/base/UserBankCardWhereUniqueInput";
import { UserFavoriteMasterFindManyArgs } from "../../userFavoriteMaster/base/UserFavoriteMasterFindManyArgs";
import { UserFavoriteMaster } from "../../userFavoriteMaster/base/UserFavoriteMaster";
import { UserFavoriteMasterWhereUniqueInput } from "../../userFavoriteMaster/base/UserFavoriteMasterWhereUniqueInput";
import { UserFavoriteSalonFindManyArgs } from "../../userFavoriteSalon/base/UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserFavoriteSalonWhereUniqueInput } from "../../userFavoriteSalon/base/UserFavoriteSalonWhereUniqueInput";
import { UserRatingFindManyArgs } from "../../userRating/base/UserRatingFindManyArgs";
import { UserRating } from "../../userRating/base/UserRating";
import { UserRatingWhereUniqueInput } from "../../userRating/base/UserRatingWhereUniqueInput";

export class UserProfileGrpcControllerBase {
  constructor(protected readonly service: UserProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserProfile })
  @GrpcMethod("UserProfileService", "createUserProfile")
  async createUserProfile(
    @common.Body() data: UserProfileCreateInput
  ): Promise<UserProfile> {
    return await this.service.createUserProfile({
      data: {
        ...data,

        salonsUserProfilesSalonIdTosalons:
          data.salonsUserProfilesSalonIdTosalons
            ? {
                connect: data.salonsUserProfilesSalonIdTosalons,
              }
            : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        userGenders: data.userGenders
          ? {
              connect: data.userGenders,
            }
          : undefined,

        userNotificationSettings: data.userNotificationSettings
          ? {
              connect: data.userNotificationSettings,
            }
          : undefined,
      },
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserProfile] })
  @ApiNestedQuery(UserProfileFindManyArgs)
  @GrpcMethod("UserProfileService", "userProfiles")
  async userProfiles(@common.Req() request: Request): Promise<UserProfile[]> {
    const args = plainToClass(UserProfileFindManyArgs, request.query);
    return this.service.userProfiles({
      ...args,
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserProfileService", "userProfile")
  async userProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    const result = await this.service.userProfile({
      where: params,
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserProfileService", "updateUserProfile")
  async updateUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() data: UserProfileUpdateInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.updateUserProfile({
        where: params,
        data: {
          ...data,

          salonsUserProfilesSalonIdTosalons:
            data.salonsUserProfilesSalonIdTosalons
              ? {
                  connect: data.salonsUserProfilesSalonIdTosalons,
                }
              : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          userGenders: data.userGenders
            ? {
                connect: data.userGenders,
              }
            : undefined,

          userNotificationSettings: data.userNotificationSettings
            ? {
                connect: data.userNotificationSettings,
              }
            : undefined,
        },
        select: {
          avatarUrl: true,
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          deletedAt: true,
          email: true,
          employeeDismissalAt: true,
          employeeEmploymentAt: true,
          firstName: true,
          fullName: true,
          fullRegistered: true,
          hiredDate: true,
          id: true,
          isAdmin: true,
          isBarber: true,
          isEmployee: true,
          jobTitle: true,
          lastName: true,
          location: true,
          loyaltyPoints: true,
          phone: true,

          salonsUserProfilesSalonIdTosalons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userGenders: {
            select: {
              id: true,
            },
          },

          userNotificationSettings: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserProfileService", "deleteUserProfile")
  async deleteUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.deleteUserProfile({
        where: params,
        select: {
          avatarUrl: true,
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          deletedAt: true,
          email: true,
          employeeDismissalAt: true,
          employeeEmploymentAt: true,
          firstName: true,
          fullName: true,
          fullRegistered: true,
          hiredDate: true,
          id: true,
          isAdmin: true,
          isBarber: true,
          isEmployee: true,
          jobTitle: true,
          lastName: true,
          location: true,
          loyaltyPoints: true,
          phone: true,

          salonsUserProfilesSalonIdTosalons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userGenders: {
            select: {
              id: true,
            },
          },

          userNotificationSettings: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointments")
  @ApiNestedQuery(AppointmentFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyAppointments")
  async findManyAppointments(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Appointment[]> {
    const query = plainToClass(AppointmentFindManyArgs, request.query);
    const results = await this.service.findAppointments(params.id, {
      ...query,
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointments")
  @GrpcMethod("UserProfileService", "connectAppointments")
  async connectAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointments")
  @GrpcMethod("UserProfileService", "updateAppointments")
  async updateAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointments")
  @GrpcMethod("UserProfileService", "disconnectAppointments")
  async disconnectAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyAttendances")
  async findManyAttendances(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        action: true,
        actionTime: true,
        clockin: true,
        clockout: true,
        completed: true,
        createdAt: true,
        date: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  @GrpcMethod("UserProfileService", "connectAttendances")
  async connectAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  @GrpcMethod("UserProfileService", "updateAttendances")
  async updateAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  @GrpcMethod("UserProfileService", "disconnectAttendances")
  async disconnectAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatMessages")
  @ApiNestedQuery(ChatMessageFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyChatMessages")
  async findManyChatMessages(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<ChatMessage[]> {
    const query = plainToClass(ChatMessageFindManyArgs, request.query);
    const results = await this.service.findChatMessages(params.id, {
      ...query,
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatMessages")
  @GrpcMethod("UserProfileService", "connectChatMessages")
  async connectChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatMessages")
  @GrpcMethod("UserProfileService", "updateChatMessages")
  async updateChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatMessages")
  @GrpcMethod("UserProfileService", "disconnectChatMessages")
  async disconnectChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUserATouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyChatsChatsUserATouserProfiles")
  async findManyChatsChatsUserATouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUserATouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUserATouserProfiles")
  @GrpcMethod("UserProfileService", "connectChatsChatsUserATouserProfiles")
  async connectChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUserATouserProfiles")
  @GrpcMethod("UserProfileService", "updateChatsChatsUserATouserProfiles")
  async updateChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUserATouserProfiles")
  @GrpcMethod("UserProfileService", "disconnectChatsChatsUserATouserProfiles")
  async disconnectChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUserBTouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyChatsChatsUserBTouserProfiles")
  async findManyChatsChatsUserBTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUserBTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUserBTouserProfiles")
  @GrpcMethod("UserProfileService", "connectChatsChatsUserBTouserProfiles")
  async connectChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUserBTouserProfiles")
  @GrpcMethod("UserProfileService", "updateChatsChatsUserBTouserProfiles")
  async updateChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUserBTouserProfiles")
  @GrpcMethod("UserProfileService", "disconnectChatsChatsUserBTouserProfiles")
  async disconnectChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUsersTouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyChatsChatsUsersTouserProfiles")
  async findManyChatsChatsUsersTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUsersTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUsersTouserProfiles")
  @GrpcMethod("UserProfileService", "connectChatsChatsUsersTouserProfiles")
  async connectChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUsersTouserProfiles")
  @GrpcMethod("UserProfileService", "updateChatsChatsUsersTouserProfiles")
  async updateChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUsersTouserProfiles")
  @GrpcMethod("UserProfileService", "disconnectChatsChatsUsersTouserProfiles")
  async disconnectChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeDailyStats")
  @ApiNestedQuery(EmployeeDailyStatFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyEmployeeDailyStats")
  async findManyEmployeeDailyStats(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeDailyStat[]> {
    const query = plainToClass(EmployeeDailyStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeDailyStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeDailyStats")
  @GrpcMethod("UserProfileService", "connectEmployeeDailyStats")
  async connectEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeDailyStats")
  @GrpcMethod("UserProfileService", "updateEmployeeDailyStats")
  async updateEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeDailyStats")
  @GrpcMethod("UserProfileService", "disconnectEmployeeDailyStats")
  async disconnectEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeStats")
  @ApiNestedQuery(EmployeeStatFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyEmployeeStats")
  async findManyEmployeeStats(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeStat[]> {
    const query = plainToClass(EmployeeStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageOrderDuration: true,
        averageRating: true,
        averageServiceTime: true,
        canceledOrdersCount: true,
        cardPaymentsAmount: true,
        cashPaymentsAmount: true,
        consistencyScore: true,
        conversionRate: true,
        createdAt: true,
        currentMonthOrders: true,
        currentMonthRevenue: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyScore: true,
        efficiencyTrend: true,
        executionRate: true,
        fillRate: true,
        id: true,
        lastOrderAt: true,
        negativeReviews: true,
        ordersChangePercent: true,
        ordersGrowthRate: true,
        ordersPerDay: true,
        ordersTrend: true,
        overtimeCount: true,
        peakHoursOrders: true,
        peakPerformanceRate: true,
        performanceChangePercent: true,
        performanceScore: true,
        performanceTrend: true,
        positiveReviews: true,
        prevMonthEfficiencyRate: true,
        prevMonthPerformanceScore: true,
        prevMonthTotalOrders: true,
        prevMonthTotalRevenue: true,
        previousMonthOrders: true,
        previousMonthRevenue: true,
        qualityScore: true,
        rating: true,
        ratingChangePercent: true,
        ratingTrend: true,
        revenueChangePercent: true,
        revenueGrowthRate: true,
        revenuePerHour: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        servicesChangePercent: true,
        servicesGrowthRate: true,
        servicesPerHour: true,
        servicesTrend: true,
        totalDowntimeHours: true,
        totalExecutionTime: true,
        totalIdleTime: true,
        totalOrders: true,
        totalRatings: true,
        totalRevenue: true,
        totalServices: true,
        totalWorkTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        utilizationRate: true,
        workloadPercentage: true,
        yearToDateOrders: true,
        yearToDateRevenue: true,
        yearToDateServices: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeStats")
  @GrpcMethod("UserProfileService", "connectEmployeeStats")
  async connectEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeStats")
  @GrpcMethod("UserProfileService", "updateEmployeeStats")
  async updateEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeStats")
  @GrpcMethod("UserProfileService", "disconnectEmployeeStats")
  async disconnectEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyEmployeeTasks")
  async findManyEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  @GrpcMethod("UserProfileService", "connectEmployeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  @GrpcMethod("UserProfileService", "updateEmployeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  @GrpcMethod("UserProfileService", "disconnectEmployeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeWorkSchedules")
  @ApiNestedQuery(EmployeeWorkScheduleFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyEmployeeWorkSchedules")
  async findManyEmployeeWorkSchedules(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeWorkSchedule[]> {
    const query = plainToClass(EmployeeWorkScheduleFindManyArgs, request.query);
    const results = await this.service.findEmployeeWorkSchedules(params.id, {
      ...query,
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeWorkSchedules")
  @GrpcMethod("UserProfileService", "connectEmployeeWorkSchedules")
  async connectEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeWorkSchedules")
  @GrpcMethod("UserProfileService", "updateEmployeeWorkSchedules")
  async updateEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeWorkSchedules")
  @GrpcMethod("UserProfileService", "disconnectEmployeeWorkSchedules")
  async disconnectEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/loyaltyTransactions")
  @ApiNestedQuery(LoyaltyTransactionFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyLoyaltyTransactions")
  async findManyLoyaltyTransactions(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<LoyaltyTransaction[]> {
    const query = plainToClass(LoyaltyTransactionFindManyArgs, request.query);
    const results = await this.service.findLoyaltyTransactions(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loyaltyTransactions")
  @GrpcMethod("UserProfileService", "connectLoyaltyTransactions")
  async connectLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loyaltyTransactions")
  @GrpcMethod("UserProfileService", "updateLoyaltyTransactions")
  async updateLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loyaltyTransactions")
  @GrpcMethod("UserProfileService", "disconnectLoyaltyTransactions")
  async disconnectLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyNotifications")
  async findManyNotifications(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,
        imageUrl: true,
        title: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  @GrpcMethod("UserProfileService", "connectNotifications")
  async connectNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  @GrpcMethod("UserProfileService", "updateNotifications")
  async updateNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  @GrpcMethod("UserProfileService", "disconnectNotifications")
  async disconnectNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersEmployeeIdTouserProfiles")
  @ApiNestedQuery(OrderFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyOrdersOrdersEmployeeIdTouserProfiles"
  )
  async findManyOrdersOrdersEmployeeIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrdersOrdersEmployeeIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectOrdersOrdersEmployeeIdTouserProfiles"
  )
  async connectOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateOrdersOrdersEmployeeIdTouserProfiles"
  )
  async updateOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectOrdersOrdersEmployeeIdTouserProfiles"
  )
  async disconnectOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersUserIdTouserProfiles")
  @ApiNestedQuery(OrderFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyOrdersOrdersUserIdTouserProfiles")
  async findManyOrdersOrdersUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrdersOrdersUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersUserIdTouserProfiles")
  @GrpcMethod("UserProfileService", "connectOrdersOrdersUserIdTouserProfiles")
  async connectOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersUserIdTouserProfiles")
  @GrpcMethod("UserProfileService", "updateOrdersOrdersUserIdTouserProfiles")
  async updateOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectOrdersOrdersUserIdTouserProfiles"
  )
  async disconnectOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payroll")
  @ApiNestedQuery(PayrollFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyPayroll")
  async findManyPayroll(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Payroll[]> {
    const query = plainToClass(PayrollFindManyArgs, request.query);
    const results = await this.service.findPayroll(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payroll")
  @GrpcMethod("UserProfileService", "connectPayroll")
  async connectPayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payroll")
  @GrpcMethod("UserProfileService", "updatePayroll")
  async updatePayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payroll")
  @GrpcMethod("UserProfileService", "disconnectPayroll")
  async disconnectPayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuesQueuesEmployeeIdTouserProfiles")
  @ApiNestedQuery(QueueFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyQueuesQueuesEmployeeIdTouserProfiles"
  )
  async findManyQueuesQueuesEmployeeIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueuesQueuesEmployeeIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuesQueuesEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectQueuesQueuesEmployeeIdTouserProfiles"
  )
  async connectQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuesQueuesEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateQueuesQueuesEmployeeIdTouserProfiles"
  )
  async updateQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuesQueuesEmployeeIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectQueuesQueuesEmployeeIdTouserProfiles"
  )
  async disconnectQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuesQueuesUserIdTouserProfiles")
  @ApiNestedQuery(QueueFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyQueuesQueuesUserIdTouserProfiles")
  async findManyQueuesQueuesUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueuesQueuesUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuesQueuesUserIdTouserProfiles")
  @GrpcMethod("UserProfileService", "connectQueuesQueuesUserIdTouserProfiles")
  async connectQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuesQueuesUserIdTouserProfiles")
  @GrpcMethod("UserProfileService", "updateQueuesQueuesUserIdTouserProfiles")
  async updateQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuesQueuesUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectQueuesQueuesUserIdTouserProfiles"
  )
  async disconnectQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonAccounts")
  @ApiNestedQuery(SalonAccountFindManyArgs)
  @GrpcMethod("UserProfileService", "findManySalonAccounts")
  async findManySalonAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonAccount[]> {
    const query = plainToClass(SalonAccountFindManyArgs, request.query);
    const results = await this.service.findSalonAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonAccounts")
  @GrpcMethod("UserProfileService", "connectSalonAccounts")
  async connectSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonAccounts")
  @GrpcMethod("UserProfileService", "updateSalonAccounts")
  async updateSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonAccounts")
  @GrpcMethod("UserProfileService", "disconnectSalonAccounts")
  async disconnectSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManySalonRatingLikesSalonRatingLikesUserIdTouserProfiles"
  )
  async findManySalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            review: true,

            salonRatings: {
              select: {
                id: true,
              },
            },

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles"
  )
  async connectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateSalonRatingLikesSalonRatingLikesUserIdTouserProfiles"
  )
  async updateSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles"
  )
  async disconnectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManySalonRatingLikesSalonRatingLikesVoterIdTouserProfiles"
  )
  async findManySalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            review: true,

            salonRatings: {
              select: {
                id: true,
              },
            },

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles"
  )
  async connectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles"
  )
  async updateSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles"
  )
  async disconnectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  @ApiNestedQuery(SalonRatingFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManySalonRatingsSalonRatingsUserIdTouserProfiles"
  )
  async findManySalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRating[]> {
    const query = plainToClass(SalonRatingFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingsSalonRatingsUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            rating: true,
            review: true,

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectSalonRatingsSalonRatingsUserIdTouserProfiles"
  )
  async connectSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateSalonRatingsSalonRatingsUserIdTouserProfiles"
  )
  async updateSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectSalonRatingsSalonRatingsUserIdTouserProfiles"
  )
  async disconnectSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  @ApiNestedQuery(SalonRatingFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManySalonRatingsSalonRatingsVoterIdTouserProfiles"
  )
  async findManySalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRating[]> {
    const query = plainToClass(SalonRatingFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingsSalonRatingsVoterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            rating: true,
            review: true,

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectSalonRatingsSalonRatingsVoterIdTouserProfiles"
  )
  async connectSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateSalonRatingsSalonRatingsVoterIdTouserProfiles"
  )
  async updateSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectSalonRatingsSalonRatingsVoterIdTouserProfiles"
  )
  async disconnectSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  @ApiNestedQuery(SalonFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManySalonsSalonsSalonAdminIdTouserProfiles"
  )
  async findManySalonsSalonsSalonAdminIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Salon[]> {
    const query = plainToClass(SalonFindManyArgs, request.query);
    const results =
      await this.service.findSalonsSalonsSalonAdminIdTouserProfiles(params.id, {
        ...query,
        select: {
          active: true,
          address: true,
          barbers: true,
          categories: true,
          closeTime: true,
          createdAt: true,
          description: true,
          email: true,
          id: true,
          images: true,
          img: true,
          latLng: true,
          location: true,
          logo: true,
          name: true,
          open: true,
          openTime: true,
          phone: true,
          timezone: true,
          updatedAt: true,

          userProfilesSalonsSalonAdminIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectSalonsSalonsSalonAdminIdTouserProfiles"
  )
  async connectSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateSalonsSalonsSalonAdminIdTouserProfiles"
  )
  async updateSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectSalonsSalonsSalonAdminIdTouserProfiles"
  )
  async disconnectSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scheduleScheduleBarberIdTouserProfiles")
  @ApiNestedQuery(ScheduleFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyScheduleScheduleBarberIdTouserProfiles"
  )
  async findManyScheduleScheduleBarberIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results =
      await this.service.findScheduleScheduleBarberIdTouserProfiles(params.id, {
        ...query,
        select: {
          appointmentDate: true,
          appointmentTime: true,
          id: true,

          userProfilesScheduleBarberIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesScheduleUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scheduleScheduleBarberIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectScheduleScheduleBarberIdTouserProfiles"
  )
  async connectScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scheduleScheduleBarberIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateScheduleScheduleBarberIdTouserProfiles"
  )
  async updateScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scheduleScheduleBarberIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectScheduleScheduleBarberIdTouserProfiles"
  )
  async disconnectScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scheduleScheduleUserIdTouserProfiles")
  @ApiNestedQuery(ScheduleFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyScheduleScheduleUserIdTouserProfiles"
  )
  async findManyScheduleScheduleUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results = await this.service.findScheduleScheduleUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          appointmentDate: true,
          appointmentTime: true,
          id: true,

          userProfilesScheduleBarberIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesScheduleUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scheduleScheduleUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectScheduleScheduleUserIdTouserProfiles"
  )
  async connectScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scheduleScheduleUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateScheduleScheduleUserIdTouserProfiles"
  )
  async updateScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scheduleScheduleUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectScheduleScheduleUserIdTouserProfiles"
  )
  async disconnectScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlots")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyTimeSlots")
  async findManyTimeSlots(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlots(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlots")
  @GrpcMethod("UserProfileService", "connectTimeSlots")
  async connectTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlots")
  @GrpcMethod("UserProfileService", "updateTimeSlots")
  async updateTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlots")
  @GrpcMethod("UserProfileService", "disconnectTimeSlots")
  async disconnectTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAccounts")
  @ApiNestedQuery(UserAccountFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyUserAccounts")
  async findManyUserAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserAccount[]> {
    const query = plainToClass(UserAccountFindManyArgs, request.query);
    const results = await this.service.findUserAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAccounts")
  @GrpcMethod("UserProfileService", "connectUserAccounts")
  async connectUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAccounts")
  @GrpcMethod("UserProfileService", "updateUserAccounts")
  async updateUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAccounts")
  @GrpcMethod("UserProfileService", "disconnectUserAccounts")
  async disconnectUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAddresses")
  @ApiNestedQuery(UserAddressFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyUserAddresses")
  async findManyUserAddresses(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserAddress[]> {
    const query = plainToClass(UserAddressFindManyArgs, request.query);
    const results = await this.service.findUserAddresses(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAddresses")
  @GrpcMethod("UserProfileService", "connectUserAddresses")
  async connectUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAddresses")
  @GrpcMethod("UserProfileService", "updateUserAddresses")
  async updateUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAddresses")
  @GrpcMethod("UserProfileService", "disconnectUserAddresses")
  async disconnectUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userBankCards")
  @ApiNestedQuery(UserBankCardFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyUserBankCards")
  async findManyUserBankCards(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserBankCard[]> {
    const query = plainToClass(UserBankCardFindManyArgs, request.query);
    const results = await this.service.findUserBankCards(params.id, {
      ...query,
      select: {
        createdAt: true,
        cvv: true,
        expDate: true,
        favorite: true,
        id: true,
        main: true,
        name: true,
        numberField: true,
        token: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userBankCards")
  @GrpcMethod("UserProfileService", "connectUserBankCards")
  async connectUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userBankCards")
  @GrpcMethod("UserProfileService", "updateUserBankCards")
  async updateUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userBankCards")
  @GrpcMethod("UserProfileService", "disconnectUserBankCards")
  async disconnectUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  @ApiNestedQuery(UserFavoriteMasterFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async findManyUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteMaster[]> {
    const query = plainToClass(UserFavoriteMasterFindManyArgs, request.query);
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            favorite: true,
            id: true,

            userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserFavoriteMastersUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "connectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async connectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "updateUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async updateUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "disconnectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async disconnectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles")
  @ApiNestedQuery(UserFavoriteMasterFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async findManyUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteMaster[]> {
    const query = plainToClass(UserFavoriteMasterFindManyArgs, request.query);
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            favorite: true,
            id: true,

            userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserFavoriteMastersUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "connectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async connectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "updateUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async updateUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  @GrpcMethod(
    "UserProfileService",
    "disconnectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async disconnectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userFavoriteSalons")
  @ApiNestedQuery(UserFavoriteSalonFindManyArgs)
  @GrpcMethod("UserProfileService", "findManyUserFavoriteSalons")
  async findManyUserFavoriteSalons(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteSalon[]> {
    const query = plainToClass(UserFavoriteSalonFindManyArgs, request.query);
    const results = await this.service.findUserFavoriteSalons(params.id, {
      ...query,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userFavoriteSalons")
  @GrpcMethod("UserProfileService", "connectUserFavoriteSalons")
  async connectUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userFavoriteSalons")
  @GrpcMethod("UserProfileService", "updateUserFavoriteSalons")
  async updateUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userFavoriteSalons")
  @GrpcMethod("UserProfileService", "disconnectUserFavoriteSalons")
  async disconnectUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  @ApiNestedQuery(UserRatingFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyUserRatingsUserRatingsOwnerTouserProfiles"
  )
  async findManyUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserRating[]> {
    const query = plainToClass(UserRatingFindManyArgs, request.query);
    const results =
      await this.service.findUserRatingsUserRatingsOwnerTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,

            orders: {
              select: {
                id: true,
              },
            },

            rating: true,
            review: true,

            userProfilesUserRatingsOwnerTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectUserRatingsUserRatingsOwnerTouserProfiles"
  )
  async connectUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateUserRatingsUserRatingsOwnerTouserProfiles"
  )
  async updateUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectUserRatingsUserRatingsOwnerTouserProfiles"
  )
  async disconnectUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  @ApiNestedQuery(UserRatingFindManyArgs)
  @GrpcMethod(
    "UserProfileService",
    "findManyUserRatingsUserRatingsUserIdTouserProfiles"
  )
  async findManyUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserRating[]> {
    const query = plainToClass(UserRatingFindManyArgs, request.query);
    const results =
      await this.service.findUserRatingsUserRatingsUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,

            orders: {
              select: {
                id: true,
              },
            },

            rating: true,
            review: true,

            userProfilesUserRatingsOwnerTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "connectUserRatingsUserRatingsUserIdTouserProfiles"
  )
  async connectUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "updateUserRatingsUserRatingsUserIdTouserProfiles"
  )
  async updateUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  @GrpcMethod(
    "UserProfileService",
    "disconnectUserRatingsUserRatingsUserIdTouserProfiles"
  )
  async disconnectUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
