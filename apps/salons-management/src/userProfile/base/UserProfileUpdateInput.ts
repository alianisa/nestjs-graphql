/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentUpdateManyWithoutUserProfilesInput } from "./AppointmentUpdateManyWithoutUserProfilesInput";

import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsBoolean,
  IsInt,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { AttendanceUpdateManyWithoutUserProfilesInput } from "./AttendanceUpdateManyWithoutUserProfilesInput";
import { ChatMessageUpdateManyWithoutUserProfilesInput } from "./ChatMessageUpdateManyWithoutUserProfilesInput";
import { ChatUpdateManyWithoutUserProfilesInput } from "./ChatUpdateManyWithoutUserProfilesInput";
import { EmployeeDailyStatUpdateManyWithoutUserProfilesInput } from "./EmployeeDailyStatUpdateManyWithoutUserProfilesInput";
import { EmployeeStatUpdateManyWithoutUserProfilesInput } from "./EmployeeStatUpdateManyWithoutUserProfilesInput";
import { EmployeeTaskUpdateManyWithoutUserProfilesInput } from "./EmployeeTaskUpdateManyWithoutUserProfilesInput";
import { EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput } from "./EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { LoyaltyTransactionUpdateManyWithoutUserProfilesInput } from "./LoyaltyTransactionUpdateManyWithoutUserProfilesInput";
import { NotificationUpdateManyWithoutUserProfilesInput } from "./NotificationUpdateManyWithoutUserProfilesInput";
import { OrderUpdateManyWithoutUserProfilesInput } from "./OrderUpdateManyWithoutUserProfilesInput";
import { PayrollUpdateManyWithoutUserProfilesInput } from "./PayrollUpdateManyWithoutUserProfilesInput";
import { QueueUpdateManyWithoutUserProfilesInput } from "./QueueUpdateManyWithoutUserProfilesInput";
import { SalonAccountUpdateManyWithoutUserProfilesInput } from "./SalonAccountUpdateManyWithoutUserProfilesInput";
import { SalonRatingLikeUpdateManyWithoutUserProfilesInput } from "./SalonRatingLikeUpdateManyWithoutUserProfilesInput";
import { SalonRatingUpdateManyWithoutUserProfilesInput } from "./SalonRatingUpdateManyWithoutUserProfilesInput";
import { SalonUpdateManyWithoutUserProfilesInput } from "./SalonUpdateManyWithoutUserProfilesInput";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { ScheduleUpdateManyWithoutUserProfilesInput } from "./ScheduleUpdateManyWithoutUserProfilesInput";
import { TimeSlotUpdateManyWithoutUserProfilesInput } from "./TimeSlotUpdateManyWithoutUserProfilesInput";
import { UserAccountUpdateManyWithoutUserProfilesInput } from "./UserAccountUpdateManyWithoutUserProfilesInput";
import { UserAddressUpdateManyWithoutUserProfilesInput } from "./UserAddressUpdateManyWithoutUserProfilesInput";
import { UserBankCardUpdateManyWithoutUserProfilesInput } from "./UserBankCardUpdateManyWithoutUserProfilesInput";
import { UserFavoriteMasterUpdateManyWithoutUserProfilesInput } from "./UserFavoriteMasterUpdateManyWithoutUserProfilesInput";
import { UserFavoriteSalonUpdateManyWithoutUserProfilesInput } from "./UserFavoriteSalonUpdateManyWithoutUserProfilesInput";
import { UserGenderWhereUniqueInput } from "../../userGender/base/UserGenderWhereUniqueInput";
import { UserNotificationSettingWhereUniqueInput } from "../../userNotificationSetting/base/UserNotificationSettingWhereUniqueInput";
import { UserRatingUpdateManyWithoutUserProfilesInput } from "./UserRatingUpdateManyWithoutUserProfilesInput";

@InputType()
class UserProfileUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => AppointmentUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => AppointmentUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  appointments?: AppointmentUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => AttendanceUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => AttendanceUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => AttendanceUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  attendances?: AttendanceUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatarUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: () => ChatMessageUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatMessageUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatMessageUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatMessages?: ChatMessageUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUserATouserProfiles?: ChatUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUserBTouserProfiles?: ChatUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUsersTouserProfiles?: ChatUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeDailyStatUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeDailyStatUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeDailyStatUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeDailyStats?: EmployeeDailyStatUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeDismissalAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeEmploymentAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeStatUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeStatUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeStatUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeStats?: EmployeeStatUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeTaskUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTaskUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeTaskUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeTasks?: EmployeeTaskUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeWorkSchedules?: EmployeeWorkScheduleUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  fullRegistered?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAdmin?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBarber?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmployee?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  jobTitle?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  location?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPoints?: number | null;

  @ApiProperty({
    required: false,
    type: () => LoyaltyTransactionUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => LoyaltyTransactionUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => LoyaltyTransactionUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  loyaltyTransactions?: LoyaltyTransactionUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => NotificationUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => NotificationUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => NotificationUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  notifications?: NotificationUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => OrderUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => OrderUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => OrderUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  ordersOrdersEmployeeIdTouserProfiles?: OrderUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => OrderUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => OrderUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => OrderUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  ordersOrdersUserIdTouserProfiles?: OrderUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => PayrollUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => PayrollUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => PayrollUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  payroll?: PayrollUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;

  @ApiProperty({
    required: false,
    type: () => QueueUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => QueueUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => QueueUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  queuesQueuesEmployeeIdTouserProfiles?: QueueUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => QueueUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => QueueUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => QueueUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  queuesQueuesUserIdTouserProfiles?: QueueUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  roles?: string;

  @ApiProperty({
    required: false,
    type: () => SalonAccountUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonAccountUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonAccountUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonAccounts?: SalonAccountUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingLikeUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesUserIdTouserProfiles?: SalonRatingLikeUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingLikeUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesVoterIdTouserProfiles?: SalonRatingLikeUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingsSalonRatingsUserIdTouserProfiles?: SalonRatingUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingsSalonRatingsVoterIdTouserProfiles?: SalonRatingUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonsSalonsSalonAdminIdTouserProfiles?: SalonUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalonWhereUniqueInput)
  @IsOptional()
  @Field(() => SalonWhereUniqueInput, {
    nullable: true,
  })
  salonsUserProfilesSalonIdTosalons?: SalonWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ScheduleUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ScheduleUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ScheduleUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  scheduleScheduleBarberIdTouserProfiles?: ScheduleUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ScheduleUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ScheduleUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ScheduleUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  scheduleScheduleUserIdTouserProfiles?: ScheduleUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => TimeSlotUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  timeSlots?: TimeSlotUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserAccountUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserAccountUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserAccountUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userAccounts?: UserAccountUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserAddressUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserAddressUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserAddressUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userAddresses?: UserAddressUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserBankCardUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserBankCardUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserBankCardUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userBankCards?: UserBankCardUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteMasterUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles?: UserFavoriteMasterUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteMasterUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles?: UserFavoriteMasterUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteSalonUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteSalonUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteSalonUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteSalons?: UserFavoriteSalonUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserGenderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserGenderWhereUniqueInput)
  @IsOptional()
  @Field(() => UserGenderWhereUniqueInput, {
    nullable: true,
  })
  userGenders?: UserGenderWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserNotificationSettingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserNotificationSettingWhereUniqueInput)
  @IsOptional()
  @Field(() => UserNotificationSettingWhereUniqueInput, {
    nullable: true,
  })
  userNotificationSettings?: UserNotificationSettingWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserRatingUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserRatingUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserRatingUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userRatingsUserRatingsOwnerTouserProfiles?: UserRatingUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserRatingUpdateManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserRatingUpdateManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserRatingUpdateManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userRatingsUserRatingsUserIdTouserProfiles?: UserRatingUpdateManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website?: string | null;
}

export { UserProfileUpdateInput as UserProfileUpdateInput };
