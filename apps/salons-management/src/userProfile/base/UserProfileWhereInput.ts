/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentListRelationFilter } from "../../appointment/base/AppointmentListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { AttendanceListRelationFilter } from "../../attendance/base/AttendanceListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ChatMessageListRelationFilter } from "../../chatMessage/base/ChatMessageListRelationFilter";
import { ChatListRelationFilter } from "../../chat/base/ChatListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EmployeeDailyStatListRelationFilter } from "../../employeeDailyStat/base/EmployeeDailyStatListRelationFilter";
import { EmployeeStatListRelationFilter } from "../../employeeStat/base/EmployeeStatListRelationFilter";
import { EmployeeTaskListRelationFilter } from "../../employeeTask/base/EmployeeTaskListRelationFilter";
import { EmployeeWorkScheduleListRelationFilter } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleListRelationFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { JsonFilter } from "../../util/JsonFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { LoyaltyTransactionListRelationFilter } from "../../loyaltyTransaction/base/LoyaltyTransactionListRelationFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { OrderListRelationFilter } from "../../order/base/OrderListRelationFilter";
import { PayrollListRelationFilter } from "../../payroll/base/PayrollListRelationFilter";
import { QueueListRelationFilter } from "../../queue/base/QueueListRelationFilter";
import { SalonAccountListRelationFilter } from "../../salonAccount/base/SalonAccountListRelationFilter";
import { SalonRatingLikeListRelationFilter } from "../../salonRatingLike/base/SalonRatingLikeListRelationFilter";
import { SalonRatingListRelationFilter } from "../../salonRating/base/SalonRatingListRelationFilter";
import { SalonListRelationFilter } from "../../salon/base/SalonListRelationFilter";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { ScheduleListRelationFilter } from "../../schedule/base/ScheduleListRelationFilter";
import { TimeSlotListRelationFilter } from "../../timeSlot/base/TimeSlotListRelationFilter";
import { UserAccountListRelationFilter } from "../../userAccount/base/UserAccountListRelationFilter";
import { UserAddressListRelationFilter } from "../../userAddress/base/UserAddressListRelationFilter";
import { UserBankCardListRelationFilter } from "../../userBankCard/base/UserBankCardListRelationFilter";
import { UserFavoriteMasterListRelationFilter } from "../../userFavoriteMaster/base/UserFavoriteMasterListRelationFilter";
import { UserFavoriteSalonListRelationFilter } from "../../userFavoriteSalon/base/UserFavoriteSalonListRelationFilter";
import { UserGenderWhereUniqueInput } from "../../userGender/base/UserGenderWhereUniqueInput";
import { UserNotificationSettingWhereUniqueInput } from "../../userNotificationSetting/base/UserNotificationSettingWhereUniqueInput";
import { UserRatingListRelationFilter } from "../../userRating/base/UserRatingListRelationFilter";

@InputType()
class UserProfileWhereInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AppointmentListRelationFilter)
  @IsOptional()
  @Field(() => AppointmentListRelationFilter, {
    nullable: true,
  })
  appointments?: AppointmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AttendanceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AttendanceListRelationFilter)
  @IsOptional()
  @Field(() => AttendanceListRelationFilter, {
    nullable: true,
  })
  attendances?: AttendanceListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  avatarUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  bio?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ChatMessageListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ChatMessageListRelationFilter)
  @IsOptional()
  @Field(() => ChatMessageListRelationFilter, {
    nullable: true,
  })
  chatMessages?: ChatMessageListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ChatListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ChatListRelationFilter)
  @IsOptional()
  @Field(() => ChatListRelationFilter, {
    nullable: true,
  })
  chatsChatsUserATouserProfiles?: ChatListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ChatListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ChatListRelationFilter)
  @IsOptional()
  @Field(() => ChatListRelationFilter, {
    nullable: true,
  })
  chatsChatsUserBTouserProfiles?: ChatListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ChatListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ChatListRelationFilter)
  @IsOptional()
  @Field(() => ChatListRelationFilter, {
    nullable: true,
  })
  chatsChatsUsersTouserProfiles?: ChatListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  createdAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dateOfBirth?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  deletedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeDailyStatListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeDailyStatListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeDailyStatListRelationFilter, {
    nullable: true,
  })
  employeeDailyStats?: EmployeeDailyStatListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  employeeDismissalAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  employeeEmploymentAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeStatListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeStatListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeStatListRelationFilter, {
    nullable: true,
  })
  employeeStats?: EmployeeStatListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeTaskListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeTaskListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeTaskListRelationFilter, {
    nullable: true,
  })
  employeeTasks?: EmployeeTaskListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeWorkScheduleListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmployeeWorkScheduleListRelationFilter)
  @IsOptional()
  @Field(() => EmployeeWorkScheduleListRelationFilter, {
    nullable: true,
  })
  employeeWorkSchedules?: EmployeeWorkScheduleListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  fullName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  fullRegistered?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  hiredDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isAdmin?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isBarber?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isEmployee?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  jobTitle?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  location?: JsonFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  loyaltyPoints?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => LoyaltyTransactionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LoyaltyTransactionListRelationFilter)
  @IsOptional()
  @Field(() => LoyaltyTransactionListRelationFilter, {
    nullable: true,
  })
  loyaltyTransactions?: LoyaltyTransactionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrderListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrderListRelationFilter)
  @IsOptional()
  @Field(() => OrderListRelationFilter, {
    nullable: true,
  })
  ordersOrdersEmployeeIdTouserProfiles?: OrderListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrderListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrderListRelationFilter)
  @IsOptional()
  @Field(() => OrderListRelationFilter, {
    nullable: true,
  })
  ordersOrdersUserIdTouserProfiles?: OrderListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PayrollListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PayrollListRelationFilter)
  @IsOptional()
  @Field(() => PayrollListRelationFilter, {
    nullable: true,
  })
  payroll?: PayrollListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phone?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => QueueListRelationFilter,
  })
  @ValidateNested()
  @Type(() => QueueListRelationFilter)
  @IsOptional()
  @Field(() => QueueListRelationFilter, {
    nullable: true,
  })
  queuesQueuesEmployeeIdTouserProfiles?: QueueListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => QueueListRelationFilter,
  })
  @ValidateNested()
  @Type(() => QueueListRelationFilter)
  @IsOptional()
  @Field(() => QueueListRelationFilter, {
    nullable: true,
  })
  queuesQueuesUserIdTouserProfiles?: QueueListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  roles?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => SalonAccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonAccountListRelationFilter)
  @IsOptional()
  @Field(() => SalonAccountListRelationFilter, {
    nullable: true,
  })
  salonAccounts?: SalonAccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeListRelationFilter)
  @IsOptional()
  @Field(() => SalonRatingLikeListRelationFilter, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesUserIdTouserProfiles?: SalonRatingLikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeListRelationFilter)
  @IsOptional()
  @Field(() => SalonRatingLikeListRelationFilter, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesVoterIdTouserProfiles?: SalonRatingLikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonRatingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonRatingListRelationFilter)
  @IsOptional()
  @Field(() => SalonRatingListRelationFilter, {
    nullable: true,
  })
  salonRatingsSalonRatingsUserIdTouserProfiles?: SalonRatingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonRatingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonRatingListRelationFilter)
  @IsOptional()
  @Field(() => SalonRatingListRelationFilter, {
    nullable: true,
  })
  salonRatingsSalonRatingsVoterIdTouserProfiles?: SalonRatingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SalonListRelationFilter)
  @IsOptional()
  @Field(() => SalonListRelationFilter, {
    nullable: true,
  })
  salonsSalonsSalonAdminIdTouserProfiles?: SalonListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SalonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalonWhereUniqueInput)
  @IsOptional()
  @Field(() => SalonWhereUniqueInput, {
    nullable: true,
  })
  salonsUserProfilesSalonIdTosalons?: SalonWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ScheduleListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ScheduleListRelationFilter)
  @IsOptional()
  @Field(() => ScheduleListRelationFilter, {
    nullable: true,
  })
  scheduleScheduleBarberIdTouserProfiles?: ScheduleListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ScheduleListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ScheduleListRelationFilter)
  @IsOptional()
  @Field(() => ScheduleListRelationFilter, {
    nullable: true,
  })
  scheduleScheduleUserIdTouserProfiles?: ScheduleListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TimeSlotListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TimeSlotListRelationFilter)
  @IsOptional()
  @Field(() => TimeSlotListRelationFilter, {
    nullable: true,
  })
  timeSlots?: TimeSlotListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserAccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserAccountListRelationFilter)
  @IsOptional()
  @Field(() => UserAccountListRelationFilter, {
    nullable: true,
  })
  userAccounts?: UserAccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserAddressListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserAddressListRelationFilter)
  @IsOptional()
  @Field(() => UserAddressListRelationFilter, {
    nullable: true,
  })
  userAddresses?: UserAddressListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserBankCardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserBankCardListRelationFilter)
  @IsOptional()
  @Field(() => UserBankCardListRelationFilter, {
    nullable: true,
  })
  userBankCards?: UserBankCardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterListRelationFilter)
  @IsOptional()
  @Field(() => UserFavoriteMasterListRelationFilter, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles?: UserFavoriteMasterListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterListRelationFilter)
  @IsOptional()
  @Field(() => UserFavoriteMasterListRelationFilter, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles?: UserFavoriteMasterListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteSalonListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserFavoriteSalonListRelationFilter)
  @IsOptional()
  @Field(() => UserFavoriteSalonListRelationFilter, {
    nullable: true,
  })
  userFavoriteSalons?: UserFavoriteSalonListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserGenderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserGenderWhereUniqueInput)
  @IsOptional()
  @Field(() => UserGenderWhereUniqueInput, {
    nullable: true,
  })
  userGenders?: UserGenderWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserNotificationSettingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserNotificationSettingWhereUniqueInput)
  @IsOptional()
  @Field(() => UserNotificationSettingWhereUniqueInput, {
    nullable: true,
  })
  userNotificationSettings?: UserNotificationSettingWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserRatingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserRatingListRelationFilter)
  @IsOptional()
  @Field(() => UserRatingListRelationFilter, {
    nullable: true,
  })
  userRatingsUserRatingsOwnerTouserProfiles?: UserRatingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserRatingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserRatingListRelationFilter)
  @IsOptional()
  @Field(() => UserRatingListRelationFilter, {
    nullable: true,
  })
  userRatingsUserRatingsUserIdTouserProfiles?: UserRatingListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  username?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  website?: StringNullableFilter;
}

export { UserProfileWhereInput as UserProfileWhereInput };
