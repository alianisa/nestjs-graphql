/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentCreateNestedManyWithoutUserProfilesInput } from "./AppointmentCreateNestedManyWithoutUserProfilesInput";

import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsBoolean,
  IsInt,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { AttendanceCreateNestedManyWithoutUserProfilesInput } from "./AttendanceCreateNestedManyWithoutUserProfilesInput";
import { ChatMessageCreateNestedManyWithoutUserProfilesInput } from "./ChatMessageCreateNestedManyWithoutUserProfilesInput";
import { ChatCreateNestedManyWithoutUserProfilesInput } from "./ChatCreateNestedManyWithoutUserProfilesInput";
import { EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput } from "./EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput";
import { EmployeeStatCreateNestedManyWithoutUserProfilesInput } from "./EmployeeStatCreateNestedManyWithoutUserProfilesInput";
import { EmployeeTaskCreateNestedManyWithoutUserProfilesInput } from "./EmployeeTaskCreateNestedManyWithoutUserProfilesInput";
import { EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput } from "./EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput } from "./LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput";
import { NotificationCreateNestedManyWithoutUserProfilesInput } from "./NotificationCreateNestedManyWithoutUserProfilesInput";
import { OrderCreateNestedManyWithoutUserProfilesInput } from "./OrderCreateNestedManyWithoutUserProfilesInput";
import { PayrollCreateNestedManyWithoutUserProfilesInput } from "./PayrollCreateNestedManyWithoutUserProfilesInput";
import { QueueCreateNestedManyWithoutUserProfilesInput } from "./QueueCreateNestedManyWithoutUserProfilesInput";
import { SalonAccountCreateNestedManyWithoutUserProfilesInput } from "./SalonAccountCreateNestedManyWithoutUserProfilesInput";
import { SalonRatingLikeCreateNestedManyWithoutUserProfilesInput } from "./SalonRatingLikeCreateNestedManyWithoutUserProfilesInput";
import { SalonRatingCreateNestedManyWithoutUserProfilesInput } from "./SalonRatingCreateNestedManyWithoutUserProfilesInput";
import { SalonCreateNestedManyWithoutUserProfilesInput } from "./SalonCreateNestedManyWithoutUserProfilesInput";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { ScheduleCreateNestedManyWithoutUserProfilesInput } from "./ScheduleCreateNestedManyWithoutUserProfilesInput";
import { TimeSlotCreateNestedManyWithoutUserProfilesInput } from "./TimeSlotCreateNestedManyWithoutUserProfilesInput";
import { UserAccountCreateNestedManyWithoutUserProfilesInput } from "./UserAccountCreateNestedManyWithoutUserProfilesInput";
import { UserAddressCreateNestedManyWithoutUserProfilesInput } from "./UserAddressCreateNestedManyWithoutUserProfilesInput";
import { UserBankCardCreateNestedManyWithoutUserProfilesInput } from "./UserBankCardCreateNestedManyWithoutUserProfilesInput";
import { UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput } from "./UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput";
import { UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput } from "./UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput";
import { UserGenderWhereUniqueInput } from "../../userGender/base/UserGenderWhereUniqueInput";
import { UserNotificationSettingWhereUniqueInput } from "../../userNotificationSetting/base/UserNotificationSettingWhereUniqueInput";
import { UserRatingCreateNestedManyWithoutUserProfilesInput } from "./UserRatingCreateNestedManyWithoutUserProfilesInput";

@InputType()
class UserProfileCreateInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => AppointmentCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => AppointmentCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  appointments?: AppointmentCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => AttendanceCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => AttendanceCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => AttendanceCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  attendances?: AttendanceCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatarUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: () => ChatMessageCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatMessageCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatMessageCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatMessages?: ChatMessageCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUserATouserProfiles?: ChatCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUserBTouserProfiles?: ChatCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ChatCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ChatCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ChatCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  chatsChatsUsersTouserProfiles?: ChatCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeDailyStats?: EmployeeDailyStatCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeDismissalAt?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeEmploymentAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeStatCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeStatCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeStatCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeStats?: EmployeeStatCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeTaskCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeTaskCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeTaskCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeTasks?: EmployeeTaskCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  employeeWorkSchedules?: EmployeeWorkScheduleCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  fullRegistered?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAdmin?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBarber?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmployee?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  jobTitle?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  location?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPoints?: number | null;

  @ApiProperty({
    required: false,
    type: () => LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  loyaltyTransactions?: LoyaltyTransactionCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => NotificationCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => NotificationCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => NotificationCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  notifications?: NotificationCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => OrderCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => OrderCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => OrderCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  ordersOrdersEmployeeIdTouserProfiles?: OrderCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => OrderCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => OrderCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => OrderCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  ordersOrdersUserIdTouserProfiles?: OrderCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => PayrollCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => PayrollCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => PayrollCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  payroll?: PayrollCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;

  @ApiProperty({
    required: false,
    type: () => QueueCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => QueueCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => QueueCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  queuesQueuesEmployeeIdTouserProfiles?: QueueCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => QueueCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => QueueCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => QueueCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  queuesQueuesUserIdTouserProfiles?: QueueCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  roles!: string;

  @ApiProperty({
    required: false,
    type: () => SalonAccountCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonAccountCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonAccountCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonAccounts?: SalonAccountCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesUserIdTouserProfiles?: SalonRatingLikeCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingLikeCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingLikesSalonRatingLikesVoterIdTouserProfiles?: SalonRatingLikeCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingsSalonRatingsUserIdTouserProfiles?: SalonRatingCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonRatingCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonRatingCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonRatingCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonRatingsSalonRatingsVoterIdTouserProfiles?: SalonRatingCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => SalonCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => SalonCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  salonsSalonsSalonAdminIdTouserProfiles?: SalonCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => SalonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalonWhereUniqueInput)
  @IsOptional()
  @Field(() => SalonWhereUniqueInput, {
    nullable: true,
  })
  salonsUserProfilesSalonIdTosalons?: SalonWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ScheduleCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ScheduleCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ScheduleCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  scheduleScheduleBarberIdTouserProfiles?: ScheduleCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => ScheduleCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => ScheduleCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => ScheduleCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  scheduleScheduleUserIdTouserProfiles?: ScheduleCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => TimeSlotCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  timeSlots?: TimeSlotCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserAccountCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserAccountCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserAccountCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userAccounts?: UserAccountCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserAddressCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserAddressCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserAddressCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userAddresses?: UserAddressCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserBankCardCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserBankCardCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserBankCardCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userBankCards?: UserBankCardCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles?: UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles?: UserFavoriteMasterCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userFavoriteSalons?: UserFavoriteSalonCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserGenderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserGenderWhereUniqueInput)
  @IsOptional()
  @Field(() => UserGenderWhereUniqueInput, {
    nullable: true,
  })
  userGenders?: UserGenderWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserNotificationSettingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserNotificationSettingWhereUniqueInput)
  @IsOptional()
  @Field(() => UserNotificationSettingWhereUniqueInput, {
    nullable: true,
  })
  userNotificationSettings?: UserNotificationSettingWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserRatingCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserRatingCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserRatingCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userRatingsUserRatingsOwnerTouserProfiles?: UserRatingCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: () => UserRatingCreateNestedManyWithoutUserProfilesInput,
  })
  @ValidateNested()
  @Type(() => UserRatingCreateNestedManyWithoutUserProfilesInput)
  @IsOptional()
  @Field(() => UserRatingCreateNestedManyWithoutUserProfilesInput, {
    nullable: true,
  })
  userRatingsUserRatingsUserIdTouserProfiles?: UserRatingCreateNestedManyWithoutUserProfilesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website?: string | null;
}

export { UserProfileCreateInput as UserProfileCreateInput };
