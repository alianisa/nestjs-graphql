/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserProfile as PrismaUserProfile,
  Appointment as PrismaAppointment,
  Attendance as PrismaAttendance,
  ChatMessage as PrismaChatMessage,
  Chat as PrismaChat,
  EmployeeDailyStat as PrismaEmployeeDailyStat,
  EmployeeStat as PrismaEmployeeStat,
  EmployeeTask as PrismaEmployeeTask,
  EmployeeWorkSchedule as PrismaEmployeeWorkSchedule,
  LoyaltyTransaction as PrismaLoyaltyTransaction,
  Notification as PrismaNotification,
  Order as PrismaOrder,
  Payroll as PrismaPayroll,
  Queue as PrismaQueue,
  SalonAccount as PrismaSalonAccount,
  SalonRatingLike as PrismaSalonRatingLike,
  SalonRating as PrismaSalonRating,
  Salon as PrismaSalon,
  Schedule as PrismaSchedule,
  TimeSlot as PrismaTimeSlot,
  UserAccount as PrismaUserAccount,
  UserAddress as PrismaUserAddress,
  UserBankCard as PrismaUserBankCard,
  UserFavoriteMaster as PrismaUserFavoriteMaster,
  UserFavoriteSalon as PrismaUserFavoriteSalon,
  UserRating as PrismaUserRating,
  User as PrismaUser,
  UserGender as PrismaUserGender,
  UserNotificationSetting as PrismaUserNotificationSetting,
} from "@prisma/client";

export class UserProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userProfile.count(args);
  }

  async userProfiles(
    args: Prisma.UserProfileFindManyArgs
  ): Promise<PrismaUserProfile[]> {
    return this.prisma.userProfile.findMany(args);
  }
  async userProfile(
    args: Prisma.UserProfileFindUniqueArgs
  ): Promise<PrismaUserProfile | null> {
    return this.prisma.userProfile.findUnique(args);
  }
  async createUserProfile(
    args: Prisma.UserProfileCreateArgs
  ): Promise<PrismaUserProfile> {
    return this.prisma.userProfile.create(args);
  }
  async updateUserProfile(
    args: Prisma.UserProfileUpdateArgs
  ): Promise<PrismaUserProfile> {
    return this.prisma.userProfile.update(args);
  }
  async deleteUserProfile(
    args: Prisma.UserProfileDeleteArgs
  ): Promise<PrismaUserProfile> {
    return this.prisma.userProfile.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }

  async findChatMessages(
    parentId: string,
    args: Prisma.ChatMessageFindManyArgs
  ): Promise<PrismaChatMessage[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatMessages(args);
  }

  async findChatsChatsUserATouserProfiles(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<PrismaChat[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatsChatsUserATouserProfiles(args);
  }

  async findChatsChatsUserBTouserProfiles(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<PrismaChat[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatsChatsUserBTouserProfiles(args);
  }

  async findChatsChatsUsersTouserProfiles(
    parentId: string,
    args: Prisma.ChatFindManyArgs
  ): Promise<PrismaChat[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatsChatsUsersTouserProfiles(args);
  }

  async findEmployeeDailyStats(
    parentId: string,
    args: Prisma.EmployeeDailyStatFindManyArgs
  ): Promise<PrismaEmployeeDailyStat[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeDailyStats(args);
  }

  async findEmployeeStats(
    parentId: string,
    args: Prisma.EmployeeStatFindManyArgs
  ): Promise<PrismaEmployeeStat[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeStats(args);
  }

  async findEmployeeTasks(
    parentId: string,
    args: Prisma.EmployeeTaskFindManyArgs
  ): Promise<PrismaEmployeeTask[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeTasks(args);
  }

  async findEmployeeWorkSchedules(
    parentId: string,
    args: Prisma.EmployeeWorkScheduleFindManyArgs
  ): Promise<PrismaEmployeeWorkSchedule[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeWorkSchedules(args);
  }

  async findLoyaltyTransactions(
    parentId: string,
    args: Prisma.LoyaltyTransactionFindManyArgs
  ): Promise<PrismaLoyaltyTransaction[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loyaltyTransactions(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findOrdersOrdersEmployeeIdTouserProfiles(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersOrdersEmployeeIdTouserProfiles(args);
  }

  async findOrdersOrdersUserIdTouserProfiles(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersOrdersUserIdTouserProfiles(args);
  }

  async findPayroll(
    parentId: string,
    args: Prisma.PayrollFindManyArgs
  ): Promise<PrismaPayroll[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payroll(args);
  }

  async findQueuesQueuesEmployeeIdTouserProfiles(
    parentId: string,
    args: Prisma.QueueFindManyArgs
  ): Promise<PrismaQueue[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queuesQueuesEmployeeIdTouserProfiles(args);
  }

  async findQueuesQueuesUserIdTouserProfiles(
    parentId: string,
    args: Prisma.QueueFindManyArgs
  ): Promise<PrismaQueue[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queuesQueuesUserIdTouserProfiles(args);
  }

  async findSalonAccounts(
    parentId: string,
    args: Prisma.SalonAccountFindManyArgs
  ): Promise<PrismaSalonAccount[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonAccounts(args);
  }

  async findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    parentId: string,
    args: Prisma.SalonRatingLikeFindManyArgs
  ): Promise<PrismaSalonRatingLike[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingLikesSalonRatingLikesUserIdTouserProfiles(args);
  }

  async findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    parentId: string,
    args: Prisma.SalonRatingLikeFindManyArgs
  ): Promise<PrismaSalonRatingLike[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingLikesSalonRatingLikesVoterIdTouserProfiles(args);
  }

  async findSalonRatingsSalonRatingsUserIdTouserProfiles(
    parentId: string,
    args: Prisma.SalonRatingFindManyArgs
  ): Promise<PrismaSalonRating[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingsSalonRatingsUserIdTouserProfiles(args);
  }

  async findSalonRatingsSalonRatingsVoterIdTouserProfiles(
    parentId: string,
    args: Prisma.SalonRatingFindManyArgs
  ): Promise<PrismaSalonRating[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonRatingsSalonRatingsVoterIdTouserProfiles(args);
  }

  async findSalonsSalonsSalonAdminIdTouserProfiles(
    parentId: string,
    args: Prisma.SalonFindManyArgs
  ): Promise<PrismaSalon[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salonsSalonsSalonAdminIdTouserProfiles(args);
  }

  async findScheduleScheduleBarberIdTouserProfiles(
    parentId: string,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scheduleScheduleBarberIdTouserProfiles(args);
  }

  async findScheduleScheduleUserIdTouserProfiles(
    parentId: string,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scheduleScheduleUserIdTouserProfiles(args);
  }

  async findTimeSlots(
    parentId: string,
    args: Prisma.TimeSlotFindManyArgs
  ): Promise<PrismaTimeSlot[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeSlots(args);
  }

  async findUserAccounts(
    parentId: string,
    args: Prisma.UserAccountFindManyArgs
  ): Promise<PrismaUserAccount[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAccounts(args);
  }

  async findUserAddresses(
    parentId: string,
    args: Prisma.UserAddressFindManyArgs
  ): Promise<PrismaUserAddress[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAddresses(args);
  }

  async findUserBankCards(
    parentId: string,
    args: Prisma.UserBankCardFindManyArgs
  ): Promise<PrismaUserBankCard[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userBankCards(args);
  }

  async findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    parentId: string,
    args: Prisma.UserFavoriteMasterFindManyArgs
  ): Promise<PrismaUserFavoriteMaster[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(args);
  }

  async findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    parentId: string,
    args: Prisma.UserFavoriteMasterFindManyArgs
  ): Promise<PrismaUserFavoriteMaster[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(args);
  }

  async findUserFavoriteSalons(
    parentId: string,
    args: Prisma.UserFavoriteSalonFindManyArgs
  ): Promise<PrismaUserFavoriteSalon[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userFavoriteSalons(args);
  }

  async findUserRatingsUserRatingsOwnerTouserProfiles(
    parentId: string,
    args: Prisma.UserRatingFindManyArgs
  ): Promise<PrismaUserRating[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userRatingsUserRatingsOwnerTouserProfiles(args);
  }

  async findUserRatingsUserRatingsUserIdTouserProfiles(
    parentId: string,
    args: Prisma.UserRatingFindManyArgs
  ): Promise<PrismaUserRating[]> {
    return this.prisma.userProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userRatingsUserRatingsUserIdTouserProfiles(args);
  }

  async getSalonsUserProfilesSalonIdTosalons(
    parentId: string
  ): Promise<PrismaSalon | null> {
    return this.prisma.userProfile
      .findUnique({
        where: { id: parentId },
      })
      .salonsUserProfilesSalonIdTosalons();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getUserGenders(parentId: string): Promise<PrismaUserGender | null> {
    return this.prisma.userProfile
      .findUnique({
        where: { id: parentId },
      })
      .userGenders();
  }

  async getUserNotificationSettings(
    parentId: string
  ): Promise<PrismaUserNotificationSetting | null> {
    return this.prisma.userProfile
      .findUnique({
        where: { id: parentId },
      })
      .userNotificationSettings();
  }
}
