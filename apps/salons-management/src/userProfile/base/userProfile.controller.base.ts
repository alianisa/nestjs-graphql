/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserProfileService } from "../userProfile.service";
import { UserProfileCreateInput } from "./UserProfileCreateInput";
import { UserProfile } from "./UserProfile";
import { UserProfileFindManyArgs } from "./UserProfileFindManyArgs";
import { UserProfileWhereUniqueInput } from "./UserProfileWhereUniqueInput";
import { UserProfileUpdateInput } from "./UserProfileUpdateInput";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ChatMessageWhereUniqueInput } from "../../chatMessage/base/ChatMessageWhereUniqueInput";
import { ChatFindManyArgs } from "../../chat/base/ChatFindManyArgs";
import { Chat } from "../../chat/base/Chat";
import { ChatWhereUniqueInput } from "../../chat/base/ChatWhereUniqueInput";
import { EmployeeDailyStatFindManyArgs } from "../../employeeDailyStat/base/EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeDailyStatWhereUniqueInput } from "../../employeeDailyStat/base/EmployeeDailyStatWhereUniqueInput";
import { EmployeeStatFindManyArgs } from "../../employeeStat/base/EmployeeStatFindManyArgs";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeStatWhereUniqueInput } from "../../employeeStat/base/EmployeeStatWhereUniqueInput";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeTaskWhereUniqueInput } from "../../employeeTask/base/EmployeeTaskWhereUniqueInput";
import { EmployeeWorkScheduleFindManyArgs } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { EmployeeWorkScheduleWhereUniqueInput } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleWhereUniqueInput";
import { LoyaltyTransactionFindManyArgs } from "../../loyaltyTransaction/base/LoyaltyTransactionFindManyArgs";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { LoyaltyTransactionWhereUniqueInput } from "../../loyaltyTransaction/base/LoyaltyTransactionWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { PayrollWhereUniqueInput } from "../../payroll/base/PayrollWhereUniqueInput";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { SalonAccountFindManyArgs } from "../../salonAccount/base/SalonAccountFindManyArgs";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonAccountWhereUniqueInput } from "../../salonAccount/base/SalonAccountWhereUniqueInput";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingLikeWhereUniqueInput } from "../../salonRatingLike/base/SalonRatingLikeWhereUniqueInput";
import { SalonRatingFindManyArgs } from "../../salonRating/base/SalonRatingFindManyArgs";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonRatingWhereUniqueInput } from "../../salonRating/base/SalonRatingWhereUniqueInput";
import { SalonFindManyArgs } from "../../salon/base/SalonFindManyArgs";
import { Salon } from "../../salon/base/Salon";
import { SalonWhereUniqueInput } from "../../salon/base/SalonWhereUniqueInput";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAccountWhereUniqueInput } from "../../userAccount/base/UserAccountWhereUniqueInput";
import { UserAddressFindManyArgs } from "../../userAddress/base/UserAddressFindManyArgs";
import { UserAddress } from "../../userAddress/base/UserAddress";
import { UserAddressWhereUniqueInput } from "../../userAddress/base/UserAddressWhereUniqueInput";
import { UserBankCardFindManyArgs } from "../../userBankCard/base/UserBankCardFindManyArgs";
import { UserBankCard } from "../../userBankCard/base/UserBankCard";
import { UserBankCardWhereUniqueInput } from "../../userBankCard/base/UserBankCardWhereUniqueInput";
import { UserFavoriteMasterFindManyArgs } from "../../userFavoriteMaster/base/UserFavoriteMasterFindManyArgs";
import { UserFavoriteMaster } from "../../userFavoriteMaster/base/UserFavoriteMaster";
import { UserFavoriteMasterWhereUniqueInput } from "../../userFavoriteMaster/base/UserFavoriteMasterWhereUniqueInput";
import { UserFavoriteSalonFindManyArgs } from "../../userFavoriteSalon/base/UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserFavoriteSalonWhereUniqueInput } from "../../userFavoriteSalon/base/UserFavoriteSalonWhereUniqueInput";
import { UserRatingFindManyArgs } from "../../userRating/base/UserRatingFindManyArgs";
import { UserRating } from "../../userRating/base/UserRating";
import { UserRatingWhereUniqueInput } from "../../userRating/base/UserRatingWhereUniqueInput";

export class UserProfileControllerBase {
  constructor(protected readonly service: UserProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserProfile })
  async createUserProfile(
    @common.Body() data: UserProfileCreateInput
  ): Promise<UserProfile> {
    return await this.service.createUserProfile({
      data: {
        ...data,

        salonsUserProfilesSalonIdTosalons:
          data.salonsUserProfilesSalonIdTosalons
            ? {
                connect: data.salonsUserProfilesSalonIdTosalons,
              }
            : undefined,

        userGenders: data.userGenders
          ? {
              connect: data.userGenders,
            }
          : undefined,

        userNotificationSettings: data.userNotificationSettings
          ? {
              connect: data.userNotificationSettings,
            }
          : undefined,
      },
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,
        roles: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        username: true,
        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserProfile] })
  @ApiNestedQuery(UserProfileFindManyArgs)
  async userProfiles(@common.Req() request: Request): Promise<UserProfile[]> {
    const args = plainToClass(UserProfileFindManyArgs, request.query);
    return this.service.userProfiles({
      ...args,
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,
        roles: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        username: true,
        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    const result = await this.service.userProfile({
      where: params,
      select: {
        avatarUrl: true,
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        deletedAt: true,
        email: true,
        employeeDismissalAt: true,
        employeeEmploymentAt: true,
        firstName: true,
        fullName: true,
        fullRegistered: true,
        hiredDate: true,
        id: true,
        isAdmin: true,
        isBarber: true,
        isEmployee: true,
        jobTitle: true,
        lastName: true,
        location: true,
        loyaltyPoints: true,
        phone: true,
        roles: true,

        salonsUserProfilesSalonIdTosalons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userGenders: {
          select: {
            id: true,
          },
        },

        userNotificationSettings: {
          select: {
            id: true,
          },
        },

        username: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() data: UserProfileUpdateInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.updateUserProfile({
        where: params,
        data: {
          ...data,

          salonsUserProfilesSalonIdTosalons:
            data.salonsUserProfilesSalonIdTosalons
              ? {
                  connect: data.salonsUserProfilesSalonIdTosalons,
                }
              : undefined,

          userGenders: data.userGenders
            ? {
                connect: data.userGenders,
              }
            : undefined,

          userNotificationSettings: data.userNotificationSettings
            ? {
                connect: data.userNotificationSettings,
              }
            : undefined,
        },
        select: {
          avatarUrl: true,
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          deletedAt: true,
          email: true,
          employeeDismissalAt: true,
          employeeEmploymentAt: true,
          firstName: true,
          fullName: true,
          fullRegistered: true,
          hiredDate: true,
          id: true,
          isAdmin: true,
          isBarber: true,
          isEmployee: true,
          jobTitle: true,
          lastName: true,
          location: true,
          loyaltyPoints: true,
          phone: true,
          roles: true,

          salonsUserProfilesSalonIdTosalons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userGenders: {
            select: {
              id: true,
            },
          },

          userNotificationSettings: {
            select: {
              id: true,
            },
          },

          username: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.deleteUserProfile({
        where: params,
        select: {
          avatarUrl: true,
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          deletedAt: true,
          email: true,
          employeeDismissalAt: true,
          employeeEmploymentAt: true,
          firstName: true,
          fullName: true,
          fullRegistered: true,
          hiredDate: true,
          id: true,
          isAdmin: true,
          isBarber: true,
          isEmployee: true,
          jobTitle: true,
          lastName: true,
          location: true,
          loyaltyPoints: true,
          phone: true,
          roles: true,

          salonsUserProfilesSalonIdTosalons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userGenders: {
            select: {
              id: true,
            },
          },

          userNotificationSettings: {
            select: {
              id: true,
            },
          },

          username: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointments")
  @ApiNestedQuery(AppointmentFindManyArgs)
  async findAppointments(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Appointment[]> {
    const query = plainToClass(AppointmentFindManyArgs, request.query);
    const results = await this.service.findAppointments(params.id, {
      ...query,
      select: {
        appointmentDate: true,
        employeeId: true,
        id: true,

        ordersAppointmentsOrderIdToorders: {
          select: {
            id: true,
          },
        },

        timeSlots: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointments")
  async connectAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointments")
  async updateAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointments")
  async disconnectAppointments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  async findAttendances(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        action: true,
        actionTime: true,
        clockin: true,
        clockout: true,
        completed: true,
        createdAt: true,
        date: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  async connectAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  async updateAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  async disconnectAttendances(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatMessages")
  @ApiNestedQuery(ChatMessageFindManyArgs)
  async findChatMessages(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<ChatMessage[]> {
    const query = plainToClass(ChatMessageFindManyArgs, request.query);
    const results = await this.service.findChatMessages(params.id, {
      ...query,
      select: {
        chatMessages: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        timestamp: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatMessages")
  async connectChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatMessages")
  async updateChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatMessages")
  async disconnectChatMessages(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUserATouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  async findChatsChatsUserATouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUserATouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUserATouserProfiles")
  async connectChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUserATouserProfiles")
  async updateChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUserATouserProfiles")
  async disconnectChatsChatsUserATouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserATouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUserBTouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  async findChatsChatsUserBTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUserBTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUserBTouserProfiles")
  async connectChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUserBTouserProfiles")
  async updateChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUserBTouserProfiles")
  async disconnectChatsChatsUserBTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUserBTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/chatsChatsUsersTouserProfiles")
  @ApiNestedQuery(ChatFindManyArgs)
  async findChatsChatsUsersTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Chat[]> {
    const query = plainToClass(ChatFindManyArgs, request.query);
    const results = await this.service.findChatsChatsUsersTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          id: true,
          lastMessage: true,
          lastMessageTime: true,

          userProfilesChatsUserATouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUserBTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesChatsUsersTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatsChatsUsersTouserProfiles")
  async connectChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatsChatsUsersTouserProfiles")
  async updateChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatsChatsUsersTouserProfiles")
  async disconnectChatsChatsUsersTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatsChatsUsersTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeDailyStats")
  @ApiNestedQuery(EmployeeDailyStatFindManyArgs)
  async findEmployeeDailyStats(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeDailyStat[]> {
    const query = plainToClass(EmployeeDailyStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeDailyStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageServiceTime: true,
        avgServiceTimeChangePercent: true,
        avgServiceTimeTrend: true,
        bestServiceTime: true,
        canceledOrders: true,
        cardRevenue: true,
        cashRevenue: true,
        clientsChangePercent: true,
        clientsTrend: true,
        completedOrders: true,
        createdAt: true,
        dailyRating: true,
        date: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyTrend: true,
        firstOrderTime: true,
        id: true,
        lastOrderTime: true,
        monthToDateOrders: true,
        monthToDateRevenue: true,
        newClients: true,
        offPeakOrders: true,
        ordersChangePercent: true,
        ordersCount: true,
        ordersTrend: true,
        overtimeHours: true,
        peakHoursOrders: true,
        performanceScore: true,
        prevMonthOrders: true,
        prevMonthRevenue: true,
        ratingChangePercent: true,
        ratingTrend: true,
        ratingsCount: true,
        repeatClients: true,
        revenue: true,
        revenueChangePercent: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        scheduledHours: true,
        servicesCount: true,
        totalBreaksTime: true,
        totalClients: true,
        totalIdleTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        workTime: true,
        worstServiceTime: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeDailyStats")
  async connectEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeDailyStats")
  async updateEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeDailyStats")
  async disconnectEmployeeDailyStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeDailyStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDailyStats: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeStats")
  @ApiNestedQuery(EmployeeStatFindManyArgs)
  async findEmployeeStats(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeStat[]> {
    const query = plainToClass(EmployeeStatFindManyArgs, request.query);
    const results = await this.service.findEmployeeStats(params.id, {
      ...query,
      select: {
        averageOrderAmount: true,
        averageOrderDuration: true,
        averageRating: true,
        averageServiceTime: true,
        canceledOrdersCount: true,
        cardPaymentsAmount: true,
        cashPaymentsAmount: true,
        consistencyScore: true,
        conversionRate: true,
        createdAt: true,
        currentMonthOrders: true,
        currentMonthRevenue: true,
        efficiencyChangePercent: true,
        efficiencyRate: true,
        efficiencyScore: true,
        efficiencyTrend: true,
        executionRate: true,
        fillRate: true,
        id: true,
        lastOrderAt: true,
        negativeReviews: true,
        ordersChangePercent: true,
        ordersGrowthRate: true,
        ordersPerDay: true,
        ordersTrend: true,
        overtimeCount: true,
        peakHoursOrders: true,
        peakPerformanceRate: true,
        performanceChangePercent: true,
        performanceScore: true,
        performanceTrend: true,
        positiveReviews: true,
        prevMonthEfficiencyRate: true,
        prevMonthPerformanceScore: true,
        prevMonthTotalOrders: true,
        prevMonthTotalRevenue: true,
        previousMonthOrders: true,
        previousMonthRevenue: true,
        qualityScore: true,
        rating: true,
        ratingChangePercent: true,
        ratingTrend: true,
        revenueChangePercent: true,
        revenueGrowthRate: true,
        revenuePerHour: true,
        revenueTrend: true,

        salons: {
          select: {
            id: true,
          },
        },

        servicesChangePercent: true,
        servicesGrowthRate: true,
        servicesPerHour: true,
        servicesTrend: true,
        totalDowntimeHours: true,
        totalExecutionTime: true,
        totalIdleTime: true,
        totalOrders: true,
        totalRatings: true,
        totalRevenue: true,
        totalServices: true,
        totalWorkTime: true,
        totalWorkedHours: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },

        utilizationRate: true,
        workloadPercentage: true,
        yearToDateOrders: true,
        yearToDateRevenue: true,
        yearToDateServices: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeStats")
  async connectEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeStats")
  async updateEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeStats")
  async disconnectEmployeeStats(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeStats: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeTasks")
  @ApiNestedQuery(EmployeeTaskFindManyArgs)
  async findEmployeeTasks(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeTask[]> {
    const query = plainToClass(EmployeeTaskFindManyArgs, request.query);
    const results = await this.service.findEmployeeTasks(params.id, {
      ...query,
      select: {
        actualDuration: true,
        actualStartTime: true,

        appointments: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,
        estimatedDuration: true,
        id: true,
        notes: true,
        order_type: true,

        orders: {
          select: {
            id: true,
          },
        },

        queues: {
          select: {
            id: true,
          },
        },

        salons: {
          select: {
            id: true,
          },
        },

        scheduledStartTime: true,
        task_status: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeTasks")
  async connectEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeTasks")
  async updateEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeTasks")
  async disconnectEmployeeTasks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeTasks: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employeeWorkSchedules")
  @ApiNestedQuery(EmployeeWorkScheduleFindManyArgs)
  async findEmployeeWorkSchedules(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<EmployeeWorkSchedule[]> {
    const query = plainToClass(EmployeeWorkScheduleFindManyArgs, request.query);
    const results = await this.service.findEmployeeWorkSchedules(params.id, {
      ...query,
      select: {
        breakEnd: true,
        breakStart: true,
        day_of_week: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        shiftEnd: true,
        shiftStart: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeWorkSchedules")
  async connectEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeWorkSchedules")
  async updateEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeWorkSchedules")
  async disconnectEmployeeWorkSchedules(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: EmployeeWorkScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeWorkSchedules: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/loyaltyTransactions")
  @ApiNestedQuery(LoyaltyTransactionFindManyArgs)
  async findLoyaltyTransactions(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<LoyaltyTransaction[]> {
    const query = plainToClass(LoyaltyTransactionFindManyArgs, request.query);
    const results = await this.service.findLoyaltyTransactions(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        orders: {
          select: {
            id: true,
          },
        },

        pointsEarned: true,
        pointsSpent: true,
        transactionType: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loyaltyTransactions")
  async connectLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loyaltyTransactions")
  async updateLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loyaltyTransactions")
  async disconnectLoyaltyTransactions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: LoyaltyTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyTransactions: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,
        imageUrl: true,
        title: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  async connectNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  async updateNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  async disconnectNotifications(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersEmployeeIdTouserProfiles")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrdersOrdersEmployeeIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrdersOrdersEmployeeIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersEmployeeIdTouserProfiles")
  async connectOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersEmployeeIdTouserProfiles")
  async updateOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersEmployeeIdTouserProfiles")
  async disconnectOrdersOrdersEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersEmployeeIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ordersOrdersUserIdTouserProfiles")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrdersOrdersUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrdersOrdersUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          amount: true,

          appointmentsOrdersAppointmentIdToappointments: {
            select: {
              id: true,
            },
          },

          canceled: true,
          canceledReason: true,
          completed: true,
          completedAt: true,
          createdAt: true,
          depositAmount: true,
          discount: true,
          discountAmount: true,

          discounts: {
            select: {
              id: true,
            },
          },

          id: true,
          loyaltyPointsEarned: true,
          loyaltyPointsUsed: true,
          orderImageId: true,
          orderNumber: true,
          order_type: true,

          payments: {
            select: {
              id: true,
            },
          },

          promocodes: {
            select: {
              id: true,
            },
          },

          queuesOrdersQueueIdToqueues: {
            select: {
              id: true,
            },
          },

          salons: {
            select: {
              id: true,
            },
          },

          services: true,
          started: true,
          startedAt: true,
          status: true,
          totalAmount: true,
          updatedAt: true,

          userProfilesOrdersEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesOrdersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersOrdersUserIdTouserProfiles")
  async connectOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersOrdersUserIdTouserProfiles")
  async updateOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersOrdersUserIdTouserProfiles")
  async disconnectOrdersOrdersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersOrdersUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payroll")
  @ApiNestedQuery(PayrollFindManyArgs)
  async findPayroll(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Payroll[]> {
    const query = plainToClass(PayrollFindManyArgs, request.query);
    const results = await this.service.findPayroll(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payroll")
  async connectPayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payroll")
  async updatePayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payroll")
  async disconnectPayroll(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payroll: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuesQueuesEmployeeIdTouserProfiles")
  @ApiNestedQuery(QueueFindManyArgs)
  async findQueuesQueuesEmployeeIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueuesQueuesEmployeeIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuesQueuesEmployeeIdTouserProfiles")
  async connectQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuesQueuesEmployeeIdTouserProfiles")
  async updateQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuesQueuesEmployeeIdTouserProfiles")
  async disconnectQueuesQueuesEmployeeIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesEmployeeIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/queuesQueuesUserIdTouserProfiles")
  @ApiNestedQuery(QueueFindManyArgs)
  async findQueuesQueuesUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueuesQueuesUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          completed: true,
          completedAt: true,
          createdAt: true,
          estimatedWaitTime: true,
          id: true,

          ordersQueuesOrderIdToorders: {
            select: {
              id: true,
            },
          },

          queueNumber: true,

          salons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          userProfilesQueuesEmployeeIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesQueuesUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queuesQueuesUserIdTouserProfiles")
  async connectQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queuesQueuesUserIdTouserProfiles")
  async updateQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queuesQueuesUserIdTouserProfiles")
  async disconnectQueuesQueuesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queuesQueuesUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonAccounts")
  @ApiNestedQuery(SalonAccountFindManyArgs)
  async findSalonAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonAccount[]> {
    const query = plainToClass(SalonAccountFindManyArgs, request.query);
    const results = await this.service.findSalonAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonAccounts")
  async connectSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonAccounts")
  async updateSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonAccounts")
  async disconnectSalonAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  async findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            review: true,

            salonRatings: {
              select: {
                id: true,
              },
            },

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  async connectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  async updateSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikesSalonRatingLikesUserIdTouserProfiles")
  async disconnectSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  @ApiNestedQuery(SalonRatingLikeFindManyArgs)
  async findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRatingLike[]> {
    const query = plainToClass(SalonRatingLikeFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            review: true,

            salonRatings: {
              select: {
                id: true,
              },
            },

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingLikesVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  async connectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  async updateSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingLikesSalonRatingLikesVoterIdTouserProfiles")
  async disconnectSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingLikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingLikesSalonRatingLikesVoterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  @ApiNestedQuery(SalonRatingFindManyArgs)
  async findSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRating[]> {
    const query = plainToClass(SalonRatingFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingsSalonRatingsUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            rating: true,
            review: true,

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  async connectSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  async updateSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingsSalonRatingsUserIdTouserProfiles")
  async disconnectSalonRatingsSalonRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  @ApiNestedQuery(SalonRatingFindManyArgs)
  async findSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SalonRating[]> {
    const query = plainToClass(SalonRatingFindManyArgs, request.query);
    const results =
      await this.service.findSalonRatingsSalonRatingsVoterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,
            rating: true,
            review: true,

            salons: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesSalonRatingsVoterIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  async connectSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  async updateSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonRatingsSalonRatingsVoterIdTouserProfiles")
  async disconnectSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonRatingsSalonRatingsVoterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  @ApiNestedQuery(SalonFindManyArgs)
  async findSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Salon[]> {
    const query = plainToClass(SalonFindManyArgs, request.query);
    const results =
      await this.service.findSalonsSalonsSalonAdminIdTouserProfiles(params.id, {
        ...query,
        select: {
          active: true,
          address: true,
          barbers: true,
          categories: true,
          closeTime: true,
          createdAt: true,
          description: true,
          email: true,
          id: true,
          images: true,
          img: true,
          latLng: true,
          location: true,
          logo: true,
          name: true,
          open: true,
          openTime: true,
          phone: true,
          timezone: true,
          updatedAt: true,

          userProfilesSalonsSalonAdminIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          website: true,
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  async connectSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  async updateSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salonsSalonsSalonAdminIdTouserProfiles")
  async disconnectSalonsSalonsSalonAdminIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salonsSalonsSalonAdminIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scheduleScheduleBarberIdTouserProfiles")
  @ApiNestedQuery(ScheduleFindManyArgs)
  async findScheduleScheduleBarberIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results =
      await this.service.findScheduleScheduleBarberIdTouserProfiles(params.id, {
        ...query,
        select: {
          appointmentDate: true,
          appointmentTime: true,
          id: true,

          userProfilesScheduleBarberIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesScheduleUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scheduleScheduleBarberIdTouserProfiles")
  async connectScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scheduleScheduleBarberIdTouserProfiles")
  async updateScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scheduleScheduleBarberIdTouserProfiles")
  async disconnectScheduleScheduleBarberIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleBarberIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scheduleScheduleUserIdTouserProfiles")
  @ApiNestedQuery(ScheduleFindManyArgs)
  async findScheduleScheduleUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results = await this.service.findScheduleScheduleUserIdTouserProfiles(
      params.id,
      {
        ...query,
        select: {
          appointmentDate: true,
          appointmentTime: true,
          id: true,

          userProfilesScheduleBarberIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesScheduleUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scheduleScheduleUserIdTouserProfiles")
  async connectScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scheduleScheduleUserIdTouserProfiles")
  async updateScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scheduleScheduleUserIdTouserProfiles")
  async disconnectScheduleScheduleUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scheduleScheduleUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timeSlots")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async findTimeSlots(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlots(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        isAvailable: true,

        salons: {
          select: {
            id: true,
          },
        },

        slotDate: true,
        slotTime: true,
        startTime: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timeSlots")
  async connectTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timeSlots")
  async updateTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timeSlots")
  async disconnectTimeSlots(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAccounts")
  @ApiNestedQuery(UserAccountFindManyArgs)
  async findUserAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserAccount[]> {
    const query = plainToClass(UserAccountFindManyArgs, request.query);
    const results = await this.service.findUserAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,
        numberField: true,

        salons: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAccounts")
  async connectUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAccounts")
  async updateUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAccounts")
  async disconnectUserAccounts(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAddresses")
  @ApiNestedQuery(UserAddressFindManyArgs)
  async findUserAddresses(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserAddress[]> {
    const query = plainToClass(UserAddressFindManyArgs, request.query);
    const results = await this.service.findUserAddresses(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAddresses")
  async connectUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAddresses")
  async updateUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAddresses")
  async disconnectUserAddresses(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserAddressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAddresses: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userBankCards")
  @ApiNestedQuery(UserBankCardFindManyArgs)
  async findUserBankCards(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserBankCard[]> {
    const query = plainToClass(UserBankCardFindManyArgs, request.query);
    const results = await this.service.findUserBankCards(params.id, {
      ...query,
      select: {
        createdAt: true,
        cvv: true,
        expDate: true,
        favorite: true,
        id: true,
        main: true,
        name: true,
        numberField: true,
        token: true,
        updatedAt: true,

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userBankCards")
  async connectUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userBankCards")
  async updateUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userBankCards")
  async disconnectUserBankCards(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserBankCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBankCards: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  @ApiNestedQuery(UserFavoriteMasterFindManyArgs)
  async findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteMaster[]> {
    const query = plainToClass(UserFavoriteMasterFindManyArgs, request.query);
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            favorite: true,
            id: true,

            userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserFavoriteMastersUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async connectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async updateUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles"
  )
  async disconnectUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles")
  @ApiNestedQuery(UserFavoriteMasterFindManyArgs)
  async findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteMaster[]> {
    const query = plainToClass(UserFavoriteMasterFindManyArgs, request.query);
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            favorite: true,
            id: true,

            userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserFavoriteMastersUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async connectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async updateUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles"
  )
  async disconnectUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteMasterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userFavoriteSalons")
  @ApiNestedQuery(UserFavoriteSalonFindManyArgs)
  async findUserFavoriteSalons(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserFavoriteSalon[]> {
    const query = plainToClass(UserFavoriteSalonFindManyArgs, request.query);
    const results = await this.service.findUserFavoriteSalons(params.id, {
      ...query,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        salons: {
          select: {
            id: true,
          },
        },

        userProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userFavoriteSalons")
  async connectUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userFavoriteSalons")
  async updateUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userFavoriteSalons")
  async disconnectUserFavoriteSalons(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserFavoriteSalonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteSalons: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  @ApiNestedQuery(UserRatingFindManyArgs)
  async findUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserRating[]> {
    const query = plainToClass(UserRatingFindManyArgs, request.query);
    const results =
      await this.service.findUserRatingsUserRatingsOwnerTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,

            orders: {
              select: {
                id: true,
              },
            },

            rating: true,
            review: true,

            userProfilesUserRatingsOwnerTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  async connectUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  async updateUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRatingsUserRatingsOwnerTouserProfiles")
  async disconnectUserRatingsUserRatingsOwnerTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsOwnerTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  @ApiNestedQuery(UserRatingFindManyArgs)
  async findUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserRating[]> {
    const query = plainToClass(UserRatingFindManyArgs, request.query);
    const results =
      await this.service.findUserRatingsUserRatingsUserIdTouserProfiles(
        params.id,
        {
          ...query,
          select: {
            createdAt: true,
            id: true,

            orders: {
              select: {
                id: true,
              },
            },

            rating: true,
            review: true,

            userProfilesUserRatingsOwnerTouserProfiles: {
              select: {
                id: true,
              },
            },

            userProfilesUserRatingsUserIdTouserProfiles: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  async connectUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  async updateUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRatingsUserRatingsUserIdTouserProfiles")
  async disconnectUserRatingsUserRatingsUserIdTouserProfiles(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: UserRatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRatingsUserRatingsUserIdTouserProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
