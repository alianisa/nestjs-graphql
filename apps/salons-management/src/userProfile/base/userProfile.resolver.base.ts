/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserProfile } from "./UserProfile";
import { UserProfileCountArgs } from "./UserProfileCountArgs";
import { UserProfileFindManyArgs } from "./UserProfileFindManyArgs";
import { UserProfileFindUniqueArgs } from "./UserProfileFindUniqueArgs";
import { CreateUserProfileArgs } from "./CreateUserProfileArgs";
import { UpdateUserProfileArgs } from "./UpdateUserProfileArgs";
import { DeleteUserProfileArgs } from "./DeleteUserProfileArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ChatFindManyArgs } from "../../chat/base/ChatFindManyArgs";
import { Chat } from "../../chat/base/Chat";
import { EmployeeDailyStatFindManyArgs } from "../../employeeDailyStat/base/EmployeeDailyStatFindManyArgs";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeStatFindManyArgs } from "../../employeeStat/base/EmployeeStatFindManyArgs";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeTaskFindManyArgs } from "../../employeeTask/base/EmployeeTaskFindManyArgs";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeWorkScheduleFindManyArgs } from "../../employeeWorkSchedule/base/EmployeeWorkScheduleFindManyArgs";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { LoyaltyTransactionFindManyArgs } from "../../loyaltyTransaction/base/LoyaltyTransactionFindManyArgs";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { SalonAccountFindManyArgs } from "../../salonAccount/base/SalonAccountFindManyArgs";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonRatingLikeFindManyArgs } from "../../salonRatingLike/base/SalonRatingLikeFindManyArgs";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRatingFindManyArgs } from "../../salonRating/base/SalonRatingFindManyArgs";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { SalonFindManyArgs } from "../../salon/base/SalonFindManyArgs";
import { Salon } from "../../salon/base/Salon";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAddressFindManyArgs } from "../../userAddress/base/UserAddressFindManyArgs";
import { UserAddress } from "../../userAddress/base/UserAddress";
import { UserBankCardFindManyArgs } from "../../userBankCard/base/UserBankCardFindManyArgs";
import { UserBankCard } from "../../userBankCard/base/UserBankCard";
import { UserFavoriteMasterFindManyArgs } from "../../userFavoriteMaster/base/UserFavoriteMasterFindManyArgs";
import { UserFavoriteMaster } from "../../userFavoriteMaster/base/UserFavoriteMaster";
import { UserFavoriteSalonFindManyArgs } from "../../userFavoriteSalon/base/UserFavoriteSalonFindManyArgs";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserRatingFindManyArgs } from "../../userRating/base/UserRatingFindManyArgs";
import { UserRating } from "../../userRating/base/UserRating";
import { User } from "../../user/base/User";
import { UserGender } from "../../userGender/base/UserGender";
import { UserNotificationSetting } from "../../userNotificationSetting/base/UserNotificationSetting";
import { UserProfileService } from "../userProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserProfile)
export class UserProfileResolverBase {
  constructor(
    protected readonly service: UserProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async _userProfilesMeta(
    @graphql.Args() args: UserProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserProfile])
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async userProfiles(
    @graphql.Args() args: UserProfileFindManyArgs
  ): Promise<UserProfile[]> {
    return this.service.userProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "own",
  })
  async userProfile(
    @graphql.Args() args: UserProfileFindUniqueArgs
  ): Promise<UserProfile | null> {
    const result = await this.service.userProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProfile)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "create",
    possession: "any",
  })
  async createUserProfile(
    @graphql.Args() args: CreateUserProfileArgs
  ): Promise<UserProfile> {
    return await this.service.createUserProfile({
      ...args,
      data: {
        ...args.data,

        salonsUserProfilesSalonIdTosalons: args.data
          .salonsUserProfilesSalonIdTosalons
          ? {
              connect: args.data.salonsUserProfilesSalonIdTosalons,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        userGenders: args.data.userGenders
          ? {
              connect: args.data.userGenders,
            }
          : undefined,

        userNotificationSettings: args.data.userNotificationSettings
          ? {
              connect: args.data.userNotificationSettings,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProfile)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateUserProfile(
    @graphql.Args() args: UpdateUserProfileArgs
  ): Promise<UserProfile | null> {
    try {
      return await this.service.updateUserProfile({
        ...args,
        data: {
          ...args.data,

          salonsUserProfilesSalonIdTosalons: args.data
            .salonsUserProfilesSalonIdTosalons
            ? {
                connect: args.data.salonsUserProfilesSalonIdTosalons,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          userGenders: args.data.userGenders
            ? {
                connect: args.data.userGenders,
              }
            : undefined,

          userNotificationSettings: args.data.userNotificationSettings
            ? {
                connect: args.data.userNotificationSettings,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserProfile)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "delete",
    possession: "any",
  })
  async deleteUserProfile(
    @graphql.Args() args: DeleteUserProfileArgs
  ): Promise<UserProfile | null> {
    try {
      return await this.service.deleteUserProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attendance], { name: "attendances" })
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: AttendanceFindManyArgs
  ): Promise<Attendance[]> {
    const results = await this.service.findAttendances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ChatMessage], { name: "chatMessages" })
  @nestAccessControl.UseRoles({
    resource: "ChatMessage",
    action: "read",
    possession: "any",
  })
  async findChatMessages(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ChatMessageFindManyArgs
  ): Promise<ChatMessage[]> {
    const results = await this.service.findChatMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Chat], { name: "chatsChatsUserATouserProfiles" })
  @nestAccessControl.UseRoles({
    resource: "Chat",
    action: "read",
    possession: "any",
  })
  async findChatsChatsUserATouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ChatFindManyArgs
  ): Promise<Chat[]> {
    const results = await this.service.findChatsChatsUserATouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Chat], { name: "chatsChatsUserBTouserProfiles" })
  @nestAccessControl.UseRoles({
    resource: "Chat",
    action: "read",
    possession: "any",
  })
  async findChatsChatsUserBTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ChatFindManyArgs
  ): Promise<Chat[]> {
    const results = await this.service.findChatsChatsUserBTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Chat], { name: "chatsChatsUsersTouserProfiles" })
  @nestAccessControl.UseRoles({
    resource: "Chat",
    action: "read",
    possession: "any",
  })
  async findChatsChatsUsersTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ChatFindManyArgs
  ): Promise<Chat[]> {
    const results = await this.service.findChatsChatsUsersTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeDailyStat], {
    name: "employeeDailyStats",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDailyStat",
    action: "read",
    possession: "any",
  })
  async findEmployeeDailyStats(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: EmployeeDailyStatFindManyArgs
  ): Promise<EmployeeDailyStat[]> {
    const results = await this.service.findEmployeeDailyStats(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeStat], { name: "employeeStats" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeStat",
    action: "read",
    possession: "any",
  })
  async findEmployeeStats(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: EmployeeStatFindManyArgs
  ): Promise<EmployeeStat[]> {
    const results = await this.service.findEmployeeStats(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeTask], { name: "employeeTasks" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeTask",
    action: "read",
    possession: "any",
  })
  async findEmployeeTasks(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: EmployeeTaskFindManyArgs
  ): Promise<EmployeeTask[]> {
    const results = await this.service.findEmployeeTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeWorkSchedule], {
    name: "employeeWorkSchedules",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeWorkSchedule",
    action: "read",
    possession: "any",
  })
  async findEmployeeWorkSchedules(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: EmployeeWorkScheduleFindManyArgs
  ): Promise<EmployeeWorkSchedule[]> {
    const results = await this.service.findEmployeeWorkSchedules(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LoyaltyTransaction], {
    name: "loyaltyTransactions",
  })
  @nestAccessControl.UseRoles({
    resource: "LoyaltyTransaction",
    action: "read",
    possession: "any",
  })
  async findLoyaltyTransactions(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: LoyaltyTransactionFindManyArgs
  ): Promise<LoyaltyTransaction[]> {
    const results = await this.service.findLoyaltyTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], {
    name: "ordersOrdersEmployeeIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrdersOrdersEmployeeIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrdersOrdersEmployeeIdTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], {
    name: "ordersOrdersUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrdersOrdersUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrdersOrdersUserIdTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payroll], { name: "payroll" })
  @nestAccessControl.UseRoles({
    resource: "Payroll",
    action: "read",
    possession: "any",
  })
  async findPayroll(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: PayrollFindManyArgs
  ): Promise<Payroll[]> {
    const results = await this.service.findPayroll(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Queue], {
    name: "queuesQueuesEmployeeIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async findQueuesQueuesEmployeeIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: QueueFindManyArgs
  ): Promise<Queue[]> {
    const results = await this.service.findQueuesQueuesEmployeeIdTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Queue], {
    name: "queuesQueuesUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async findQueuesQueuesUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: QueueFindManyArgs
  ): Promise<Queue[]> {
    const results = await this.service.findQueuesQueuesUserIdTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonAccount], { name: "salonAccounts" })
  @nestAccessControl.UseRoles({
    resource: "SalonAccount",
    action: "read",
    possession: "any",
  })
  async findSalonAccounts(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonAccountFindManyArgs
  ): Promise<SalonAccount[]> {
    const results = await this.service.findSalonAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRatingLike], {
    name: "salonRatingLikesSalonRatingLikesUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "SalonRatingLike",
    action: "read",
    possession: "any",
  })
  async findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonRatingLikeFindManyArgs
  ): Promise<SalonRatingLike[]> {
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesUserIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRatingLike], {
    name: "salonRatingLikesSalonRatingLikesVoterIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "SalonRatingLike",
    action: "read",
    possession: "any",
  })
  async findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonRatingLikeFindManyArgs
  ): Promise<SalonRatingLike[]> {
    const results =
      await this.service.findSalonRatingLikesSalonRatingLikesVoterIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRating], {
    name: "salonRatingsSalonRatingsUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "read",
    possession: "any",
  })
  async findSalonRatingsSalonRatingsUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonRatingFindManyArgs
  ): Promise<SalonRating[]> {
    const results =
      await this.service.findSalonRatingsSalonRatingsUserIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalonRating], {
    name: "salonRatingsSalonRatingsVoterIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "SalonRating",
    action: "read",
    possession: "any",
  })
  async findSalonRatingsSalonRatingsVoterIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonRatingFindManyArgs
  ): Promise<SalonRating[]> {
    const results =
      await this.service.findSalonRatingsSalonRatingsVoterIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Salon], {
    name: "salonsSalonsSalonAdminIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async findSalonsSalonsSalonAdminIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: SalonFindManyArgs
  ): Promise<Salon[]> {
    const results =
      await this.service.findSalonsSalonsSalonAdminIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Schedule], {
    name: "scheduleScheduleBarberIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async findScheduleScheduleBarberIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    const results =
      await this.service.findScheduleScheduleBarberIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Schedule], {
    name: "scheduleScheduleUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async findScheduleScheduleUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    const results = await this.service.findScheduleScheduleUserIdTouserProfiles(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TimeSlot], { name: "timeSlots" })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async findTimeSlots(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    const results = await this.service.findTimeSlots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserAccount], { name: "userAccounts" })
  @nestAccessControl.UseRoles({
    resource: "UserAccount",
    action: "read",
    possession: "any",
  })
  async findUserAccounts(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserAccountFindManyArgs
  ): Promise<UserAccount[]> {
    const results = await this.service.findUserAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserAddress], { name: "userAddresses" })
  @nestAccessControl.UseRoles({
    resource: "UserAddress",
    action: "read",
    possession: "any",
  })
  async findUserAddresses(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserAddressFindManyArgs
  ): Promise<UserAddress[]> {
    const results = await this.service.findUserAddresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserBankCard], { name: "userBankCards" })
  @nestAccessControl.UseRoles({
    resource: "UserBankCard",
    action: "read",
    possession: "any",
  })
  async findUserBankCards(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserBankCardFindManyArgs
  ): Promise<UserBankCard[]> {
    const results = await this.service.findUserBankCards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFavoriteMaster], {
    name: "userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteMaster",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserFavoriteMasterFindManyArgs
  ): Promise<UserFavoriteMaster[]> {
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFavoriteMaster], {
    name: "userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteMaster",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserFavoriteMasterFindManyArgs
  ): Promise<UserFavoriteMaster[]> {
    const results =
      await this.service.findUserFavoriteMastersUserFavoriteMastersUserIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFavoriteSalon], {
    name: "userFavoriteSalons",
  })
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteSalon",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteSalons(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserFavoriteSalonFindManyArgs
  ): Promise<UserFavoriteSalon[]> {
    const results = await this.service.findUserFavoriteSalons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserRating], {
    name: "userRatingsUserRatingsOwnerTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "read",
    possession: "any",
  })
  async findUserRatingsUserRatingsOwnerTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserRatingFindManyArgs
  ): Promise<UserRating[]> {
    const results =
      await this.service.findUserRatingsUserRatingsOwnerTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserRating], {
    name: "userRatingsUserRatingsUserIdTouserProfiles",
  })
  @nestAccessControl.UseRoles({
    resource: "UserRating",
    action: "read",
    possession: "any",
  })
  async findUserRatingsUserRatingsUserIdTouserProfiles(
    @graphql.Parent() parent: UserProfile,
    @graphql.Args() args: UserRatingFindManyArgs
  ): Promise<UserRating[]> {
    const results =
      await this.service.findUserRatingsUserRatingsUserIdTouserProfiles(
        parent.id,
        args
      );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salon, {
    nullable: true,
    name: "salonsUserProfilesSalonIdTosalons",
  })
  @nestAccessControl.UseRoles({
    resource: "Salon",
    action: "read",
    possession: "any",
  })
  async getSalonsUserProfilesSalonIdTosalons(
    @graphql.Parent() parent: UserProfile
  ): Promise<Salon | null> {
    const result = await this.service.getSalonsUserProfilesSalonIdTosalons(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserProfile): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserGender, {
    nullable: true,
    name: "userGenders",
  })
  @nestAccessControl.UseRoles({
    resource: "UserGender",
    action: "read",
    possession: "any",
  })
  async getUserGenders(
    @graphql.Parent() parent: UserProfile
  ): Promise<UserGender | null> {
    const result = await this.service.getUserGenders(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserNotificationSetting, {
    nullable: true,
    name: "userNotificationSettings",
  })
  @nestAccessControl.UseRoles({
    resource: "UserNotificationSetting",
    action: "read",
    possession: "any",
  })
  async getUserNotificationSettings(
    @graphql.Parent() parent: UserProfile
  ): Promise<UserNotificationSetting | null> {
    const result = await this.service.getUserNotificationSettings(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
