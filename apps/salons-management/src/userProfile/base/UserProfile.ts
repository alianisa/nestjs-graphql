/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Appointment } from "../../appointment/base/Appointment";

import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsBoolean,
  IsInt,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { Attendance } from "../../attendance/base/Attendance";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { Chat } from "../../chat/base/Chat";
import { EmployeeDailyStat } from "../../employeeDailyStat/base/EmployeeDailyStat";
import { EmployeeStat } from "../../employeeStat/base/EmployeeStat";
import { EmployeeTask } from "../../employeeTask/base/EmployeeTask";
import { EmployeeWorkSchedule } from "../../employeeWorkSchedule/base/EmployeeWorkSchedule";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { LoyaltyTransaction } from "../../loyaltyTransaction/base/LoyaltyTransaction";
import { Notification } from "../../notification/base/Notification";
import { Order } from "../../order/base/Order";
import { Payroll } from "../../payroll/base/Payroll";
import { Queue } from "../../queue/base/Queue";
import { SalonAccount } from "../../salonAccount/base/SalonAccount";
import { SalonRatingLike } from "../../salonRatingLike/base/SalonRatingLike";
import { SalonRating } from "../../salonRating/base/SalonRating";
import { Salon } from "../../salon/base/Salon";
import { Schedule } from "../../schedule/base/Schedule";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAddress } from "../../userAddress/base/UserAddress";
import { UserBankCard } from "../../userBankCard/base/UserBankCard";
import { UserFavoriteMaster } from "../../userFavoriteMaster/base/UserFavoriteMaster";
import { UserFavoriteSalon } from "../../userFavoriteSalon/base/UserFavoriteSalon";
import { UserGender } from "../../userGender/base/UserGender";
import { UserNotificationSetting } from "../../userNotificationSetting/base/UserNotificationSetting";
import { UserRating } from "../../userRating/base/UserRating";

@ObjectType()
class UserProfile {
  @ApiProperty({
    required: false,
    type: () => [Appointment],
  })
  @ValidateNested()
  @Type(() => Appointment)
  @IsOptional()
  appointments?: Array<Appointment>;

  @ApiProperty({
    required: false,
    type: () => [Attendance],
  })
  @ValidateNested()
  @Type(() => Attendance)
  @IsOptional()
  attendances?: Array<Attendance>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatarUrl!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ChatMessage],
  })
  @ValidateNested()
  @Type(() => ChatMessage)
  @IsOptional()
  chatMessages?: Array<ChatMessage>;

  @ApiProperty({
    required: false,
    type: () => [Chat],
  })
  @ValidateNested()
  @Type(() => Chat)
  @IsOptional()
  chatsChatsUserATouserProfiles?: Array<Chat>;

  @ApiProperty({
    required: false,
    type: () => [Chat],
  })
  @ValidateNested()
  @Type(() => Chat)
  @IsOptional()
  chatsChatsUserBTouserProfiles?: Array<Chat>;

  @ApiProperty({
    required: false,
    type: () => [Chat],
  })
  @ValidateNested()
  @Type(() => Chat)
  @IsOptional()
  chatsChatsUsersTouserProfiles?: Array<Chat>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeDailyStat],
  })
  @ValidateNested()
  @Type(() => EmployeeDailyStat)
  @IsOptional()
  employeeDailyStats?: Array<EmployeeDailyStat>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeDismissalAt!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  employeeEmploymentAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [EmployeeStat],
  })
  @ValidateNested()
  @Type(() => EmployeeStat)
  @IsOptional()
  employeeStats?: Array<EmployeeStat>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeTask],
  })
  @ValidateNested()
  @Type(() => EmployeeTask)
  @IsOptional()
  employeeTasks?: Array<EmployeeTask>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeWorkSchedule],
  })
  @ValidateNested()
  @Type(() => EmployeeWorkSchedule)
  @IsOptional()
  employeeWorkSchedules?: Array<EmployeeWorkSchedule>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  fullRegistered!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  hiredDate!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAdmin!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBarber!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmployee!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  jobTitle!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  location!: JsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  loyaltyPoints!: number | null;

  @ApiProperty({
    required: false,
    type: () => [LoyaltyTransaction],
  })
  @ValidateNested()
  @Type(() => LoyaltyTransaction)
  @IsOptional()
  loyaltyTransactions?: Array<LoyaltyTransaction>;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;

  @ApiProperty({
    required: false,
    type: () => [Order],
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  ordersOrdersEmployeeIdTouserProfiles?: Array<Order>;

  @ApiProperty({
    required: false,
    type: () => [Order],
  })
  @ValidateNested()
  @Type(() => Order)
  @IsOptional()
  ordersOrdersUserIdTouserProfiles?: Array<Order>;

  @ApiProperty({
    required: false,
    type: () => [Payroll],
  })
  @ValidateNested()
  @Type(() => Payroll)
  @IsOptional()
  payroll?: Array<Payroll>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Queue],
  })
  @ValidateNested()
  @Type(() => Queue)
  @IsOptional()
  queuesQueuesEmployeeIdTouserProfiles?: Array<Queue>;

  @ApiProperty({
    required: false,
    type: () => [Queue],
  })
  @ValidateNested()
  @Type(() => Queue)
  @IsOptional()
  queuesQueuesUserIdTouserProfiles?: Array<Queue>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  roles!: string;

  @ApiProperty({
    required: false,
    type: () => [SalonAccount],
  })
  @ValidateNested()
  @Type(() => SalonAccount)
  @IsOptional()
  salonAccounts?: Array<SalonAccount>;

  @ApiProperty({
    required: false,
    type: () => [SalonRatingLike],
  })
  @ValidateNested()
  @Type(() => SalonRatingLike)
  @IsOptional()
  salonRatingLikesSalonRatingLikesUserIdTouserProfiles?: Array<SalonRatingLike>;

  @ApiProperty({
    required: false,
    type: () => [SalonRatingLike],
  })
  @ValidateNested()
  @Type(() => SalonRatingLike)
  @IsOptional()
  salonRatingLikesSalonRatingLikesVoterIdTouserProfiles?: Array<SalonRatingLike>;

  @ApiProperty({
    required: false,
    type: () => [SalonRating],
  })
  @ValidateNested()
  @Type(() => SalonRating)
  @IsOptional()
  salonRatingsSalonRatingsUserIdTouserProfiles?: Array<SalonRating>;

  @ApiProperty({
    required: false,
    type: () => [SalonRating],
  })
  @ValidateNested()
  @Type(() => SalonRating)
  @IsOptional()
  salonRatingsSalonRatingsVoterIdTouserProfiles?: Array<SalonRating>;

  @ApiProperty({
    required: false,
    type: () => [Salon],
  })
  @ValidateNested()
  @Type(() => Salon)
  @IsOptional()
  salonsSalonsSalonAdminIdTouserProfiles?: Array<Salon>;

  @ApiProperty({
    required: false,
    type: () => Salon,
  })
  @ValidateNested()
  @Type(() => Salon)
  @IsOptional()
  salonsUserProfilesSalonIdTosalons?: Salon | null;

  @ApiProperty({
    required: false,
    type: () => [Schedule],
  })
  @ValidateNested()
  @Type(() => Schedule)
  @IsOptional()
  scheduleScheduleBarberIdTouserProfiles?: Array<Schedule>;

  @ApiProperty({
    required: false,
    type: () => [Schedule],
  })
  @ValidateNested()
  @Type(() => Schedule)
  @IsOptional()
  scheduleScheduleUserIdTouserProfiles?: Array<Schedule>;

  @ApiProperty({
    required: false,
    type: () => [TimeSlot],
  })
  @ValidateNested()
  @Type(() => TimeSlot)
  @IsOptional()
  timeSlots?: Array<TimeSlot>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [UserAccount],
  })
  @ValidateNested()
  @Type(() => UserAccount)
  @IsOptional()
  userAccounts?: Array<UserAccount>;

  @ApiProperty({
    required: false,
    type: () => [UserAddress],
  })
  @ValidateNested()
  @Type(() => UserAddress)
  @IsOptional()
  userAddresses?: Array<UserAddress>;

  @ApiProperty({
    required: false,
    type: () => [UserBankCard],
  })
  @ValidateNested()
  @Type(() => UserBankCard)
  @IsOptional()
  userBankCards?: Array<UserBankCard>;

  @ApiProperty({
    required: false,
    type: () => [UserFavoriteMaster],
  })
  @ValidateNested()
  @Type(() => UserFavoriteMaster)
  @IsOptional()
  userFavoriteMastersUserFavoriteMastersMasterIdTouserProfiles?: Array<UserFavoriteMaster>;

  @ApiProperty({
    required: false,
    type: () => [UserFavoriteMaster],
  })
  @ValidateNested()
  @Type(() => UserFavoriteMaster)
  @IsOptional()
  userFavoriteMastersUserFavoriteMastersUserIdTouserProfiles?: Array<UserFavoriteMaster>;

  @ApiProperty({
    required: false,
    type: () => [UserFavoriteSalon],
  })
  @ValidateNested()
  @Type(() => UserFavoriteSalon)
  @IsOptional()
  userFavoriteSalons?: Array<UserFavoriteSalon>;

  @ApiProperty({
    required: false,
    type: () => UserGender,
  })
  @ValidateNested()
  @Type(() => UserGender)
  @IsOptional()
  userGenders?: UserGender | null;

  @ApiProperty({
    required: false,
    type: () => UserNotificationSetting,
  })
  @ValidateNested()
  @Type(() => UserNotificationSetting)
  @IsOptional()
  userNotificationSettings?: UserNotificationSetting | null;

  @ApiProperty({
    required: false,
    type: () => [UserRating],
  })
  @ValidateNested()
  @Type(() => UserRating)
  @IsOptional()
  userRatingsUserRatingsOwnerTouserProfiles?: Array<UserRating>;

  @ApiProperty({
    required: false,
    type: () => [UserRating],
  })
  @ValidateNested()
  @Type(() => UserRating)
  @IsOptional()
  userRatingsUserRatingsUserIdTouserProfiles?: Array<UserRating>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  website!: string | null;
}

export { UserProfile as UserProfile };
