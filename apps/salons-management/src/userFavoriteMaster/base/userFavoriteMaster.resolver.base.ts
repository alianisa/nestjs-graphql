/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserFavoriteMaster } from "./UserFavoriteMaster";
import { UserFavoriteMasterCountArgs } from "./UserFavoriteMasterCountArgs";
import { UserFavoriteMasterFindManyArgs } from "./UserFavoriteMasterFindManyArgs";
import { UserFavoriteMasterFindUniqueArgs } from "./UserFavoriteMasterFindUniqueArgs";
import { CreateUserFavoriteMasterArgs } from "./CreateUserFavoriteMasterArgs";
import { UpdateUserFavoriteMasterArgs } from "./UpdateUserFavoriteMasterArgs";
import { DeleteUserFavoriteMasterArgs } from "./DeleteUserFavoriteMasterArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { UserFavoriteMasterService } from "../userFavoriteMaster.service";
@graphql.Resolver(() => UserFavoriteMaster)
export class UserFavoriteMasterResolverBase {
  constructor(protected readonly service: UserFavoriteMasterService) {}

  async _userFavoriteMastersMeta(
    @graphql.Args() args: UserFavoriteMasterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserFavoriteMaster])
  async userFavoriteMasters(
    @graphql.Args() args: UserFavoriteMasterFindManyArgs
  ): Promise<UserFavoriteMaster[]> {
    return this.service.userFavoriteMasters(args);
  }

  @graphql.Query(() => UserFavoriteMaster, { nullable: true })
  async userFavoriteMaster(
    @graphql.Args() args: UserFavoriteMasterFindUniqueArgs
  ): Promise<UserFavoriteMaster | null> {
    const result = await this.service.userFavoriteMaster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserFavoriteMaster)
  async createUserFavoriteMaster(
    @graphql.Args() args: CreateUserFavoriteMasterArgs
  ): Promise<UserFavoriteMaster> {
    return await this.service.createUserFavoriteMaster({
      ...args,
      data: {
        ...args.data,

        userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
          connect:
            args.data.userProfilesUserFavoriteMastersMasterIdTouserProfiles,
        },

        userProfilesUserFavoriteMastersUserIdTouserProfiles: args.data
          .userProfilesUserFavoriteMastersUserIdTouserProfiles
          ? {
              connect:
                args.data.userProfilesUserFavoriteMastersUserIdTouserProfiles,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserFavoriteMaster)
  async updateUserFavoriteMaster(
    @graphql.Args() args: UpdateUserFavoriteMasterArgs
  ): Promise<UserFavoriteMaster | null> {
    try {
      return await this.service.updateUserFavoriteMaster({
        ...args,
        data: {
          ...args.data,

          userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
            connect:
              args.data.userProfilesUserFavoriteMastersMasterIdTouserProfiles,
          },

          userProfilesUserFavoriteMastersUserIdTouserProfiles: args.data
            .userProfilesUserFavoriteMastersUserIdTouserProfiles
            ? {
                connect:
                  args.data.userProfilesUserFavoriteMastersUserIdTouserProfiles,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFavoriteMaster)
  async deleteUserFavoriteMaster(
    @graphql.Args() args: DeleteUserFavoriteMasterArgs
  ): Promise<UserFavoriteMaster | null> {
    try {
      return await this.service.deleteUserFavoriteMaster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesUserFavoriteMastersMasterIdTouserProfiles",
  })
  async getUserProfilesUserFavoriteMastersMasterIdTouserProfiles(
    @graphql.Parent() parent: UserFavoriteMaster
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesUserFavoriteMastersMasterIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfilesUserFavoriteMastersUserIdTouserProfiles",
  })
  async getUserProfilesUserFavoriteMastersUserIdTouserProfiles(
    @graphql.Parent() parent: UserFavoriteMaster
  ): Promise<UserProfile | null> {
    const result =
      await this.service.getUserProfilesUserFavoriteMastersUserIdTouserProfiles(
        parent.id
      );

    if (!result) {
      return null;
    }
    return result;
  }
}
