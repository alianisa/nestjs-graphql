/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserFavoriteMasterService } from "../userFavoriteMaster.service";
import { UserFavoriteMasterCreateInput } from "./UserFavoriteMasterCreateInput";
import { UserFavoriteMaster } from "./UserFavoriteMaster";
import { UserFavoriteMasterFindManyArgs } from "./UserFavoriteMasterFindManyArgs";
import { UserFavoriteMasterWhereUniqueInput } from "./UserFavoriteMasterWhereUniqueInput";
import { UserFavoriteMasterUpdateInput } from "./UserFavoriteMasterUpdateInput";

export class UserFavoriteMasterControllerBase {
  constructor(protected readonly service: UserFavoriteMasterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserFavoriteMaster })
  async createUserFavoriteMaster(
    @common.Body() data: UserFavoriteMasterCreateInput
  ): Promise<UserFavoriteMaster> {
    return await this.service.createUserFavoriteMaster({
      data: {
        ...data,

        userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
          connect: data.userProfilesUserFavoriteMastersMasterIdTouserProfiles,
        },

        userProfilesUserFavoriteMastersUserIdTouserProfiles:
          data.userProfilesUserFavoriteMastersUserIdTouserProfiles
            ? {
                connect:
                  data.userProfilesUserFavoriteMastersUserIdTouserProfiles,
              }
            : undefined,
      },
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserFavoriteMastersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserFavoriteMaster] })
  @ApiNestedQuery(UserFavoriteMasterFindManyArgs)
  async userFavoriteMasters(
    @common.Req() request: Request
  ): Promise<UserFavoriteMaster[]> {
    const args = plainToClass(UserFavoriteMasterFindManyArgs, request.query);
    return this.service.userFavoriteMasters({
      ...args,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserFavoriteMastersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userFavoriteMaster(
    @common.Param() params: UserFavoriteMasterWhereUniqueInput
  ): Promise<UserFavoriteMaster | null> {
    const result = await this.service.userFavoriteMaster({
      where: params,
      select: {
        createdAt: true,
        favorite: true,
        id: true,

        userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
          select: {
            id: true,
          },
        },

        userProfilesUserFavoriteMastersUserIdTouserProfiles: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserFavoriteMaster(
    @common.Param() params: UserFavoriteMasterWhereUniqueInput,
    @common.Body() data: UserFavoriteMasterUpdateInput
  ): Promise<UserFavoriteMaster | null> {
    try {
      return await this.service.updateUserFavoriteMaster({
        where: params,
        data: {
          ...data,

          userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
            connect: data.userProfilesUserFavoriteMastersMasterIdTouserProfiles,
          },

          userProfilesUserFavoriteMastersUserIdTouserProfiles:
            data.userProfilesUserFavoriteMastersUserIdTouserProfiles
              ? {
                  connect:
                    data.userProfilesUserFavoriteMastersUserIdTouserProfiles,
                }
              : undefined,
        },
        select: {
          createdAt: true,
          favorite: true,
          id: true,

          userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesUserFavoriteMastersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserFavoriteMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserFavoriteMaster(
    @common.Param() params: UserFavoriteMasterWhereUniqueInput
  ): Promise<UserFavoriteMaster | null> {
    try {
      return await this.service.deleteUserFavoriteMaster({
        where: params,
        select: {
          createdAt: true,
          favorite: true,
          id: true,

          userProfilesUserFavoriteMastersMasterIdTouserProfiles: {
            select: {
              id: true,
            },
          },

          userProfilesUserFavoriteMastersUserIdTouserProfiles: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
